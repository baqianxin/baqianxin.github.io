<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DNS 解析keywords</title>
    <url>/2020/09/15/DNS-%E8%A7%A3%E6%9E%90keywords/</url>
    <content><![CDATA[
        <h1 id="DNS-解析keywords"   >
          <a href="#DNS-解析keywords" class="heading-link"><i class="fas fa-link"></i></a><a href="#DNS-解析keywords" class="headerlink" title="DNS 解析keywords"></a>DNS 解析keywords</h1>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(Client)--&gt;B(Local DNS)</span><br></pre></td></tr></table></div></figure>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Client --&gt; hosts文件 </span><br><span class="line">--&gt; DNS Service Local Cache --&gt; DNS Server (recursion递归查看本地配置的解析文件) </span><br><span class="line">--&gt; Server Cache </span><br><span class="line">--&gt; iteration(迭代) --&gt; 根 --&gt; 顶级域名DNS --&gt; 二级域名DNS…</span><br><span class="line">最终本地dns查看结果后返回给客户端</span><br></pre></td></tr></table></div></figure>
<blockquote>
<ul>
<li>DNS 解析，若缓存命中就会直接返回缓存结果，不再进行递归DNS查询</li>
</ul>
</blockquote>
<span id="more"></span>

<p><strong>缓存</strong></p>
<ul>
<li>DNS解析缓存数据，在递归获取真实 访问IP之后更新</li>
</ul>
<p><strong>递归</strong></p>
<ul>
<li>从缓存数据中无法获取目的地IP，则开始递归查询各级域名服务器，获取最终IP<ul>
<li>根域名服务器</li>
<li>顶级域名服务器</li>
<li><strong>权威</strong> 域名服务器</li>
</ul>
</li>
</ul>
<p><strong>权威</strong></p>
<ul>
<li>域名对应的真实IP存储节点，由权威服务器选择返回域名对应的真实且最合适的IP</li>
</ul>
<p><strong>Q.域名劫持</strong></p>
<ul>
<li>并对终端用户的 Local DNS 进行篡改，指向伪造的 Local DNS ，返回错误的 IP 信息</li>
<li>监听用户的域名解析请求，伪造的 DNS 解析响应传递给用户</li>
<li><strong>DNS缓存污染</strong> ，Local DNS缓存数据被修改了</li>
</ul>
<p><strong>Q.精准调度</strong></p>
<ul>
<li>区域</li>
<li>运营商</li>
</ul>
<blockquote>
<p>除了解析转发对调度精准性带来的影响外，Local DNS的布署情况同样影响着域名智能解析的精准性。</p>
</blockquote>
<p><strong>Q.DNS解析服务耗时</strong></p>
<ul>
<li>DNS服务部署不合理导致的解析域名耗时</li>
</ul>
<p><strong>Q.权威服务数据更新滞后</strong></p>
<ul>
<li>域名IP变更，主要发生在权威服务上，同步到全网DNS缓存延迟严重</li>
</ul>
]]></content>
      <tags>
        <tag>dns</tag>
        <tag>缓存</tag>
        <tag>递归</tag>
        <tag>权威</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 使用gosu切换用户</title>
    <url>/2019/11/15/Docker-%E4%BD%BF%E7%94%A8gosu%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[
        <h1 id="容器启动时切换用户gosu执行脚本"   >
          <a href="#容器启动时切换用户gosu执行脚本" class="heading-link"><i class="fas fa-link"></i></a><a href="#容器启动时切换用户gosu执行脚本" class="headerlink" title="容器启动时切换用户gosu执行脚本"></a>容器启动时切换用户gosu执行脚本</h1>
      
        <h2 id="问题"   >
          <a href="#问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题" class="headerlink" title="问题"></a>问题</h2>
      <p>想在小组内部推一下代码检查工具Sonar，申请了容器空间用于部署。在自己本地编译镜像之后推送到公司镜像源之后，发现拉取后启动容器失败了：检查输出日志</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">java.lang.RuntimeException: don<span class="string">&#x27;t run elasticsearch as root.</span></span><br><span class="line"><span class="string">        at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:94)</span></span><br><span class="line"><span class="string">        at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:160)</span></span><br><span class="line"><span class="string">        at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:286)</span></span><br><span class="line"><span class="string">        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35)</span></span><br></pre></td></tr></table></div></figure>
<p>这就奇怪了，本地构建的镜像，运行都是正常的啊；难道公司容器服务启动的时候会强制以root账户运行？</p>

        <h2 id="排查"   >
          <a href="#排查" class="heading-link"><i class="fas fa-link"></i></a><a href="#排查" class="headerlink" title="排查"></a>排查</h2>
      <blockquote>
<p>本地构建镜像的时候修改 ENDPOINT 脚本 <code>run.sh</code> ；输出当前执行用户 whoami ;确实是  <code>root</code></p>
</blockquote>

        <h3 id="尝试1"   >
          <a href="#尝试1" class="heading-link"><i class="fas fa-link"></i></a><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h3>
      <figure class="highlight dockerfile"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前置切换用户</span></span><br><span class="line"><span class="keyword">USER</span> sonarqube</span><br><span class="line">ENDPOINT [<span class="string">&quot;run.sh&quot;</span>]</span><br><span class="line"><span class="comment"># 推送，部署还是报错 ES 无法使用 root 账户启动</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="尝试2"   >
          <a href="#尝试2" class="heading-link"><i class="fas fa-link"></i></a><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改ENDPOINT</span></span><br><span class="line"></span><br><span class="line">ENDPOINT su - sonarqube -s <span class="string">&quot;./run.sh&quot;</span></span><br><span class="line"><span class="comment"># 推送 部署还是错误： 环境变量，账户目录/home/sonarqube(本来就没创建账户目录)都找不到了</span></span><br><span class="line"> </span><br></pre></td></tr></table></div></figure>


        <h3 id="尝试3【√】"   >
          <a href="#尝试3【√】" class="heading-link"><i class="fas fa-link"></i></a><a href="#尝试3【√】" class="headerlink" title="尝试3【√】"></a>尝试3【√】</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改镜像 添加 gosu / su-exec (sonarqube 官方脚本有这个)</span></span><br><span class="line">RUN apt update &amp;&amp; apt install gosu -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时修改 run.sh 脚本</span></span><br><span class="line"><span class="built_in">exec</span> gosu sonarqube <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送&amp;启动，OK</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>es</tag>
        <tag>docker</tag>
        <tag>gosu</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK:Nginx日志记录</title>
    <url>/2019/11/15/ELK-Nginx%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[
        <h1 id="目的"   >
          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a href="#目的" class="headerlink" title="目的"></a>目的</h1>
      <ul>
<li>目的：需要统计推广带来的转化效果</li>
<li>思路：通过统计 Nginx 日志，来分析不同渠道带来的访问量的变化。（可能再通过新增用户比去计算下转化率，不确定是不是需要这个值）</li>
</ul>

        <h1 id="技术方案"   >
          <a href="#技术方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h1>
      <ul>
<li>修改 Nginx 日志格式为JSON ，通过 Qbus 收集 Nginx 的访问日志到消息队列。再使用 Logstash 同步到 ES 中；接着创建 Kibana 索引查询模板，筛选展示数据<ul>
<li>Qbus</li>
<li>Elasticsearch</li>
<li>Kibana</li>
<li>Logstash</li>
<li>Nginx 日志</li>
</ul>
</li>
</ul>
<span id="more"></span>

        <h2 id="修改-Nginx-日志格式"   >
          <a href="#修改-Nginx-日志格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改-Nginx-日志格式" class="headerlink" title="修改 Nginx 日志格式"></a>修改 Nginx 日志格式</h2>
      <blockquote>
<p>日志格式修改 是为了 Logstash 同步方便，可以自动创建索引 mapping 。 在Hulk 平台修改配置。</p>
</blockquote>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">log_format logstash &#39;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#39;</span><br><span class="line">               &#39;&quot;@version&quot;:&quot;1&quot;,&#39;</span><br><span class="line">               &#39;&quot;request_id&quot;:&quot;$request_id&quot;,&#39;</span><br><span class="line">               &#39;&quot;client&quot;:&quot;$remote_addr&quot;,&#39;</span><br><span class="line">               &#39;&quot;url&quot;:&quot;$uri&quot;,&#39;</span><br><span class="line">               &#39;&quot;status&quot;:&quot;$status&quot;,&#39;</span><br><span class="line">               &#39;&quot;domain&quot;:&quot;$host&quot;,&#39;</span><br><span class="line">               &#39;&quot;host&quot;:&quot;$server_addr&quot;,&#39;</span><br><span class="line">               &#39;&quot;server_name&quot;:&quot;$server_name&quot;,&#39;</span><br><span class="line">               &#39;&quot;request&quot;:&quot;$request&quot;,&#39;</span><br><span class="line">               &#39;&quot;request_length&quot;:&quot;$request_length&quot;,&#39;</span><br><span class="line">               &#39;&quot;http_x_forwarded_for&quot;:&quot;$http_x_forwarded_for&quot;,&#39;</span><br><span class="line">               &#39;&quot;http_x_real_ip&quot;:&quot;$http_x_real_ip&quot;,&#39;</span><br><span class="line">               &#39;&quot;size&quot;:$body_bytes_sent,&#39;</span><br><span class="line">               &#39;&quot;rsp_time&quot;:$request_time,&#39;</span><br><span class="line">               &#39;&quot;referer&quot;: &quot;$http_referer&quot;,&#39;</span><br><span class="line">               &#39;&quot;ua&quot;: &quot;$http_user_agent&quot;&#39;</span><br><span class="line">&#39;&#125;&#39;;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 日志内容</span><br><span class="line"></span><br><span class="line">  $request_length       请求长度（包括请求行，标题和请求正文）</span><br><span class="line">  $request_method       请求的动作（get或者post）</span><br><span class="line">  $request_time         请求时间(以毫秒为单位的请求处理时间（1.3.9,1.2.6）; 从客户端读取第一个字节后经过的时间)</span><br><span class="line">  $request_url          完整的原始请求URL（带参数）  </span><br><span class="line">  $scheme               返回用的协议，是http还是https</span><br><span class="line">  $remote_addr          客户端的地址</span><br><span class="line">  $remote_port          client port</span><br><span class="line">  $remote_user          基本认证的身份</span><br><span class="line">  $server_addr          服务端的地址</span><br><span class="line">  $server_port          server port</span><br><span class="line">  $server_protocol      使用的http的版本“HTTP&#x2F;1.0”, “HTTP&#x2F;1.1”, or “HTTP&#x2F;2.0”</span><br><span class="line">  $status               回应状态</span><br><span class="line">  $body_bytes_sent      给你主体发送的字节</span><br><span class="line">  $http_refrere         请求的上个页面来至于哪里</span><br><span class="line">  $http_x_forwarded_for 代理服务器的IP地址</span><br><span class="line">  $http_user_agent      浏览器的型号</span><br><span class="line">  $uri                  除去域名和协议的URL</span><br><span class="line"></span><br><span class="line">  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;upstream 模块所支持的变量&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">  $upstream_addr            处理请求的上游服务器的地址</span><br><span class="line">  $upstream_cache_status    表示是否命中缓存</span><br><span class="line">  $upstream_status          上游服务器的响应状态码</span><br><span class="line">  $upstream_response_time   上游服务器的响应时间，精度到毫秒</span><br><span class="line">  $upstream_http_$HEADER    HTTP的头部，如upstream_http_host</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>




        <h3 id="日志收集"   >
          <a href="#日志收集" class="heading-link"><i class="fas fa-link"></i></a><a href="#日志收集" class="headerlink" title="日志收集"></a>日志收集</h3>
      <blockquote>
<p>Qbus 日志收集服务：本质上还是使用 Logstash 收集 Nginx 日志文件，导入到 kafka</p>
</blockquote>
<ul>
<li>指定收集路径，日志量，保留期限</li>
<li>指定生产机</li>
<li>指定消费机</li>
</ul>

        <h3 id="日志同步到ES"   >
          <a href="#日志同步到ES" class="heading-link"><i class="fas fa-link"></i></a><a href="#日志同步到ES" class="headerlink" title="日志同步到ES"></a>日志同步到ES</h3>
      <blockquote>
<p>使用 Logstash 同步；kafka 做 Input , ES 做 Output;</p>
</blockquote>
<ul>
<li>logstash 2.4 -&gt; logstash 5.0 + ; 配置项有修改：<span class="exturl"><a class="exturl__link"   href="https://www.elastic.co/guide/en/logstash/5.2/plugins-inputs-kafka.html" >文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@p34108v baqianxin]# cat &#x2F;home&#x2F;logstash&#x2F;jiagu_nginx_log.conf </span><br><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        bootstrap_servers &#x3D;&gt; &quot;10.209.xxx.xxx:xxxxx&quot;</span><br><span class="line">        group_id &#x3D;&gt; &quot;jiagu_web_log_es&quot;</span><br><span class="line">        topics &#x3D;&gt; [&quot;jiagu-web-nginx&quot;]</span><br><span class="line">        codec &#x3D;&gt; json &#123;  charset &#x3D;&gt; &quot;GB2312&quot;&#125;</span><br><span class="line">        consumer_threads &#x3D;&gt; 6  # number (optional)， default: 1</span><br><span class="line">        decorate_events &#x3D;&gt; false # boolean (optional)， default: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">    mutate &#123;</span><br><span class="line">      convert &#x3D;&gt; [ &quot;status&quot;,&quot;integer&quot; ]</span><br><span class="line">      convert &#x3D;&gt; [ &quot;size&quot;,&quot;integer&quot; ]</span><br><span class="line">      convert &#x3D;&gt; [ &quot;rsp_time&quot;,&quot;float&quot;]</span><br><span class="line">      convert &#x3D;&gt; [ &quot;upstreatime&quot;,&quot;float&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if [client] !&#x3D; &quot;-&quot; &#123;</span><br><span class="line">        geoip &#123;</span><br><span class="line">            source &#x3D;&gt; &quot;client&quot;</span><br><span class="line">            target &#x3D;&gt; &quot;geoip&quot;</span><br><span class="line">            add_field &#x3D;&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][longitude]&#125;&quot; ]</span><br><span class="line">            add_field &#x3D;&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][latitude]&#125;&quot;  ]</span><br><span class="line">        &#125;</span><br><span class="line">        mutate &#123;</span><br><span class="line">            convert &#x3D;&gt; [ &quot;[geoip][coordinates]&quot;, &quot;float&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts &#x3D;&gt; [&quot;10.216.xxx.xxx:xxxxx&quot;]</span><br><span class="line">        index &#x3D;&gt; &quot;jiagu_nginx_log_%&#123;+YYYY.MM&#125;&quot;</span><br><span class="line">        document_type &#x3D;&gt; &quot;nginx_log&quot;</span><br><span class="line">        user &#x3D;&gt; &quot;pxxxmgdxxcxxxxx_w&quot;</span><br><span class="line">        password &#x3D;&gt; &quot;xxxxxxxxxxxx&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="Kibana-筛选展示"   >
          <a href="#Kibana-筛选展示" class="heading-link"><i class="fas fa-link"></i></a><a href="#Kibana-筛选展示" class="headerlink" title="Kibana 筛选展示"></a>Kibana 筛选展示</h3>
      <ul>
<li>按照来源IP 转换为坐标信息统计区域热力图</li>
<li>按照访问地址 统计访问量最大的接口或页面</li>
<li>按照每小时日志量来判断高峰期出现情况</li>
<li>…….</li>
</ul>
<blockquote>
<p>创建查询索引；具体使用查阅 (kibana 官方文档)[<span class="exturl"><a class="exturl__link"   href="https://www.elastic.co/guide/en/kibana/index.html]" >https://www.elastic.co/guide/en/kibana/index.html]</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>

        <h2 id="问题记录"   >
          <a href="#问题记录" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2>
      <p>问题1：input-kafka 配置项错误</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[baqianxin@p34108v ~]$ &#x2F;usr&#x2F;share&#x2F;logstash&#x2F;bin&#x2F;logstash -f ~&#x2F;jiagu_nginx_log.conf </span><br><span class="line">WARNING: Could not find logstash.yml which is typically located in $LS_HOME&#x2F;config or &#x2F;etc&#x2F;logstash. You can specify the path using --path.settings. Continuing using the defaults</span><br><span class="line">Could not find log4j2 configuration at path &#x2F;usr&#x2F;share&#x2F;logstash&#x2F;config&#x2F;log4j2.properties. Using default config which logs to console</span><br><span class="line">14:46:04.961 [main] FATAL logstash.runner - An unexpected error occurred! &#123;:error&#x3D;&gt;#&lt;ArgumentError:</span><br><span class="line"> Path &quot;&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;data&quot; must be a writable directory. </span><br><span class="line"> It is not writable.&gt;,</span><br><span class="line"> ....</span><br><span class="line"></span><br><span class="line">[logstash@p34108v baqianxin]$ &#x2F;usr&#x2F;share&#x2F;logstash&#x2F;bin&#x2F;logstash -f  &#x2F;home&#x2F;baqianxin&#x2F;jiagu_nginx_log.conf </span><br><span class="line">WARNING: Could not find logstash.yml which is typically located in $LS_HOME&#x2F;config or &#x2F;etc&#x2F;logstash. You can specify the path using --path.settings. Continuing using the defaults</span><br><span class="line">Could not find log4j2 configuration at path &#x2F;usr&#x2F;share&#x2F;logstash&#x2F;config&#x2F;log4j2.properties. Using default config which logs to console</span><br><span class="line">14:53:39.151 [LogStash::Runner] INFO  logstash.agent - No persistent UUID file found. Generating new UUID &#123;:uuid&#x3D;&gt;&quot;72c79b50-3410-4474-bd70-a4a5d003d95e&quot;, :path&#x3D;&gt;&quot;&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;data&#x2F;uuid&quot;&#125;</span><br><span class="line">14:53:39.264 [LogStash::Runner] INFO  logstash.agent - No config files found in path &#123;:path&#x3D;&gt;&quot;&#x2F;home&#x2F;baqianxin&#x2F;jiagu_nginx_log.conf&quot;&#125;</span><br><span class="line">14:53:39.269 [LogStash::Runner] ERROR logstash.agent - failed to fetch pipeline configuration &#123;:message&#x3D;&gt;&quot;No config files found: &#x2F;home&#x2F;baqianxin&#x2F;jiagu_nginx_log.conf. Can you make sure this path is a logstash config file?&quot;&#125;</span><br><span class="line"></span><br><span class="line">解决：logstash5.0升级之后配置项修改了</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>问题2：logstash 常见自定义索引模板，需要根据版本修改模板内容</p>
<figure class="highlight yaml"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;template&quot;</span> <span class="string">:</span> <span class="string">&quot;jiagu_nginx_log-*&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> <span class="string">:</span> <span class="number">50001</span>,</span><br><span class="line">  <span class="string">&quot;settings&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">    <span class="string">&quot;index.refresh_interval&quot;</span> <span class="string">:</span> <span class="string">&quot;5s&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">    <span class="string">&quot;_default_&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">      <span class="string">/*</span> <span class="string">***_all</span> <span class="string">再6.0被废弃***</span> <span class="string">*/</span></span><br><span class="line">      <span class="string">&quot;_all&quot;</span> <span class="string">:</span> &#123;<span class="string">&quot;enabled&quot;</span> <span class="string">:</span> <span class="literal">true</span>, <span class="string">&quot;norms&quot;</span> <span class="string">:</span> <span class="literal">false</span>&#125;,</span><br><span class="line">      <span class="string">&quot;dynamic_templates&quot;</span> <span class="string">:</span> [ &#123;</span><br><span class="line">        <span class="string">&quot;message_field&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">          <span class="string">&quot;path_match&quot;</span> <span class="string">:</span> <span class="string">&quot;message&quot;</span>,</span><br><span class="line">          <span class="string">&quot;match_mapping_type&quot;</span> <span class="string">:</span> <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="string">&quot;mapping&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span> <span class="string">:</span> <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="string">&quot;norms&quot;</span> <span class="string">:</span> <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="string">&quot;string_fields&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">          <span class="string">&quot;match&quot;</span> <span class="string">:</span> <span class="string">&quot;*&quot;</span>,</span><br><span class="line">          <span class="string">&quot;match_mapping_type&quot;</span> <span class="string">:</span> <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="string">&quot;mapping&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span> <span class="string">:</span> <span class="string">&quot;text&quot;</span>, <span class="string">&quot;norms&quot;</span> <span class="string">:</span> <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;fields&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">              <span class="string">&quot;keyword&quot;</span> <span class="string">:</span> &#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;keyword&quot;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; ],</span><br><span class="line">      <span class="string">&quot;properties&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">         <span class="string">/*</span> <span class="string">***include_in_all</span> <span class="string">再6.0被废弃***</span> <span class="string">*/</span></span><br><span class="line">        <span class="string">&quot;@timestamp&quot;</span><span class="string">:</span> &#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;date&quot;</span>, <span class="attr">&quot;include_in_all&quot;:</span> <span class="literal">false</span> &#125;,</span><br><span class="line">        <span class="string">&quot;@version&quot;</span><span class="string">:</span> &#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;keyword&quot;</span>, <span class="attr">&quot;include_in_all&quot;:</span> <span class="literal">false</span> &#125;,</span><br><span class="line">        <span class="string">&quot;geoip&quot;</span>  <span class="string">:</span> &#123;</span><br><span class="line">          <span class="attr">&quot;dynamic&quot;:</span> <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;properties&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">            <span class="attr">&quot;ip&quot;:</span> &#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;ip&quot;</span> &#125;,</span><br><span class="line">            <span class="string">&quot;location&quot;</span> <span class="string">:</span> &#123; <span class="string">&quot;type&quot;</span> <span class="string">:</span> <span class="string">&quot;geo_point&quot;</span> &#125;,</span><br><span class="line">            <span class="string">&quot;latitude&quot;</span> <span class="string">:</span> &#123; <span class="string">&quot;type&quot;</span> <span class="string">:</span> <span class="string">&quot;half_float&quot;</span> &#125;,</span><br><span class="line">            <span class="string">&quot;longitude&quot;</span> <span class="string">:</span> &#123; <span class="string">&quot;type&quot;</span> <span class="string">:</span> <span class="string">&quot;half_float&quot;</span> &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      <tags>
        <tag>es</tag>
        <tag>nginx</tag>
        <tag>log</tag>
        <tag>logstash</tag>
        <tag>kafka</tag>
        <tag>kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab CI/CD 集成 SonarQube 扫描服务</title>
    <url>/2019/06/15/Gitlab-CI-CD-%E9%9B%86%E6%88%90-SonarQube-%E6%89%AB%E6%8F%8F%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[
        <h1 id="Gitlab-CI-CD-集成-SonarQube-扫描服务"   >
          <a href="#Gitlab-CI-CD-集成-SonarQube-扫描服务" class="heading-link"><i class="fas fa-link"></i></a><a href="#Gitlab-CI-CD-集成-SonarQube-扫描服务" class="headerlink" title="Gitlab CI/CD 集成 SonarQube 扫描服务"></a>Gitlab CI/CD 集成 SonarQube 扫描服务</h1>
      <p>[TOC]</p>
<pre><code>环境：Docker

gitlab
gitlab-runner
sonarqube
postgresql</code></pre>
        <h2 id="使用示例"   >
          <a href="#使用示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2>
      <figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sonar-scanner</span></span><br><span class="line"><span class="attr">sonar:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">sonar-scanner</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar-scanner</span> </span><br><span class="line">      <span class="string">-Dsonar.projectKey=cd_demo</span> </span><br><span class="line">      <span class="string">-Dsonar.sources=.</span> </span><br><span class="line">      <span class="string">-Dsonar.host.url=http://10.18.27.80:9823</span> </span><br><span class="line">      <span class="string">-Dsonar.login=a138bc0d36c7130bb30aebbaffbc44148b6ab8e4</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">always</span></span><br></pre></td></tr></table></div></figure>




        <h2 id="Sonar-服务"   >
          <a href="#Sonar-服务" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sonar-服务" class="headerlink" title="Sonar 服务"></a>Sonar 服务</h2>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="http://note.youdao.com/noteshare?id=61644a0153db0c34075be66430fbe3c4" >SonarQube 代码检查服务部署</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>

        <h3 id="Sonar-集成-GitLab"   >
          <a href="#Sonar-集成-GitLab" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sonar-集成-GitLab" class="headerlink" title="Sonar 集成 GitLab"></a>Sonar 集成 GitLab</h3>
      <ul>
<li>admin 安装 git 插件 <code>Administration</code>-&gt;<code>marketpalce</code>-&gt; <code>search git</code>-&gt;<code>restart server</code></li>
<li><code>ALM Intergrations</code><br><img   src="https://note.youdao.com/yws/api/personal/file/E6645A1C4C6E47B78402FED13B5F369A?method=download&shareKey=814d1fda2ad408c56016122cef5c90fa" style=""  alt="sonar-gitlab"></li>
<li><code>Gitlab Application</code> <code>Token-Secret</code><br><img   src="https://note.youdao.com/yws/api/personal/file/4DE448654E9F41D7A1CC7AE6A8E375CF?method=download&shareKey=90a053673cc128ed3be7b9cf566b5bc6" style=""  alt="Gitlab Application T-S"></li>
</ul>

        <h2 id="Gitlab-runner-服务"   >
          <a href="#Gitlab-runner-服务" class="heading-link"><i class="fas fa-link"></i></a><a href="#Gitlab-runner-服务" class="headerlink" title="Gitlab-runner 服务"></a>Gitlab-runner 服务</h2>
      <ul>
<li>构建 <code>gitlab-runner</code> 镜像，集成 <code>node</code> ,<code>sonar-scanner</code></li>
<li>注册 <code>Runner</code> ：<ul>
<li><code>gitlab-runner</code> <code>register</code></li>
<li>输入 <code>gitlab-host</code></li>
<li>输入 <code>runner-token</code></li>
<li>输入 <code>tag</code></li>
<li>选择执行方式 <code>shell</code></li>
</ul>
</li>
<li>开启 <code>Runner</code> 不匹配 <code>tag</code> 执行,在 <code>CI/CD</code> -&gt; <code>runner</code> 的设置里</li>
</ul>
<p><img   src="https://note.youdao.com/yws/api/personal/file/B4C37DC2CA36420180D3CC8C00A1DC4D?method=download&shareKey=d17249b1446369fff0a6912c6f824eb7" style=""  alt="注册"></p>
<hr>

        <h3 id="Gitlab-runner-容器编排"   >
          <a href="#Gitlab-runner-容器编排" class="heading-link"><i class="fas fa-link"></i></a><a href="#Gitlab-runner-容器编排" class="headerlink" title="Gitlab-runner 容器编排"></a>Gitlab-runner 容器编排</h3>
      <pre><code>docker-compose.yml</code></pre><figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">runner:</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">&#x27;gitlab-runner&#x27;</span></span><br><span class="line">  <span class="attr">build:</span> <span class="string">../../server/gitlab-runner/</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;8093:8093&#x27;</span></span><br><span class="line">  <span class="comment"># volumes:</span></span><br><span class="line">  <span class="comment">#   - &#x27;$GITLAB_HOME/gitlab-runner/config:/etc/gitlab-runner&#x27;</span></span><br><span class="line">  <span class="comment">#   - &#x27;/var/run/docker.sock:/var/run/docker.sock&#x27;</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">&#x27;gitlab/gitlab-ee:latest&#x27;</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">hostname:</span> <span class="string">&#x27;gitlab.example.com&#x27;</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">external_url</span> <span class="string">&#x27;http://gitlab.example.com:8929&#x27;</span></span><br><span class="line">      <span class="string">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]</span> <span class="string">=</span> <span class="number">2224</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;8929:8929&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;2224:22&#x27;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;$GITLAB_HOME/config:/etc/gitlab&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<pre><code>gitlab-runner/Dockerfile</code></pre><figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">FROM gitlab&#x2F;gitlab-runner:latest</span><br><span class="line"></span><br><span class="line">LABEL MAINTAINER&#x3D;baqianxin@360.cn</span><br><span class="line"></span><br><span class="line">RUN export LANG&#x3D;en_US.UTF-8  &amp;&amp; export LANGUAGE&#x3D;en_US</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp;  apt-get  install -y  nodejs vim unzip </span><br><span class="line">RUN cd &#x2F;opt &amp;&amp; \ </span><br><span class="line">wget https:&#x2F;&#x2F;binaries.sonarsource.com&#x2F;Distribution&#x2F;sonar-scanner-cli&#x2F;sonar-scanner-cli-4.0.0.1744-linux.zip &amp;&amp; \</span><br><span class="line">unzip sonar-scanner-cli-4.0.0.1744-linux.zip &amp;&amp; \ </span><br><span class="line">mv sonar-scanner-4.0.0.1744-linux sonar-scanner</span><br><span class="line"></span><br><span class="line">RUN  ln -s &#x2F;opt&#x2F;sonar-scanner&#x2F;bin&#x2F;sonar-scanner &#x2F;usr&#x2F;bin&#x2F;sonar-scanner &amp;&amp; sonar-scanner -v</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="注意问题"   >
          <a href="#注意问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h3>
      <ul>
<li>系统语言需设置 LCALL LANGUAGE LANG=en_US.UTF-8</li>
</ul>
<pre><code>[submodule &quot;golang/example&quot;]
    active = true
    url = git@github.com:baqianxin/examples.git
[submodule &quot;spider/chineseocr_lite&quot;]
    url = git@github.com:baqianxin/chineseocr_lite.git
    active = true</code></pre>]]></content>
      <tags>
        <tag>ci/cd</tag>
        <tag>soanrqube</tag>
      </tags>
  </entry>
  <entry>
    <title>Go:Web接口实时限流</title>
    <url>/2019/09/15/Go-Web%E6%8E%A5%E5%8F%A3%E5%AE%9E%E6%97%B6%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[
        <h1 id="Golang-接口实时限流功能"   >
          <a href="#Golang-接口实时限流功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#Golang-接口实时限流功能" class="headerlink" title="Golang 接口实时限流功能"></a>Golang 接口实时限流功能</h1>
      
        <h2 id="实现需求"   >
          <a href="#实现需求" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现需求" class="headerlink" title="实现需求"></a>实现需求</h2>
      <p> 对于同一IP，同一APP包名的请求，每小时只允许100次</p>

        <h2 id="方案逻辑"   >
          <a href="#方案逻辑" class="heading-link"><i class="fas fa-link"></i></a><a href="#方案逻辑" class="headerlink" title="方案逻辑"></a>方案逻辑</h2>
      <p> 1.自定义限流中间件，对需要限流的接口做监听 </p>
<p> 2.使用指定参数生成唯一Key,记录请求频率</p>
<p> 3.若请求时间超过key的有效时间则重新计数（！是否触发惩罚操作，更新有效时间为2小时）</p>
<p> 4.复杂逻辑-结合业务数据限流-指定设备ID|指定…</p>

        <h3 id="代码"   >
          <a href="#代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码" class="headerlink" title="代码"></a>代码</h3>
      <span id="more"></span>

<figure class="highlight golang"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">mux.Use(middleware.LimitRate)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限流中间件</span></span><br><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/md5&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/garyburd/redigo/redis&quot;</span></span><br><span class="line">	<span class="string">&quot;jiagu-user-service/internal/captcha/common&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RequestLimitService <span class="keyword">struct</span> &#123;</span><br><span class="line">	Interval <span class="keyword">int</span></span><br><span class="line">	MaxCount <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置过期时间 设置频率数值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRequestLimitService</span><span class="params">(interval <span class="keyword">int</span>, maxCnt <span class="keyword">int</span>)</span> *<span class="title">RequestLimitService</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> common.IsDev() &#123;</span><br><span class="line">		interval = interval / <span class="number">10</span></span><br><span class="line">		maxCnt = maxCnt / <span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">	reqLimit := &amp;RequestLimitService&#123;</span><br><span class="line">		Interval: interval,</span><br><span class="line">		MaxCount: maxCnt,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> reqLimit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(reqLimit *RequestLimitService)</span> <span class="title">IsAvailable</span><span class="params">(r *http.Request)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="comment">// 获取必要的验证参数// IP  // pn  // path /api/v1/auth</span></span><br><span class="line">	_ = r.ParseForm()</span><br><span class="line">	ip := r.RemoteAddr</span><br><span class="line">	pn := r.Form.Get(<span class="string">&quot;pn&quot;</span>)</span><br><span class="line">	path := r.RequestURI</span><br><span class="line">	<span class="keyword">if</span> path == common.API_PATH_V1_AUTH &#123;</span><br><span class="line">		limitRateKey := Md5V(ip + pn)</span><br><span class="line">		c := reqLimit.GetLimitCountCache(common.REDIS_LIMIT_RATE_PREFIX + limitRateKey)</span><br><span class="line">		<span class="keyword">return</span> c &lt; reqLimit.MaxCount</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(reqLimit *RequestLimitService)</span> <span class="title">GetLimitCountCache</span><span class="params">(limitRateKeyCount <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	redisCw := RedisW.Get()</span><br><span class="line">	redisCr := RedisW.Get()</span><br><span class="line">	<span class="keyword">defer</span> redisCr.Close()</span><br><span class="line">	<span class="keyword">defer</span> redisCw.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> c = <span class="number">1</span></span><br><span class="line">	<span class="comment">//检查Key 存在与否</span></span><br><span class="line">	isKeyEx, err := redis.Bool(redisCr.Do(<span class="string">&quot;EXISTS&quot;</span>, limitRateKeyCount))</span><br><span class="line"></span><br><span class="line">	CheckErr(err, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> isKeyEx &#123;</span><br><span class="line">		_, _ = redisCw.Do(<span class="string">&quot;INCR&quot;</span>, limitRateKeyCount)</span><br><span class="line">		c, _ = redis.Int(redisCr.Do(<span class="string">&quot;GET&quot;</span>, limitRateKeyCount))</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		_, err = redisCw.Do(<span class="string">&quot;SET&quot;</span>, limitRateKeyCount, <span class="number">1</span>, <span class="string">&quot;EX&quot;</span>, reqLimit.Interval)</span><br><span class="line">		CheckErr(err, <span class="literal">false</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RequestLimit = NewRequestLimitService(common.REDIS_LIMIT_RATE_EXPIRE, common.API_LIMIT_RATE_NUM)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Md5V</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	h := md5.New()</span><br><span class="line">	h.Write([]<span class="keyword">byte</span>(str))</span><br><span class="line">	<span class="keyword">return</span> hex.EncodeToString(h.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LimitRate</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> RequestLimit.IsAvailable(r) &#123;</span><br><span class="line">			next.ServeHTTP(w, r)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			http.Error(w, http.StatusText(http.StatusTooManyRequests), http.StatusTooManyRequests)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


]]></content>
      <tags>
        <tag>Go</tag>
        <tag>API</tag>
        <tag>LimitRate</tag>
      </tags>
  </entry>
  <entry>
    <title>Go:Web服务日志记录</title>
    <url>/2019/09/15/Go-Web%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[
        <h1 id="GoWeb-服务日志管理"   >
          <a href="#GoWeb-服务日志管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#GoWeb-服务日志管理" class="headerlink" title="GoWeb 服务日志管理"></a>GoWeb 服务日志管理</h1>
      
        <h2 id="前情"   >
          <a href="#前情" class="heading-link"><i class="fas fa-link"></i></a><a href="#前情" class="headerlink" title="前情"></a>前情</h2>
      <p>最新使用 Go 语言开发了一个滑动验证码 SDK 的服务端，提供的接口都具备基础功能了，但是业务逻辑日志以及请求日志没有一个好的记录方式，而且使用的容器服务，每次发布都会刷新容器，文件类的日志都会丢失。因此查了一下常见的Go  Log 处理方式。发现 logrus  包使用的人不少，感觉也很好使用毕竟带 hook （带钩子的都是工具人…）</p>

        <h2 id="目的"   >
          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a href="#目的" class="headerlink" title="目的"></a>目的</h2>
      <ul>
<li>记录所有请求日志</li>
<li>记录业务逻辑关键信息</li>
<li>方便查询检索分析</li>
</ul>

        <h2 id="实现细节"   >
          <a href="#实现细节" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2>
      <ol>
<li>自定义日志服务中间件，</li>
<li>使用 ES 存储日志数据</li>
<li>过滤接口检查的调用日志</li>
<li>ES使用时间索引</li>
<li>handler路由使用中间件拦截记录请求日志Mux.Use(m-)</li>
<li>逻辑日志纪录使用全局Loges 对象</li>
</ol>

        <h3 id="Go项目-使用ES"   >
          <a href="#Go项目-使用ES" class="heading-link"><i class="fas fa-link"></i></a><a href="#Go项目-使用ES" class="headerlink" title="Go项目-使用ES"></a>Go项目-使用ES</h3>
      
        <h3 id="自定义日志收集中间件"   >
          <a href="#自定义日志收集中间件" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义日志收集中间件" class="headerlink" title="自定义日志收集中间件"></a>自定义日志收集中间件</h3>
      <blockquote>
<p> logrus    “github.com/sirupsen/logrus”</p>
</blockquote>
<span id="more"></span>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Loges = logrus.New()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	InitElasticForLog()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES日志中间件  用于收集请求日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AccessLogging</span><span class="params">(f http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		_ = r.ParseForm()</span><br><span class="line">		buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">		_, _ = buf.ReadFrom(r.Body)</span><br><span class="line">		logEntry := Loges.WithFields(logrus.Fields&#123;</span><br><span class="line">			<span class="string">&quot;host&quot;</span>:         r.Host,</span><br><span class="line">			<span class="string">&quot;ip&quot;</span>:           r.RemoteAddr,</span><br><span class="line">			<span class="string">&quot;method&quot;</span>:       r.Method,</span><br><span class="line">			<span class="string">&quot;path&quot;</span>:         r.RequestURI,</span><br><span class="line">			<span class="string">&quot;query&quot;</span>:        r.URL.RawQuery,</span><br><span class="line">			<span class="string">&quot;request&quot;</span>: buf.String(),</span><br><span class="line">		&#125;)</span><br><span class="line">		wc := &amp;ResponseWithRecorder&#123;</span><br><span class="line">			ResponseWriter: w,</span><br><span class="line">			statusCode:     http.StatusOK,</span><br><span class="line">			body:           bytes.Buffer&#123;&#125;,</span><br><span class="line">		&#125;</span><br><span class="line">		f.ServeHTTP(wc, r)</span><br><span class="line">		<span class="keyword">if</span> !IsUnlogHost(r.Host, r.RequestURI) &#123;</span><br><span class="line">			<span class="keyword">defer</span> logEntry.WithFields(logrus.Fields&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>:        wc.statusCode,</span><br><span class="line">				<span class="string">&quot;respone&quot;</span>: wc.body.String(),</span><br><span class="line">			&#125;).Info()</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


<blockquote>
<p>第三方包 elastic    “github.com/olivere/elastic”</p>
</blockquote>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line">client, err := elastic.NewClient(</span><br><span class="line"></span><br><span class="line">	elastic.SetURL(<span class="string">&quot;http://xx.xx.xx.xx:9029&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	elastic.SetBasicAuth(<span class="string">&quot;writerUser&quot;</span>, <span class="string">&quot;u_pwd&quot;</span>),</span><br><span class="line">	<span class="comment">// 其他配置项</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	Loges.Panic(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



        <h3 id="logrus-使用ES-hook"   >
          <a href="#logrus-使用ES-hook" class="heading-link"><i class="fas fa-link"></i></a><a href="#logrus-使用ES-hook" class="headerlink" title="logrus 使用ES-hook"></a>logrus 使用ES-hook</h3>
      <figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用时间索引</span></span><br><span class="line"><span class="comment">//&quot;2006-01-02 15:04:05&quot;</span></span><br><span class="line">t := time.Now()</span><br><span class="line">date := t.Format(<span class="string">&quot;200601&quot;</span>)</span><br><span class="line">hook, err := elogrus.NewElasticHook(client, GetHost(), logrus.DebugLevel, <span class="string">&quot;YOUR_SERVER_NAME_LOG_&quot;</span>+date)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	Loges.Panic(err)</span><br><span class="line">&#125;</span><br><span class="line">Loges.AddHook(hook)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="自定义响应数据格式"   >
          <a href="#自定义响应数据格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义响应数据格式" class="headerlink" title="自定义响应数据格式"></a>自定义响应数据格式</h3>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">type ResponseWithRecorder struct &#123;</span><br><span class="line">	http.ResponseWriter</span><br><span class="line">	statusCode int</span><br><span class="line">	body       bytes.Buffer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (rec *ResponseWithRecorder) WriteHeader(statusCode int) &#123;</span><br><span class="line">	rec.ResponseWriter.WriteHeader(statusCode)</span><br><span class="line">	rec.statusCode &#x3D; statusCode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (rec *ResponseWithRecorder) Write(d []byte) (n int, err error) &#123;</span><br><span class="line">	n, err &#x3D; rec.ResponseWriter.Write(d)</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	rec.body.Write(d)</span><br><span class="line"></span><br><span class="line">	return</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



        <h3 id="拦截服务检查的日志记录"   >
          <a href="#拦截服务检查的日志记录" class="heading-link"><i class="fas fa-link"></i></a><a href="#拦截服务检查的日志记录" class="headerlink" title="拦截服务检查的日志记录"></a>拦截服务检查的日志记录</h3>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">if !IsUnlogHost(r.Host, r.RequestURI) &#123;</span><br><span class="line">	defer logEntry.WithFields(logrus.Fields&#123;</span><br><span class="line">		&quot;status&quot;:        wc.statusCode,</span><br><span class="line">		&quot;respone&quot;: wc.body.String(),</span><br><span class="line">	&#125;).Info()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func IsUnlogHost(h string, url string) bool &#123;</span><br><span class="line">	if strings.Contains(h, &#96;lvscheck.xitong.xxx&#96;) &amp;&amp; url &#x3D;&#x3D; &quot;&#x2F;status&quot; &#123;</span><br><span class="line">		return true</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		return false</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="业务逻辑使用"   >
          <a href="#业务逻辑使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#业务逻辑使用" class="headerlink" title="业务逻辑使用"></a>业务逻辑使用</h3>
      <figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="效果"   >
          <a href="#效果" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果" class="headerlink" title="效果"></a>效果</h3>
      <p><img src="http:///asdasdasda.com" alt="Kibana"></p>

        <h2 id="注意"   >
          <a href="#注意" class="heading-link"><i class="fas fa-link"></i></a><a href="#注意" class="headerlink" title="注意"></a>注意</h2>
      <ul>
<li>在日志中间件获取请求Body时 可能导致接口服务无法正常接受提交参数的问题:可以在获取请求参数时预先使用 ParseForm() <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; middleware</span><br><span class="line"></span><br><span class="line">_ &#x3D; r.ParseForm()</span><br><span class="line">buf :&#x3D; new(bytes.Buffer)</span><br><span class="line">_, _ &#x3D; buf.ReadFrom(r.Body)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; API</span><br><span class="line">req.ParseForm()</span><br><span class="line">var paramsList &#x3D; []string&#123;&quot;appId&quot;, &quot;token&quot;.....&#125;</span><br><span class="line">e, reqData :&#x3D; GetParams(req.Form, paramsList, paramsList)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>go</tag>
        <tag>es</tag>
        <tag>log</tag>
        <tag>logrus</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang使用WebSocket+ChromeDP实现实时页面监控</title>
    <url>/2019/03/05/Golang%E4%BD%BF%E7%94%A8WebSocket-ChromeDP%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E9%A1%B5%E9%9D%A2%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[
        <h1 id="WebSocket-Chromedp实现页面实时监控"   >
          <a href="#WebSocket-Chromedp实现页面实时监控" class="heading-link"><i class="fas fa-link"></i></a><a href="#WebSocket-Chromedp实现页面实时监控" class="headerlink" title="WebSocket+Chromedp实现页面实时监控"></a>WebSocket+Chromedp实现页面实时监控</h1>
      
        <h2 id="出发点"   >
          <a href="#出发点" class="heading-link"><i class="fas fa-link"></i></a><a href="#出发点" class="headerlink" title="出发点"></a>出发点</h2>
      <ul>
<li><p>理解与应用 Golang 的 Gorouting</p>
</li>
<li><p>Channel 通道 <code>chan</code> </p>
</li>
<li><p>WebSocket </p>
</li>
<li><p>chromedp </p>
<blockquote>
<p>查看 socket 使用时,想到能否结合应用下 chan, 正好又看到chromedp 的文章.就思考能否通过 websocket + chan 实现 headless chrome 监控页面信息</p>
</blockquote>
<span id="more"></span>

        <h2 id="Socket"   >
          <a href="#Socket" class="heading-link"><i class="fas fa-link"></i></a><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2>
      <p>网络中的 Socket 并不是什么协议，而是为了使用 TCP，UDP 而抽象出来的一层 API，它是位于应用层和传输层之间的一个抽象层。Socket 是对 TCP/IP 的封装；<br>Golang 本身net 包 即可实现 Socket 服务 .</p>
</li>
</ul>

        <h2 id="WebSocket"   >
          <a href="#WebSocket" class="heading-link"><i class="fas fa-link"></i></a><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2>
      <p> WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议. 因为不了解WebSocket导致闹了个笑话所以列出来</p>
<ul>
<li>WebSocket 与 HTTP都是基于TCP/IP协议上的,可靠性传输协议,都是应用层协议.</li>
<li>WebSocket是双向通信协议，模拟Socket协议，可以双向发送或接受信息。HTTP是单向的。</li>
<li>WebSocket是需要握手进行建立连接的。<ul>
<li>1.浏览器、服务器建立TCP连接，三次握手。这是通信的基础，传输控制层，若失败后续都不执行。</li>
<li>2.TCP连接成功后，浏览器通过HTTP协议向服务器传送WebSocket支持的版本号等信息。（开始前的HTTP握手）</li>
<li>3.服务器收到客户端的握手请求后，同样采用HTTP协议回馈数据。</li>
<li>4.当收到了连接成功的消息后，通过TCP通道进行传输通信。</li>
</ul>
</li>
</ul>

        <h2 id="chromedp"   >
          <a href="#chromedp" class="heading-link"><i class="fas fa-link"></i></a><a href="#chromedp" class="headerlink" title="chromedp"></a>chromedp</h2>
      <p> 用于驱动 支持  Chrome DevTools Protocol 的浏览器</p>
<blockquote>
<p>Package chromedp is a faster, simpler way to drive browsers supporting the <code>Chrome DevTools Protocol</code>in Go without external dependencies (like Selenium or PhantomJS).</p>
</blockquote>
 <!--more-->


        <h3 id="Examples"   >
          <a href="#Examples" class="heading-link"><i class="fas fa-link"></i></a><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><span class="exturl"><a class="exturl__link"   href="https://github.com/chromedp/examples/tree/master/click2" >click2</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
<td>use a selector to click on an element</td>
</tr>
<tr>
<td><span class="exturl"><a class="exturl__link"   href="https://github.com/chromedp/examples/tree/master/click" >click</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
<td>use a selector to click on an element</td>
</tr>
<tr>
<td><span class="exturl"><a class="exturl__link"   href="https://github.com/chromedp/examples/tree/master/screenshot" >screenshot</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
<td>take a screenshot of a specific element and of the entire browser viewport</td>
</tr>
</tbody></table></div>

        <h2 id="功能逻辑"   >
          <a href="#功能逻辑" class="heading-link"><i class="fas fa-link"></i></a><a href="#功能逻辑" class="headerlink" title="功能逻辑"></a>功能逻辑</h2>
      <ul>
<li>main </li>
<li>go func GR1 开启浏览器<ul>
<li>GR1 常驻截屏,写入 全局 chan </li>
</ul>
</li>
<li>go func GR2 开启消息读取<ul>
<li>GR2 读取到消息后,压缩图片信息,</li>
<li>GR2 遍历当前所有WebSocket连接对象 发送图片数据(blob|base64) </li>
</ul>
</li>
<li>启动 WebSocket 服务,接受 客户端连接,插入到 全局 连接 Map 中<ul>
<li>接受客户端的点击事件,等比计算,映射到 chromedp 监控的页面中<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A--&gt;B</span><br></pre></td></tr></table></div></figure>


</li>
</ul>
</li>
</ul>

        <h2 id="实现代码"   >
          <a href="#实现代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2>
      
        <h3 id="Golang-Server"   >
          <a href="#Golang-Server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Golang-Server" class="headerlink" title="Golang Server"></a>Golang Server</h3>
       <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"> package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;context&quot;</span><br><span class="line">	&quot;encoding&#x2F;base64&quot;</span><br><span class="line">	&quot;flag&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;io&#x2F;ioutil&quot;</span><br><span class="line">	&quot;log&quot;</span><br><span class="line">	&quot;net&#x2F;http&quot;</span><br><span class="line">	&quot;time&quot;</span><br><span class="line"></span><br><span class="line">	&quot;github.com&#x2F;chromedp&#x2F;chromedp&quot;</span><br><span class="line">	&quot;github.com&#x2F;gorilla&#x2F;websocket&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var addr &#x3D; flag.String(&quot;addr&quot;, &quot;localhost:9999&quot;, &quot;http service address&quot;)</span><br><span class="line"></span><br><span class="line">var upgrader &#x3D; websocket.Upgrader&#123;&#125; &#x2F;&#x2F; use default options</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 用来记录所有的客户端连接</span><br><span class="line">var ConnMap map[string]*websocket.Conn</span><br><span class="line"></span><br><span class="line">var MAX_WATCH_TIME &#x3D; 500</span><br><span class="line"></span><br><span class="line">const DATE_TIME_FORMAT &#x3D; &quot;2006-01-02 15:04:05&quot;</span><br><span class="line">const DATE_FORMAT &#x3D; &quot;2006-01-02&quot;</span><br><span class="line">const DATE_FORMAT_NUM &#x3D; &quot;20060102&quot;</span><br><span class="line"></span><br><span class="line">var CH_SC &#x3D; make(chan []byte)</span><br><span class="line"></span><br><span class="line">func echo(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">	&#x2F;&#x2F; 允许跨域</span><br><span class="line">	upgrader.CheckOrigin &#x3D; func(r *http.Request) bool &#123; return true &#125;</span><br><span class="line">	c, err :&#x3D; upgrader.Upgrade(w, r, nil)</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		log.Print(&quot;upgrade:&quot;, err)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	defer c.Close()</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 新连接加入map</span><br><span class="line">	ConnMap[c.RemoteAddr().String()] &#x3D; c</span><br><span class="line"></span><br><span class="line">	for &#123;</span><br><span class="line">		mt, message, err :&#x3D; c.ReadMessage()</span><br><span class="line">		if err !&#x3D; nil &#123;</span><br><span class="line">			log.Println(&quot;read:&quot;, err)</span><br><span class="line">			break</span><br><span class="line">		&#125;</span><br><span class="line">		log.Printf(&quot;recv: %s&quot;, message)</span><br><span class="line">		err &#x3D; c.WriteMessage(mt, message)</span><br><span class="line">		if err !&#x3D; nil &#123;</span><br><span class="line">			log.Println(&quot;write:&quot;, err)</span><br><span class="line">			break</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	flag.Parse()</span><br><span class="line">	log.SetFlags(0)</span><br><span class="line">	begin :&#x3D; time.Now()</span><br><span class="line">	ConnMap &#x3D; make(map[string]*websocket.Conn)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 启动 chrome 并开启截屏进程</span><br><span class="line">	go func() &#123;</span><br><span class="line">		opts :&#x3D; append(chromedp.DefaultExecAllocatorOptions[:],</span><br><span class="line">			chromedp.Flag(&quot;headless&quot;, true),</span><br><span class="line">			chromedp.Flag(&quot;disable-gpu&quot;, false),</span><br><span class="line">			chromedp.Flag(&quot;enable-automation&quot;, false),</span><br><span class="line">			chromedp.Flag(&quot;disable-extensions&quot;, true),</span><br><span class="line">		)</span><br><span class="line"></span><br><span class="line">		allocCtx, cancel :&#x3D; chromedp.NewExecAllocator(context.Background(), opts...)</span><br><span class="line">		defer cancel()</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; create context</span><br><span class="line">		ctx, cancel :&#x3D; chromedp.NewContext(allocCtx, chromedp.WithLogf(log.Printf))</span><br><span class="line">		defer cancel()</span><br><span class="line"></span><br><span class="line">		urlstr :&#x3D; &#96;https:&#x2F;&#x2F;youku.com&#x2F;&#96;</span><br><span class="line">		&#x2F;&#x2F; 需要截图的元素，支持CSS selector以及XPath query</span><br><span class="line">		selector :&#x3D; &#96;#m_15319&#96; &#x2F;&#x2F;&#96;#m_2556&#96; &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">		if err :&#x3D; chromedp.Run(ctx,</span><br><span class="line">			&#x2F;&#x2F; emulate iPhone 7 landscape</span><br><span class="line">			&#x2F;&#x2F; chromedp.Emulate(device.IPhone7landscape),</span><br><span class="line">			chromedp.Navigate(urlstr),</span><br><span class="line">			chromedp.EmulateViewport(1200, 0, chromedp.EmulateScale(1)),</span><br><span class="line">		); err !&#x3D; nil &#123;</span><br><span class="line">			log.Fatal(err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		var buf []byte</span><br><span class="line">		for &#123;</span><br><span class="line">			buf &#x3D; []byte&#123;&#125;</span><br><span class="line">			if err :&#x3D; chromedp.Run(ctx, elementScreenshot(urlstr, selector, &amp;buf)); err !&#x3D; nil &#123;</span><br><span class="line">				log.Fatal(err)</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F; 发送到全局channel</span><br><span class="line">			CH_SC &lt;- buf</span><br><span class="line">			fmt.Println(int64(time.Since(begin).Seconds()), MAX_WATCH_TIME)</span><br><span class="line">			&#x2F;&#x2F; if int64(time.Since(begin).Seconds()) &gt; int64(MAX_WATCH_TIME) &#123;</span><br><span class="line">			&#x2F;&#x2F; 	return</span><br><span class="line">			&#x2F;&#x2F; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 启动发送消息通道</span><br><span class="line">	go func() &#123;</span><br><span class="line">		for &#123;</span><br><span class="line">			select &#123;</span><br><span class="line">			case task :&#x3D; &lt;-CH_SC:</span><br><span class="line">				&#x2F;&#x2F;task.Process()</span><br><span class="line">				fmt.Println(time.Now().Format(DATE_TIME_FORMAT))</span><br><span class="line">				sendPictureData(task)</span><br><span class="line">				&#x2F;&#x2F; 写入文件</span><br><span class="line">				if err :&#x3D; ioutil.WriteFile(&quot;youku_b.png&quot;, task, 0644); err !&#x3D; nil &#123;</span><br><span class="line">					log.Fatal(err)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	http.HandleFunc(&quot;&#x2F;echo&quot;, echo)</span><br><span class="line">	log.Fatal(http.ListenAndServe(*addr, nil))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 发送二进制图片数据</span><br><span class="line">func sendPictureData(picture []byte) &#123;</span><br><span class="line">	&#x2F;&#x2F; img, _ :&#x3D; png.Decode(bytes.NewReader(picture))</span><br><span class="line">	&#x2F;&#x2F; resizeImg :&#x3D; resize.Resize(hight, 0, img, resize.Lanczos3)</span><br><span class="line">	&#x2F;&#x2F;base64压缩</span><br><span class="line">	sourcestring :&#x3D; base64.StdEncoding.EncodeToString(picture)</span><br><span class="line">	&#x2F;&#x2F; err :&#x3D; c.WriteMessage(websocket.BinaryMessage, []byte(sourcestring))</span><br><span class="line">	for _, c :&#x3D; range ConnMap &#123;</span><br><span class="line">		err :&#x3D; c.WriteMessage(websocket.TextMessage, []byte(sourcestring))</span><br><span class="line">		if err !&#x3D; nil &#123;</span><br><span class="line">			log.Println(&quot;write:&quot;, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 截图方法</span><br><span class="line">func elementScreenshot(urlstr, sel string, res *[]byte) chromedp.Tasks &#123;</span><br><span class="line">	&#x2F;&#x2F; ssOpts :&#x3D; append()</span><br><span class="line">	return chromedp.Tasks&#123;</span><br><span class="line">		&#x2F;&#x2F; chromedp.Navigate(urlstr),</span><br><span class="line">		chromedp.WaitVisible(sel, chromedp.ByID),</span><br><span class="line">		&#x2F;&#x2F;chromedp.Sleep(time.Duration(3) * time.Second),</span><br><span class="line">		&#x2F;&#x2F; 执行截图</span><br><span class="line">		chromedp.Screenshot(sel, res, chromedp.NodeVisible, chromedp.ByID),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="JS-处理"   >
          <a href="#JS-处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#JS-处理" class="headerlink" title="JS 处理"></a>JS 处理</h3>
       <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"> function arrayBufferToBase64(buffer) &#123;</span><br><span class="line">    var binary &#x3D; &#39;&#39;;</span><br><span class="line">    var bytes &#x3D; new Uint8Array(buffer);</span><br><span class="line">    var len &#x3D; bytes.byteLength;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">        binary +&#x3D; String.fromCharCode(bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return window.btoa(binary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;**blob to dataURL**</span><br><span class="line">function blobToDataURL(blob, callback) &#123;</span><br><span class="line">    var a &#x3D; new FileReader();</span><br><span class="line">    a.onload &#x3D; function(e) &#123;</span><br><span class="line">        callback(e.target.result);</span><br><span class="line">    &#125;</span><br><span class="line">    a.readAsDataURL(blob);</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var canvas &#x3D; document.getElementById(&quot;animation_canvas&quot;);</span><br><span class="line">canvas.width &#x3D; 640;</span><br><span class="line">canvas.height &#x3D; 1030;</span><br><span class="line"></span><br><span class="line">var ctx &#x3D; canvas.getContext(&quot;2d&quot;);</span><br><span class="line">let ws &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;localhost:9999&#x2F;echo&quot;);</span><br><span class="line">var player &#x3D; document.getElementById(&#39;player&#39;);</span><br><span class="line">ctx.drawImage(player, 0, 0);</span><br><span class="line"></span><br><span class="line">ws.onopen &#x3D; function () &#123;</span><br><span class="line">    ws.send(JSON.stringify(&#123; message: &quot;hello server!&quot; &#125;))</span><br><span class="line">&#125;</span><br><span class="line">ws.onmessage &#x3D; function(evt) &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(evt.data,typeof(evt.data))</span><br><span class="line">    &#x2F;&#x2F; base64数据直接展示  </span><br><span class="line">    if(typeof(evt.data)&#x3D;&#x3D;&quot;string&quot;)&#123;</span><br><span class="line">        player.src&#x3D;&#39;data:image&#x2F;png;base64,&#39;+evt.data;</span><br><span class="line">        player.onload&#x3D;function()&#123;</span><br><span class="line">            canvas.width &#x3D; 1200;</span><br><span class="line">            canvas.height &#x3D; this.height;</span><br><span class="line">            ctx.clearRect(0,0,canvas.width,canvas.height);  </span><br><span class="line">            ctx.drawImage(this, 0, 0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 二进制数据转图片</span><br><span class="line">    &#x2F;&#x2F; result &#x3D; blobToDataURL(evt.data, function(dataurl) &#123;</span><br><span class="line">    &#x2F;&#x2F;     &#x2F;&#x2F; 截取 base64,</span><br><span class="line">    &#x2F;&#x2F;     var arr &#x3D; dataurl.split(&#39;,&#39;);</span><br><span class="line">    &#x2F;&#x2F;     var mime &#x3D; arr[0].match(&#x2F;:(.*?);&#x2F;)[1];</span><br><span class="line">    &#x2F;&#x2F;     var player &#x3D; document.getElementById(&#39;player&#39;);</span><br><span class="line">    &#x2F;&#x2F;     ctx.drawImage(player, 0, 0);</span><br><span class="line">    &#x2F;&#x2F;     var url&#x3D; arrayBufferToBase64(evt.data);</span><br><span class="line">    &#x2F;&#x2F;     player.src&#x3D;&#39;data:image&#x2F;png;base64,&#39;+arr[1];</span><br><span class="line">    &#x2F;&#x2F;     player.onload&#x3D;function()&#123;</span><br><span class="line">    &#x2F;&#x2F;         canvas.width &#x3D; 1200;</span><br><span class="line">    &#x2F;&#x2F;         canvas.height &#x3D; this.height;</span><br><span class="line">    &#x2F;&#x2F;         ctx.clearRect(0,0,canvas.width,canvas.height);  </span><br><span class="line">    &#x2F;&#x2F;         ctx.drawImage(this, 0, 0);</span><br><span class="line">    &#x2F;&#x2F;     &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &#125;);</span><br><span class="line">&#125;</span><br><span class="line">ws.onerror &#x3D; function (event) &#123;</span><br><span class="line">    console.debug(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      <tags>
        <tag>go</tag>
        <tag>WebSocket</tag>
        <tag>chromedp</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux:SSH 隧道功能</title>
    <url>/2018/09/15/Linux-SSH-%E9%9A%A7%E9%81%93%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 检查代理服务器是否可以转发</span><br><span class="line">&#x2F;&#x2F; sshd 服务配置</span><br><span class="line">cat &#x2F;etc&#x2F;ssh&#x2F;sshd_config | grep AllowTcp</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 系统转发规则</span><br><span class="line">cat &#x2F;etc&#x2F;sysctl.conf | grep ip_forward</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改配置文件 修改</span><br><span class="line">sysctl -w net.ipv4.ip_forward&#x3D;1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 检查运行时配置</span><br><span class="line">cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 退出 重新连接</span><br><span class="line">ssh -L 8080:127.0.0.1:8080 root@121.xxxx.xxx.xxx</span><br><span class="line"></span><br><span class="line">本地端口：目标机器：端口</span><br></pre></td></tr></table></div></figure>]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>SSH 隧道</tag>
      </tags>
  </entry>
  <entry>
    <title>Python抓取页面数据分词统计展示</title>
    <url>/2019/06/18/Python%E6%8A%93%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE%E5%88%86%E8%AF%8D%E7%BB%9F%E8%AE%A1%E5%B1%95%E7%A4%BA/</url>
    <content><![CDATA[
        <h1 id="Python抓取京东评论数据生成词云"   >
          <a href="#Python抓取京东评论数据生成词云" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python抓取京东评论数据生成词云" class="headerlink" title="Python抓取京东评论数据生成词云"></a>Python抓取京东评论数据生成词云</h1>
      <blockquote>
<p>前提:想抓取商品评论分析关键词出现频率</p>
</blockquote>
<p><img   src="https://note.youdao.com/yws/api/personal/file/94251ED148A448729CFCFE6434C6EADF?method=download&shareKey=03ff9d0b39c0895dd71e91f6ecfe6c22" style=""  alt="aaa"></p>

        <h2 id="实现方案"   >
          <a href="#实现方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2>
      <ul>
<li>打开京东SKU详情页面，查看评论，下一页（XHR 请求）找到评论数据接口</li>
<li>使用到的Python 组件：<ul>
<li>requests,</li>
<li>jieba,</li>
<li>numpy,</li>
<li>pandas,</li>
<li>matplotlib,</li>
<li>PIL(Pillow)</li>
</ul>
</li>
</ul>

        <h2 id="细节步骤"   >
          <a href="#细节步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#细节步骤" class="headerlink" title="细节步骤"></a>细节步骤</h2>
      <ul>
<li>评论接口地址拼接</li>
<li>返回数据为JSONP，字符串截取一下（可以自定义callback参数）</li>
<li>切分词</li>
<li>停用词</li>
<li>词组统计：wordData……agg(total=’count’)</li>
<li>数据保存：可以使用其他逻辑存档入数据库</li>
<li>词云图片生成、展示</li>
</ul>

        <h2 id="小问题"   >
          <a href="#小问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2>
      <ul>
<li>请求数据接口频率额需要控制 不要急不要慌</li>
<li>文本读取的格式：GBK </li>
<li><code>wordData......agg(</code><strong>total=’count’</strong><code>)</code></li>
<li>词云图生成设置的字体：挑个系统自带的 | 或者Copy你的字体文件到系统字体目录下<ul>
<li>Win：simsun.ttc  </li>
<li>Mac:<code>[ ~ | /System]/Libray/Fonts</code></li>
</ul>
</li>
</ul>

        <h2 id="完整代码"   >
          <a href="#完整代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2>
      <figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 数据爬取模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments</span>():</span></span><br><span class="line">    all_comments = <span class="string">&quot;&quot;</span></span><br><span class="line">    fetchJSON_comment = <span class="string">&quot;fetchJSON_comment9&quot;</span></span><br><span class="line">    skuID =  <span class="string">&quot;1109759&quot;</span> <span class="comment"># &quot;4093841&quot; # &quot;100004549676&quot;  #</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        url2 = <span class="built_in">str</span>(i)</span><br><span class="line">        url1c = <span class="string">&#x27;https://club.jd.com/comment/productPageComments.action?callback=&#x27;</span> + \</span><br><span class="line">            fetchJSON_comment+url2+<span class="string">&#x27;&amp;productId=&#x27;</span>+skuID+<span class="string">&#x27;&amp;score=0&amp;sortType=5&amp;page=&#x27;</span></span><br><span class="line">        url3c = <span class="string">&#x27;&amp;pageSize=10&amp;isShadowSku=0&amp;rid=0&amp;fold=1&#x27;</span></span><br><span class="line"></span><br><span class="line">        finalurlc = url1c+url2+url3c</span><br><span class="line">        xba = requests.get(finalurlc)</span><br><span class="line">        <span class="comment"># fetchJSON_comment(</span></span><br><span class="line">        print(finalurlc, xba.text[<span class="number">0</span>:<span class="built_in">len</span>(fetchJSON_comment+url2)+<span class="number">1</span>])</span><br><span class="line">        data = json.loads(xba.text[<span class="built_in">len</span>(fetchJSON_comment+url2)+<span class="number">1</span>:-<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> data[<span class="string">&#x27;comments&#x27;</span>]:</span><br><span class="line">            content = j[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">            all_comments = all_comments+content</span><br><span class="line">        print(i, xba.text[<span class="number">0</span>:<span class="number">20</span>])</span><br><span class="line">    <span class="keyword">return</span> all_comments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据清洗处理模块</span></span><br><span class="line"></span><br><span class="line">xt=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_clear</span>(<span class="params">xt</span>):</span></span><br><span class="line">    xt = get_comments()</span><br><span class="line">    sys.exit(xt)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[\u4e00-\u9fa5]+&#x27;</span>)</span><br><span class="line">    filedata = re.findall(pattern, xt)</span><br><span class="line">    xx = <span class="string">&#x27;&#x27;</span>.join(filedata)</span><br><span class="line">    clear = jieba.lcut(xx)   <span class="comment"># 切分词</span></span><br><span class="line">    cleared = pd.DataFrame(&#123;<span class="string">&#x27;keywords&#x27;</span>: clear&#125;)</span><br><span class="line">    stopwords = pd.read_csv(<span class="string">&quot;chineseStopWords.txt&quot;</span>, index_col=<span class="literal">False</span>,</span><br><span class="line">                            quoting=<span class="number">3</span>, sep=<span class="string">&quot;\t&quot;</span>, names=[<span class="string">&#x27;stopword&#x27;</span>], encoding=<span class="string">&#x27;GBK&#x27;</span>)</span><br><span class="line">    cleared = cleared[~cleared.keywords.isin(stopwords.stopword)]</span><br><span class="line">    <span class="comment"># count_words = cleared.groupby(by=[&#x27;clear&#x27;])[&#x27;clear&#x27;].agg(&#123;&quot;num&quot;: numpy.size&#125;)</span></span><br><span class="line">    count_words = cleared.groupby(<span class="string">&#x27;keywords&#x27;</span>)[<span class="string">&#x27;keywords&#x27;</span>].agg(total=<span class="string">&#x27;count&#x27;</span>)</span><br><span class="line">    count_words = count_words.reset_index().sort_values(</span><br><span class="line">        by=[<span class="string">&quot;total&quot;</span>], ascending=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># df = pd.DataFrame(count_words)</span></span><br><span class="line">    <span class="comment"># if os.path.exists(&quot;count_words.csv&quot;):</span></span><br><span class="line">    <span class="comment">#     os.remove(&#x27;count_words.csv&#x27;)</span></span><br><span class="line">    <span class="comment"># df.to_csv(&#x27;count_words.csv&#x27;, encoding=&#x27;GBK&#x27;)</span></span><br><span class="line">    xt = count_words</span><br><span class="line">    <span class="keyword">return</span> count_words</span><br><span class="line"></span><br><span class="line"><span class="comment"># 词云展示模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_wordclound</span>():</span></span><br><span class="line">    <span class="comment"># d = path.dirname(__file__)</span></span><br><span class="line">    <span class="comment"># msk = np.array(Image.open(path.join(d, &quot;151.jpg&quot;)))</span></span><br><span class="line">    word_frequence = &#123;x[<span class="number">0</span>]: x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> data_clear(xt).head(<span class="number">200</span>).values&#125;</span><br><span class="line">    wordcloud = WordCloud(font_path=<span class="string">&quot;simsun.ttc&quot;</span>, <span class="comment"># mask=msk,</span></span><br><span class="line">                          background_color=<span class="string">&quot;#EEEEEE&quot;</span>, max_font_size=<span class="number">250</span>, width=<span class="number">2100</span>, height=<span class="number">1200</span>)</span><br><span class="line">    wordcloud = wordcloud.fit_words(word_frequence)</span><br><span class="line">    plt.imshow(wordcloud)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    make_wordclound()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>requests</tag>
        <tag>jieba</tag>
        <tag>numpy</tag>
        <tag>pandas</tag>
        <tag>matplotlib</tag>
        <tag>PIL</tag>
        <tag>Pillow</tag>
      </tags>
  </entry>
  <entry>
    <title>Sonar代码检查服务部署</title>
    <url>/2019/06/15/Sonar%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[
        <h2 id="SonarQube代码检查服务部署"   >
          <a href="#SonarQube代码检查服务部署" class="heading-link"><i class="fas fa-link"></i></a><a href="#SonarQube代码检查服务部署" class="headerlink" title="SonarQube代码检查服务部署"></a>SonarQube代码检查服务部署</h2>
      <blockquote>
<p>前言： 小组内的代码检查服务<br>部署： Docker</p>
</blockquote>
<p>[TOC]</p>

        <h2 id="服务构成"   >
          <a href="#服务构成" class="heading-link"><i class="fas fa-link"></i></a><a href="#服务构成" class="headerlink" title="服务构成"></a>服务构成</h2>
      <ul>
<li>PostgreSQL</li>
<li>SonarQube</li>
</ul>

        <h2 id="镜像"   >
          <a href="#镜像" class="heading-link"><i class="fas fa-link"></i></a><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2>
      <span id="more"></span>

        <h3 id="SonarQube"   >
          <a href="#SonarQube" class="heading-link"><i class="fas fa-link"></i></a><a href="#SonarQube" class="headerlink" title="SonarQube"></a>SonarQube</h3>
      <figure class="highlight dockerfile"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> sonarqube:<span class="number">8.2</span>-community</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> run.sh /opt/sonarqube/bin/</span></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt install -y gosu</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> sonarqube</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/opt/sonarqube/bin/run.sh&quot;</span>]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># run.sh</span></span><br><span class="line">        .</span><br><span class="line">        <span class="comment"># map legacy env variables</span></span><br><span class="line">        set_prop_from_env_var <span class="string">&quot;sonar.jdbc.username&quot;</span> <span class="string">&quot;$&#123;SONARQUBE_JDBC_USERNAME:-&#125;&quot;</span></span><br><span class="line">        set_prop_from_env_var <span class="string">&quot;sonar.jdbc.password&quot;</span> <span class="string">&quot;$&#123;SONARQUBE_JDBC_PASSWORD:-&#125;&quot;</span></span><br><span class="line">        set_prop_from_env_var <span class="string">&quot;sonar.jdbc.url&quot;</span> <span class="string">&quot;$&#123;SONARQUBE_JDBC_URL:-&#125;&quot;</span></span><br><span class="line">        set_prop_from_env_var <span class="string">&quot;sonar.web.javaAdditionalOpts&quot;</span> <span class="string">&quot;$&#123;SONARQUBE_WEB_JVM_OPTS:-&#125;&quot;</span></span><br><span class="line">        </span><br><span class="line">        exec gosu sonarqube java -jar <span class="string">&quot;lib/sonar-application-$SONAR_VERSION.jar&quot;</span> \</span><br><span class="line">          -Dsonar.log.console=true \</span><br><span class="line">          <span class="string">&quot;$&#123;sq_opts[@]&#125;&quot;</span> \</span><br><span class="line">          <span class="string">&quot;$@&quot;</span></span><br></pre></td></tr></table></div></figure>

        <h3 id="PostgreSQL"   >
          <a href="#PostgreSQL" class="heading-link"><i class="fas fa-link"></i></a><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3>
      <figure class="highlight dockerfile"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> postgres:latest</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> postgres.log /opt/</span></span><br><span class="line"><span class="comment"># POSTGRESQL使用最新镜像</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="推送到私有仓库，远端部署"   >
          <a href="#推送到私有仓库，远端部署" class="heading-link"><i class="fas fa-link"></i></a><a href="#推送到私有仓库，远端部署" class="headerlink" title="推送到私有仓库，远端部署"></a>推送到私有仓库，远端部署</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">starkctl push -u xxx -p xxx r.addops.xxx.cn/namespace/imagename:tag</span><br></pre></td></tr></table></div></figure>


        <h3 id="其他"   >
          <a href="#其他" class="heading-link"><i class="fas fa-link"></i></a><a href="#其他" class="headerlink" title="其他"></a>其他</h3>
      <figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地服务Docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mydb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5433:5432&quot;</span></span><br><span class="line">  <span class="attr">sonarqube:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonarqube</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">sonar.jdbc.username:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">sonar.jdbc.password:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">sonar.jdbc.url:</span> <span class="string">jdbc:postgresql://mydb:5432/sonar</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9823:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.sonar:/home/sonarqube/.sonar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./scaner:/opt/sonarqube/scanner</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="问题"   >
          <a href="#问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题" class="headerlink" title="问题"></a>问题</h3>
      <blockquote>
<p>启动容器的时候会启动内置的 ES 服务，这里要求不能使用 root 账户运行,需要用到 gosu 或 su-exec 容器内切换用户执行脚本</p>
</blockquote>

        <h3 id="相关连接"   >
          <a href="#相关连接" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h3>
      <p># <span class="exturl"><a class="exturl__link"   href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices" >https://docs.docker.com/develop/develop-images/dockerfile_best-practices</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> <br/><br># <span class="exturl"><a class="exturl__link"   href="https://github.com/SonarSource/docker-sonarqube" >https://github.com/SonarSource/docker-sonarqube</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <tags>
        <tag>ci/cd</tag>
        <tag>sonar</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow:鸢尾花品种分析demo</title>
    <url>/2019/09/15/TensorFlow-%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%93%81%E7%A7%8D%E5%88%86%E6%9E%90demo/</url>
    <content><![CDATA[
        <h2 id="运行效果"   >
          <a href="#运行效果" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2>
      <p><img src="https://note.youdao.com/yws/public/resource/1f52c84118d87ca95bb96cf11951ce88/xmlnote/DEE9C090352A4BBF8281CA269958696D/8343" alt=""></p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">root@433ad0b9b2e7:&#x2F;usr&#x2F;src&#x2F;app# python train2.py </span><br><span class="line">Loss test: 1.3583741188049316</span><br><span class="line">Step: 0, Initial Loss: 1.3583741188049316</span><br><span class="line">Step: 1,         Loss: 1.2449184656143188</span><br><span class="line">Epoch 000: Loss: 1.061, Accuracy: 46.667%</span><br><span class="line">Epoch 050: Loss: 0.418, Accuracy: 82.500%</span><br><span class="line">Epoch 100: Loss: 0.307, Accuracy: 94.167%</span><br><span class="line">Epoch 150: Loss: 0.221, Accuracy: 97.500%</span><br><span class="line">Epoch 200: Loss: 0.162, Accuracy: 96.667%</span><br><span class="line">Test set accuracy: 96.667%</span><br><span class="line">root@433ad0b9b2e7:&#x2F;usr&#x2F;src&#x2F;app# </span><br><span class="line">root@433ad0b9b2e7:&#x2F;usr&#x2F;src&#x2F;app# python train2_test.py </span><br><span class="line">Example 0 prediction: Iris setosa (98.3%)</span><br><span class="line">Example 1 prediction: Iris versicolor (82.5%)</span><br><span class="line">Example 2 prediction: Iris virginica (75.2%)</span><br><span class="line">root@433ad0b9b2e7:&#x2F;usr&#x2F;src&#x2F;app# </span><br></pre></td></tr></table></div></figure>


        <h2 id="运行环境"   >
          <a href="#运行环境" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2>
      <ul>
<li>Python:3.7.4</li>
<li>TensorFlow:1.14.0</li>
<li>Matplotlib</li>
<li>数据来源：<ul>
<li>训练  <span class="exturl"><a class="exturl__link"   href="http://download.tensorflow.org/data/iris_training.csv" >http://download.tensorflow.org/data/iris_training.csv</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>测试  <span class="exturl"><a class="exturl__link"   href="http://download.tensorflow.org/data/iris_test.csv" >http://download.tensorflow.org/data/iris_test.csv</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>检测  <code>自定义</code></li>
</ul>
</li>
</ul>

        <h2 id="实现步骤"   >
          <a href="#实现步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2>
      <span id="more"></span>


        <h3 id="创建模型"   >
          <a href="#创建模型" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3>
      <figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow.contrib.eager <span class="keyword">as</span> tfe</span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">tf.compat.v1.enable_eager_execution()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;TensorFlow version: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(tf.version.VERSION))</span><br><span class="line">print(<span class="string">&quot;Eager execution: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(tf.executing_eagerly()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">用于训练生成鸢尾花iris识别模型</span></span><br><span class="line"><span class="string">@训练图表：./data/images/iris_*.png</span></span><br><span class="line"><span class="string">@模型文件：./data/model/iris-model</span></span><br><span class="line"><span class="string">@使用环境：</span></span><br><span class="line"><span class="string">    Python: 3.7.4</span></span><br><span class="line"><span class="string">    TensorFlow version: 1.14.0</span></span><br><span class="line"><span class="string">    Eager execution: True</span></span><br><span class="line"><span class="string">@作者：baqianxin@163.com</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 创建model</span></span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=tf.nn.relu, input_shape=(<span class="number">4</span>,)), </span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=tf.nn.relu),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">3</span>)</span><br><span class="line">])</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

        <h3 id="加载数据"   >
          <a href="#加载数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3>
      <blockquote>
<p>加载的远端CSV数据，使用tf.data.experimental.make_csv_dataset转化为Dataset</p>
</blockquote>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">train_dataset_url = <span class="string">&quot;http://download.tensorflow.org/data/iris_training.csv&quot;</span></span><br><span class="line"></span><br><span class="line">train_dataset_fp = tf.keras.utils.get_file(fname=os.path.basename(train_dataset_url),</span><br><span class="line">                                           origin=train_dataset_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;Local copy of the dataset file: &#123;&#125;&quot;.format(train_dataset_fp))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># column order in CSV file</span></span><br><span class="line">column_names = [<span class="string">&#x27;sepal_length&#x27;</span>, <span class="string">&#x27;sepal_width&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;petal_length&#x27;</span>, <span class="string">&#x27;petal_width&#x27;</span>, <span class="string">&#x27;species&#x27;</span>]</span><br><span class="line"></span><br><span class="line">feature_names = column_names[:-<span class="number">1</span>]</span><br><span class="line">label_name = column_names[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;Features: &#123;&#125;&quot;.format(feature_names))</span></span><br><span class="line"><span class="comment"># print(&quot;Label: &#123;&#125;&quot;.format(label_name))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义标签</span></span><br><span class="line">class_names = [<span class="string">&#x27;Iris setosa&#x27;</span>, <span class="string">&#x27;Iris versicolor&#x27;</span>, <span class="string">&#x27;Iris virginica&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 tf.data.Dataset</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">train_dataset = tf.data.experimental.make_csv_dataset(</span><br><span class="line">    train_dataset_fp,</span><br><span class="line">    batch_size,</span><br><span class="line">    column_names=column_names,</span><br><span class="line">    label_name=label_name,</span><br><span class="line">    num_epochs=<span class="number">1</span>)</span><br></pre></td></tr></table></div></figure>


        <h3 id="定义损失和梯度函数"   >
          <a href="#定义损失和梯度函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义损失和梯度函数" class="headerlink" title="定义损失和梯度函数"></a>定义损失和梯度函数</h3>
      <figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.定义损失 和梯度函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span>(<span class="params">model, x, y</span>):</span></span><br><span class="line">    y_ = model(x)</span><br><span class="line">    <span class="keyword">return</span> tf.compat.v1.losses.sparse_softmax_cross_entropy(labels=y, logits=y_)</span><br><span class="line"></span><br><span class="line">l = loss(model, features, labels)</span><br><span class="line">print(<span class="string">&quot;Loss test: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(l))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.定义用于优化模型的梯度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grad</span>(<span class="params">model, inputs, targets</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        loss_value = loss(model, inputs, targets)</span><br><span class="line">    <span class="keyword">return</span> loss_value, tape.gradient(loss_value, model.trainable_variables)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="设置优化器，计数器"   >
          <a href="#设置优化器，计数器" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置优化器，计数器" class="headerlink" title="设置优化器，计数器"></a>设置优化器，计数器</h3>
      <figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置优化器，计数器</span></span><br><span class="line">optimizer = tf.compat.v1.train.GradientDescentOptimizer(learning_rate=<span class="number">0.01</span>)</span><br></pre></td></tr></table></div></figure>


        <h3 id="自定义训练"   >
          <a href="#自定义训练" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义训练" class="headerlink" title="自定义训练"></a>自定义训练</h3>
      <figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">train_loss_results = []</span><br><span class="line">train_accuracy_results = []</span><br><span class="line"></span><br><span class="line">num_epochs = <span class="number">201</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    epoch_loss_avg = tfe.metrics.Mean()</span><br><span class="line">    epoch_accuracy = tfe.metrics.Accuracy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Training loop - using batches of 32</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> train_dataset:</span><br><span class="line">        <span class="comment"># Optimize the model</span></span><br><span class="line">        loss_value, grads = grad(model, x, y)</span><br><span class="line">        optimizer.apply_gradients(<span class="built_in">zip</span>(grads, model.variables),</span><br><span class="line">                                  global_step)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Track progress</span></span><br><span class="line">        epoch_loss_avg(loss_value)  <span class="comment"># add current batch loss</span></span><br><span class="line">        <span class="comment"># compare predicted label to actual label</span></span><br><span class="line">        epoch_accuracy(tf.argmax(model(x), axis=<span class="number">1</span>, output_type=tf.int32), y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># end epoch</span></span><br><span class="line">    train_loss_results.append(epoch_loss_avg.result())</span><br><span class="line">    train_accuracy_results.append(epoch_accuracy.result())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epoch % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&quot;Epoch &#123;:03d&#125;: Loss: &#123;:.3f&#125;, Accuracy: &#123;:.3%&#125;&quot;</span>.<span class="built_in">format</span>(epoch,</span><br><span class="line">                                                                    epoch_loss_avg.result(),</span><br><span class="line">                                                                    epoch_accuracy.result()))</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="记录"   >
          <a href="#记录" class="heading-link"><i class="fas fa-link"></i></a><a href="#记录" class="headerlink" title="记录"></a>记录</h3>
      <blockquote>
<p>把训练过程中的损失与正确率都记录到<code>train_loss_results</code>,<code>train_accuracy_results</code>数组中了，在通过pyplot输出到可视化图表文件</p>
</blockquote>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, sharex=<span class="literal">True</span>, figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">fig.suptitle(<span class="string">&#x27;Training Metrics&#x27;</span>)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>].set_ylabel(<span class="string">&quot;Loss&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">axes[<span class="number">0</span>].plot(train_loss_results)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">1</span>].set_ylabel(<span class="string">&quot;Accuracy&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_xlabel(<span class="string">&quot;Epoch&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">axes[<span class="number">1</span>].plot(train_accuracy_results)</span><br><span class="line">plt.savefig(<span class="string">&quot;./data/images/iris_loss.png&quot;</span>)</span><br></pre></td></tr></table></div></figure>


        <h3 id="获取测试数据并检测"   >
          <a href="#获取测试数据并检测" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取测试数据并检测" class="headerlink" title="获取测试数据并检测"></a>获取测试数据并检测</h3>
      <figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取检测数据</span></span><br><span class="line">test_url = <span class="string">&quot;http://download.tensorflow.org/data/iris_test.csv&quot;</span></span><br><span class="line"></span><br><span class="line">test_fp = tf.keras.utils.get_file(fname=os.path.basename(test_url),</span><br><span class="line">                                  origin=test_url)</span><br><span class="line"></span><br><span class="line">test_dataset = tf.data.experimental.make_csv_dataset(</span><br><span class="line">    test_fp,</span><br><span class="line">    batch_size,</span><br><span class="line">    column_names=column_names,</span><br><span class="line">    label_name=<span class="string">&#x27;species&#x27;</span>,</span><br><span class="line">    num_epochs=<span class="number">1</span>,</span><br><span class="line">    shuffle=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 其他方式格式化数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_features_vector</span>(<span class="params">features, labels</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Pack the features into a single array.&quot;&quot;&quot;</span></span><br><span class="line">    features = tf.stack(<span class="built_in">list</span>(features.values()), axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> features, labels</span><br><span class="line">    </span><br><span class="line">test_dataset = test_dataset.<span class="built_in">map</span>(pack_features_vector)</span><br><span class="line">test_accuracy = tfe.metrics.Accuracy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x, y) <span class="keyword">in</span> test_dataset:</span><br><span class="line">  logits = model(x)</span><br><span class="line">  prediction = tf.argmax(logits, axis=<span class="number">1</span>, output_type=tf.int32)</span><br><span class="line">  test_accuracy(prediction, y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Test set accuracy: &#123;:.3%&#125;&quot;</span>.<span class="built_in">format</span>(test_accuracy.result()))</span><br></pre></td></tr></table></div></figure>


        <h3 id="compile和保存model"   >
          <a href="#compile和保存model" class="heading-link"><i class="fas fa-link"></i></a><a href="#compile和保存model" class="headerlink" title="compile和保存model"></a>compile和保存model</h3>
      <figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># compile 用于设定训练过程</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.Adam(),</span><br><span class="line">                loss=tf.keras.losses.sparse_categorical_crossentropy,</span><br><span class="line">                metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"><span class="comment"># 全量保存模型</span></span><br><span class="line">model.save(<span class="string">&quot;./data/model/iris-model&quot;</span>)</span><br></pre></td></tr></table></div></figure>


        <h3 id="使用模型检测未知数据train-test-py"   >
          <a href="#使用模型检测未知数据train-test-py" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用模型检测未知数据train-test-py" class="headerlink" title="使用模型检测未知数据train_test.py"></a>使用模型检测未知数据<code>train_test.py</code></h3>
      <figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow.contrib.eager <span class="keyword">as</span> tfe</span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">tf.compat.v1.enable_eager_execution()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载训练好的模型</span></span><br><span class="line">file_path = <span class="string">&#x27;./data/model&#x27;</span></span><br><span class="line">model = tf.keras.models.load_model(file_path + <span class="string">&quot;/iris-model&quot;</span>)</span><br><span class="line"><span class="comment"># model.summary()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义标签</span></span><br><span class="line">class_names = [<span class="string">&#x27;Iris setosa&#x27;</span>, <span class="string">&#x27;Iris versicolor&#x27;</span>, <span class="string">&#x27;Iris virginica&#x27;</span>]</span><br><span class="line"></span><br><span class="line">predict_dataset = tf.convert_to_tensor([</span><br><span class="line">    [<span class="number">5.1</span>, <span class="number">3.3</span>, <span class="number">1.7</span>, <span class="number">0.5</span>, ],</span><br><span class="line">    [<span class="number">5.9</span>, <span class="number">3.0</span>, <span class="number">4.2</span>, <span class="number">1.5</span>, ],</span><br><span class="line">    [<span class="number">6.9</span>, <span class="number">3.1</span>, <span class="number">5.4</span>, <span class="number">2.1</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">predictions = model(predict_dataset)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, logits <span class="keyword">in</span> <span class="built_in">enumerate</span>(predictions):</span><br><span class="line">    class_idx = tf.argmax(logits).numpy()</span><br><span class="line">    p = tf.nn.softmax(logits)[class_idx]</span><br><span class="line">    name = class_names[class_idx]</span><br><span class="line">    print(<span class="string">&quot;Example &#123;&#125; prediction: &#123;&#125; (&#123;:4.1f&#125;%)&quot;</span>.<span class="built_in">format</span>(i, name, <span class="number">100</span>*p))</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h2 id="遇到问题-amp-思路"   >
          <a href="#遇到问题-amp-思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#遇到问题-amp-思路" class="headerlink" title="遇到问题&amp;思路"></a>遇到问题&amp;思路</h2>
      <p>不好意思没能力提出问题，很多参数都看不懂，只是模拟操作一下</p>
<ul>
<li><strong>大致就是生成数据集</strong>：可能比较复杂需要格式化</li>
<li><strong>定义标签</strong>：一个常量数组</li>
<li><strong>创建模型</strong>：配置层数及一些输入输出参数</li>
<li><strong>定义损失与梯度函数</strong>：用来检测是否训练到位了</li>
<li><strong>定义优化器</strong>，计数器：同名意</li>
<li><strong><em>可以单个数据测试下这些参数</em></strong></li>
<li><strong>自定义训练方法</strong>：记录下训练的次数，每一次训练的结果（）</li>
<li><strong>输出训练数据</strong>：可视化很直白表示模型当前数据下是否训练的合理</li>
<li><strong><em>再使用准备好的测试数据在这个训练过的模型上测试</em></strong></li>
<li><strong>然后就是保存</strong>：有几种，配置，权重，全量保存</li>
<li>++<strong>最后就是拿未知数据来检测保存的模型是否准确了y</strong>++</li>
</ul>
]]></content>
      <tags>
        <tag>TensorFlow</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Gin示例代码</title>
    <url>/2019/03/12/Go-Gin%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[
        <h3 id="Gin-Example"   >
          <a href="#Gin-Example" class="heading-link"><i class="fas fa-link"></i></a><a href="#Gin-Example" class="headerlink" title="Gin Example"></a>Gin Example</h3>
      <ul>
<li>路由</li>
<li>中间件</li>
<li>平滑退出(平滑重启)</li>
<li>同步|异步(goroutine)</li>
<li>WebSocket</li>
<li>Bind(Query|Form|Json)</li>
<li>JSONP|JSON|SecureJSON|PureJson</li>
<li>XML|YAML<span id="more"></span></li>
<li>ProtoBuf</li>
<li>静态页面渲染</li>
<li>文件下载</li>
<li>Swagger接口文档</li>
<li>Wire (依赖注入DI)</li>
</ul>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;context&quot;</span><br><span class="line">	&quot;flag&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	_ &quot;gogin&#x2F;docs&quot;</span><br><span class="line">	&quot;gogin&#x2F;module&quot;</span><br><span class="line">	&quot;io&quot;</span><br><span class="line">	&quot;io&#x2F;ioutil&quot;</span><br><span class="line">	&quot;log&quot;</span><br><span class="line">	&quot;net&quot;</span><br><span class="line">	&quot;net&#x2F;http&quot;</span><br><span class="line">	&quot;os&quot;</span><br><span class="line">	&quot;os&#x2F;signal&quot;</span><br><span class="line">	&quot;time&quot;</span><br><span class="line"></span><br><span class="line">	&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;</span><br><span class="line">	&quot;github.com&#x2F;golang&#x2F;protobuf&#x2F;proto&quot;</span><br><span class="line">	gs &quot;github.com&#x2F;swaggo&#x2F;gin-swagger&quot;</span><br><span class="line">	&quot;github.com&#x2F;swaggo&#x2F;gin-swagger&#x2F;swaggerFiles&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">	server   *http.Server</span><br><span class="line">	listener net.Listener &#x3D; nil</span><br><span class="line"></span><br><span class="line">	graceful &#x3D; flag.Bool(&quot;graceful&quot;, false, &quot;listen on fd open 3 (internal use only)&quot;)</span><br><span class="line">	message  &#x3D; flag.String(&quot;message&quot;, &quot;Hello World&quot;, &quot;message to send&quot;)</span><br><span class="line">	err      error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 绑定form</span><br><span class="line">type LoginForm struct &#123;</span><br><span class="line">	User     string &#96;form:&quot;user&quot; binding:&quot;required&quot;&#96;</span><br><span class="line">	Password string &#96;form:&quot;password&quot; binding:&quot;required&quot;&#96;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 绑定 JSON</span><br><span class="line">&#x2F;&#x2F; Methods - Bind, BindJSON, BindXML, BindQuery, BindYAML</span><br><span class="line">&#x2F;&#x2F; Methods - ShouldBind, ShouldBindJSON, ShouldBindXML, ShouldBindQuery, ShouldBindYAML</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 绑定uri</span><br><span class="line">type Person struct &#123;</span><br><span class="line">	ID   string &#96;uri:&quot;id&quot; binding:&quot;required,uuid&quot;&#96;</span><br><span class="line">	Name string &#96;uri:&quot;name&quot; binding:&quot;required&quot;&#96;</span><br><span class="line">&#125;</span><br><span class="line">type Login struct &#123;</span><br><span class="line">	User     string &#96;form:&quot;user&quot; json:&quot;user&quot; xml:&quot;user&quot;  binding:&quot;required&quot;&#96;</span><br><span class="line">	Password string &#96;form:&quot;password&quot; json:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;&#96;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; swagger-api-doc Swagger接口文档</span><br><span class="line">&#x2F;&#x2F; @Summary Swagger接口文档</span><br><span class="line">&#x2F;&#x2F; @Description Swagger接口文档</span><br><span class="line">&#x2F;&#x2F; @Tags Tags 标签</span><br><span class="line">&#x2F;&#x2F; @Accept application&#x2F;json</span><br><span class="line">&#x2F;&#x2F; @Produce application&#x2F;json</span><br><span class="line">&#x2F;&#x2F; @Param Authorization header string false &quot;Bearer 用户令牌&quot;</span><br><span class="line">&#x2F;&#x2F; @Param object query Login false &quot;查询参数&quot;</span><br><span class="line">&#x2F;&#x2F; @Security ApiKeyAuth</span><br><span class="line">&#x2F;&#x2F; @Success 200 &#123;object&#125; Person</span><br><span class="line">&#x2F;&#x2F; @Router &#x2F;swagger-api-doc [get]</span><br><span class="line">func main() &#123;</span><br><span class="line">	&#x2F;&#x2F; basic</span><br><span class="line">	r :&#x3D; gin.Default()</span><br><span class="line">	r.GET(&quot;&#x2F;ping&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		c.JSON(200, gin.H&#123;</span><br><span class="line">			&quot;message&quot;: &quot;pong&quot;,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; jsonp</span><br><span class="line">	r.GET(&quot;&#x2F;JSONP&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		data :&#x3D; map[string]interface&#123;&#125;&#123;</span><br><span class="line">			&quot;foo&quot;: &quot;bar&quot;,</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; &#x2F;JSONP?callback&#x3D;x</span><br><span class="line">		&#x2F;&#x2F; 将输出：x(&#123;\&quot;foo\&quot;:\&quot;bar\&quot;&#125;)</span><br><span class="line">		c.JSONP(http.StatusOK, data)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; http server pusher</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; form bind</span><br><span class="line">	r.POST(&quot;&#x2F;login&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		&#x2F;&#x2F; 你可以使用显式绑定声明绑定 multipart form：</span><br><span class="line">		&#x2F;&#x2F; c.ShouldBindWith(&amp;form, binding.Form)</span><br><span class="line">		&#x2F;&#x2F; 或者简单地使用 ShouldBind 方法自动绑定：</span><br><span class="line">		var form LoginForm</span><br><span class="line">		&#x2F;&#x2F; 在这种情况下，将自动选择合适的绑定</span><br><span class="line">		if c.ShouldBind(&amp;form) &#x3D;&#x3D; nil &#123;</span><br><span class="line">			if form.User &#x3D;&#x3D; &quot;user&quot; &amp;&amp; form.Password &#x3D;&#x3D; &quot;password&quot; &#123;</span><br><span class="line">				c.JSON(200, gin.H&#123;&quot;status&quot;: &quot;you are logged in&quot;&#125;)</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				c.JSON(401, gin.H&#123;&quot;status&quot;: &quot;unauthorized&quot;&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			c.JSON(500, gin.H&#123;&quot;status&quot;: &quot;request failed&quot;&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; curl -v localhost:8088&#x2F;thinkerou&#x2F;987fbc97-4bed-5078-9f07-9141ba07c9f3</span><br><span class="line">	&#x2F;&#x2F; curl -v localhost:8088&#x2F;thinkerou&#x2F;not-uuid</span><br><span class="line">	&#x2F;&#x2F; r.GET(&quot;&#x2F;:name&#x2F;:id&quot;, func(c *gin.Context) &#123;</span><br><span class="line">	&#x2F;&#x2F; 	var person Person</span><br><span class="line">	&#x2F;&#x2F; 	if err :&#x3D; c.ShouldBindUri(&amp;person); err !&#x3D; nil &#123;</span><br><span class="line">	&#x2F;&#x2F; 		c.JSON(400, gin.H&#123;&quot;msg&quot;: err&#125;)</span><br><span class="line">	&#x2F;&#x2F; 		return</span><br><span class="line">	&#x2F;&#x2F; 	&#125;</span><br><span class="line">	&#x2F;&#x2F; 	c.JSON(200, gin.H&#123;&quot;name&quot;: person.Name, &quot;uuid&quot;: person.ID&#125;)</span><br><span class="line">	&#x2F;&#x2F; &#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; form-post</span><br><span class="line">	r.POST(&quot;&#x2F;form_post&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		message :&#x3D; c.PostForm(&quot;message&quot;)</span><br><span class="line">		nick :&#x3D; c.DefaultPostForm(&quot;nick&quot;, &quot;anonymous&quot;)</span><br><span class="line"></span><br><span class="line">		c.JSON(200, gin.H&#123;</span><br><span class="line">			&quot;status&quot;:  &quot;posted&quot;,</span><br><span class="line">			&quot;message&quot;: message,</span><br><span class="line">			&quot;nick&quot;:    nick,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Query | POST Form</span><br><span class="line">	r.POST(&quot;&#x2F;post&quot;, func(c *gin.Context) &#123;</span><br><span class="line"></span><br><span class="line">		id :&#x3D; c.Query(&quot;id&quot;)</span><br><span class="line">		page :&#x3D; c.DefaultQuery(&quot;page&quot;, &quot;0&quot;)</span><br><span class="line">		name :&#x3D; c.PostForm(&quot;name&quot;)</span><br><span class="line">		message :&#x3D; c.PostForm(&quot;message&quot;)</span><br><span class="line">		rs :&#x3D; fmt.Sprintf(&quot;id: %s; page: %s; name: %s; message: %s&quot;, id, page, name, message)</span><br><span class="line">		fmt.Printf(rs)</span><br><span class="line">		c.String(200, rs)</span><br><span class="line"></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; JSON response</span><br><span class="line">	&#x2F;&#x2F; 提供 unicode 实体</span><br><span class="line">	r.GET(&quot;&#x2F;json&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		c.JSON(200, gin.H&#123;</span><br><span class="line">			&quot;html&quot;: &quot;&lt;b&gt;Hello, world!&lt;&#x2F;b&gt;&quot;,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 提供字面字符</span><br><span class="line">	r.GET(&quot;&#x2F;purejson&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		c.PureJSON(200, gin.H&#123;</span><br><span class="line">			&quot;html&quot;: &quot;&lt;b&gt;Hello, world!&lt;&#x2F;b&gt;&quot;,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 你也可以使用自己的 SecureJSON 前缀</span><br><span class="line">	&#x2F;&#x2F; r.SecureJsonPrefix(&quot;)]&#125;&#39;,\n&quot;)</span><br><span class="line">	r.GET(&quot;&#x2F;someJSON&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		names :&#x3D; []string&#123;&quot;lena&quot;, &quot;austin&quot;, &quot;foo&quot;&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; 将输出：while(1);[&quot;lena&quot;,&quot;austin&quot;,&quot;foo&quot;]</span><br><span class="line">		c.SecureJSON(http.StatusOK, names)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.GET(&quot;&#x2F;moreJSON&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		&#x2F;&#x2F; 你也可以使用一个结构体</span><br><span class="line">		var msg struct &#123;</span><br><span class="line">			Name    string &#96;json:&quot;user&quot;&#96;</span><br><span class="line">			Message string</span><br><span class="line">			Number  int</span><br><span class="line">		&#125;</span><br><span class="line">		msg.Name &#x3D; &quot;Lena&quot;</span><br><span class="line">		msg.Message &#x3D; &quot;hey&quot;</span><br><span class="line">		msg.Number &#x3D; 123</span><br><span class="line">		&#x2F;&#x2F; 注意 msg.Name 在 JSON 中变成了 &quot;user&quot;</span><br><span class="line">		&#x2F;&#x2F; 将输出：&#123;&quot;user&quot;: &quot;Lena&quot;, &quot;Message&quot;: &quot;hey&quot;, &quot;Number&quot;: 123&#125;</span><br><span class="line">		c.JSON(http.StatusOK, msg)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.GET(&quot;&#x2F;someXML&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		c.XML(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;hey&quot;, &quot;status&quot;: http.StatusOK&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.GET(&quot;&#x2F;someYAML&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		c.YAML(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;hey&quot;, &quot;status&quot;: http.StatusOK&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; protoBuf</span><br><span class="line">	r.GET(&quot;&#x2F;someProtoBuf&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		age :&#x3D; int32(12) &#x2F;&#x2F;[]int64&#123;int64(1), int64(2)&#125;</span><br><span class="line">		name :&#x3D; &quot;test&quot;</span><br><span class="line">		&#x2F;&#x2F; protobuf 的具体定义写在 testdata&#x2F;protoexample 文件中。</span><br><span class="line">		data :&#x3D; &amp;module.User&#123;</span><br><span class="line">			Name: name,</span><br><span class="line">			Age:  age,</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F; 请注意，数据在响应中变为二进制数据</span><br><span class="line">		&#x2F;&#x2F; 将输出被 module.User protobuf 序列化了的数据</span><br><span class="line">		c.ProtoBuf(http.StatusOK, data)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; pares proto</span><br><span class="line">	r.GET(&quot;&#x2F;paresProto&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		resp, err :&#x3D; http.Get(&quot;http:&#x2F;&#x2F;localhost:8989&#x2F;someProtoBuf&quot;)</span><br><span class="line">		if err !&#x3D; nil &#123;</span><br><span class="line">			fmt.Println(err)</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			defer resp.Body.Close()</span><br><span class="line">			body, err :&#x3D; ioutil.ReadAll(resp.Body)</span><br><span class="line">			if err !&#x3D; nil &#123;</span><br><span class="line">				fmt.Println(err)</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				user :&#x3D; &amp;module.User&#123;&#125;</span><br><span class="line">				proto.UnmarshalMerge(body, user)</span><br><span class="line">				c.String(200, user.String())</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 渲染页面</span><br><span class="line">	r.LoadHTMLFiles(&quot;..&#x2F;web&#x2F;index.html&quot;)</span><br><span class="line">	r.StaticFile(&quot;&#x2F;cws.js&quot;, &quot;..&#x2F;web&#x2F;cws.js&quot;)</span><br><span class="line">	r.GET(&quot;&#x2F;html&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		c.HTML(200, &quot;index.html&quot;, nil)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 请求资源-下载文件</span><br><span class="line">	r.GET(&quot;&#x2F;someDataFromReader&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		response, err :&#x3D; http.Get(&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;gin-gonic&#x2F;logo&#x2F;master&#x2F;color.png&quot;)</span><br><span class="line">		if err !&#x3D; nil || response.StatusCode !&#x3D; http.StatusOK &#123;</span><br><span class="line">			c.Status(http.StatusServiceUnavailable)</span><br><span class="line">			return</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		reader :&#x3D; response.Body</span><br><span class="line">		contentLength :&#x3D; response.ContentLength</span><br><span class="line">		contentType :&#x3D; response.Header.Get(&quot;Content-Type&quot;)</span><br><span class="line"></span><br><span class="line">		extraHeaders :&#x3D; map[string]string&#123;</span><br><span class="line">			&#x2F;&#x2F; 下载文件</span><br><span class="line">			&#x2F;&#x2F; &quot;Content-Disposition&quot;: &#96;attachment; filename&#x3D;&quot;gopher.png&quot;&#96;,</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 模拟一些私人数据</span><br><span class="line">	var secrets &#x3D; gin.H&#123;</span><br><span class="line">		&quot;foo&quot;:    gin.H&#123;&quot;email&quot;: &quot;foo@bar.com&quot;, &quot;phone&quot;: &quot;123433&quot;&#125;,</span><br><span class="line">		&quot;austin&quot;: gin.H&#123;&quot;email&quot;: &quot;austin@example.com&quot;, &quot;phone&quot;: &quot;666&quot;&#125;,</span><br><span class="line">		&quot;lena&quot;:   gin.H&#123;&quot;email&quot;: &quot;lena@guapa.com&quot;, &quot;phone&quot;: &quot;523443&quot;&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 路由组使用 gin.BasicAuth() 中间件</span><br><span class="line">	&#x2F;&#x2F; gin.Accounts 是 map[string]string 的一种快捷方式</span><br><span class="line">	authorized :&#x3D; r.Group(&quot;&#x2F;admin&quot;, gin.BasicAuth(gin.Accounts&#123;</span><br><span class="line">		&quot;foo&quot;:    &quot;bar&quot;,</span><br><span class="line">		&quot;austin&quot;: &quot;1234&quot;,</span><br><span class="line">		&quot;lena&quot;:   &quot;hello2&quot;,</span><br><span class="line">		&quot;manu&quot;:   &quot;4321&quot;,</span><br><span class="line">	&#125;))</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; &#x2F;admin&#x2F;secrets 端点</span><br><span class="line">	&#x2F;&#x2F; 触发 &quot;localhost:8080&#x2F;admin&#x2F;secrets</span><br><span class="line">	authorized.GET(&quot;&#x2F;secrets&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		&#x2F;&#x2F; 获取用户，它是由 BasicAuth 中间件设置的</span><br><span class="line">		user :&#x3D; c.MustGet(gin.AuthUserKey).(string)</span><br><span class="line">		if secret, ok :&#x3D; secrets[user]; ok &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;&quot;user&quot;: user, &quot;secret&quot;: secret&#125;)</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;&quot;user&quot;: user, &quot;secret&quot;: &quot;NO SECRET :(&quot;&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 全局中间件  单路由多中间件 路由组嵌套</span><br><span class="line">	&#x2F;&#x2F; TODO:more</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 中间件 goroutine</span><br><span class="line">	r.GET(&quot;&#x2F;long_async&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		&#x2F;&#x2F; 创建在 goroutine 中使用的副本</span><br><span class="line">		cCp :&#x3D; c.Copy()</span><br><span class="line">		go func() &#123;</span><br><span class="line">			&#x2F;&#x2F; 用 time.Sleep() 模拟一个长任务。</span><br><span class="line">			time.Sleep(5 * time.Second)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; 请注意您使用的是复制的上下文 &quot;cCp&quot;，这一点很重要</span><br><span class="line">			log.Println(&quot;Done! in path &quot; + cCp.Request.URL.Path)</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.GET(&quot;&#x2F;long_sync&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		&#x2F;&#x2F; 用 time.Sleep() 模拟一个长任务。</span><br><span class="line">		time.Sleep(5 * time.Second)</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; 因为没有使用 goroutine，不需要拷贝上下文</span><br><span class="line">		log.Println(&quot;Done! in path &quot; + c.Request.URL.Path)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; swagger api doc</span><br><span class="line">	r.GET(&quot;&#x2F;swagger&#x2F;*any&quot;, gs.WrapHandler(swaggerFiles.Handler))</span><br><span class="line"></span><br><span class="line">	uf, e :&#x3D; UserLoader()</span><br><span class="line">	fmt.Println(uf, e)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 禁用控制台颜色，将日志写入文件时不需要控制台颜色。</span><br><span class="line">	&#x2F;&#x2F; gin.DisableConsoleColor()</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 记录到文件。</span><br><span class="line">	f, _ :&#x3D; os.Create(&quot;gin.log&quot;)</span><br><span class="line">	gin.DefaultWriter &#x3D; io.MultiWriter(f)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 如果需要同时将日志写入文件和控制台，请使用以下代码。</span><br><span class="line">	&#x2F;&#x2F; gin.DefaultWriter &#x3D; io.MultiWriter(f, os.Stdout)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 平滑关机</span><br><span class="line">	r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		time.Sleep(5 * time.Second)</span><br><span class="line">		c.String(http.StatusOK, &quot;Welcome Gin Server&quot;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	srv :&#x3D; &amp;http.Server&#123;</span><br><span class="line">		Addr:    &quot;:8989&quot;,</span><br><span class="line">		Handler: r,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	go func() &#123;</span><br><span class="line">		&#x2F;&#x2F; 服务连接</span><br><span class="line">		if err :&#x3D; srv.ListenAndServe(); err !&#x3D; nil &amp;&amp; err !&#x3D; http.ErrServerClosed &#123;</span><br><span class="line">			log.Fatalf(&quot;listen: %s\n&quot;, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 等待中断信号以优雅地关闭服务器（设置 5 秒的超时时间）</span><br><span class="line">	quit :&#x3D; make(chan os.Signal)</span><br><span class="line">	signal.Notify(quit, os.Interrupt)</span><br><span class="line"></span><br><span class="line">	sig :&#x3D; &lt;-quit</span><br><span class="line">	log.Println(sig)</span><br><span class="line">	log.Println(&quot;Shutdown Server ...&quot;)</span><br><span class="line"></span><br><span class="line">	ctx, cancel :&#x3D; context.WithTimeout(context.Background(), 5*time.Second)</span><br><span class="line">	defer cancel()</span><br><span class="line"></span><br><span class="line">	if err :&#x3D; srv.Shutdown(ctx); err !&#x3D; nil &#123;</span><br><span class="line">		log.Fatal(&quot;Server Shutdown:&quot;, err)</span><br><span class="line">	&#125;</span><br><span class="line">	log.Println(&quot;Server exiting&quot;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; r.Run(&quot;:8989&quot;) &#x2F;&#x2F; listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      <tags>
        <tag>Go</tag>
        <tag>Gin</tag>
        <tag>Wire</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 处理返回大文件的接口</title>
    <url>/2019/03/25/PHP-%E5%A4%84%E7%90%86%E8%BF%94%E5%9B%9E%E5%A4%A7%E6%96%87%E4%BB%B6%E7%9A%84%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>处理的主要逻辑点在 BasicAuth请求,文件流处理,行读取,CSV-Tab格式化,大数组分段批量保存,Text类型容量;</p>
<p>实际场景:数据中心提供的一份情报数据1.6w条记录,每条记录0.5k,字段10+;</p>
<ul>
<li><p>接口鉴权:<br>  basic Auth</p>
</li>
<li><p>使用GuzzleHttp请求</p>
<ul>
<li>option 设置 auth=&gt;[name,password]<ul>
<li>option 设置超时时间<span id="more"></span></li>
</ul>
</li>
</ul>
</li>
<li><p>获取返回数据</p>
<ul>
<li>$response = $client-&gt;get(…);</li>
<li>获取返回数据的 stream $response-&gt;getBody();</li>
<li>数据缓存路径 “ php:/temp “ (可自定义配置php.ini)</li>
<li>判断文件大小,获取内容,写入指定路径 $tmpPath</li>
<li>行读取 fgets() | SplFileObject</li>
<li>格式化 Tab str_getcsv()</li>
<li>返回数组</li>
</ul>
</li>
<li><p>大数组写入 MySQL</p>
<ul>
<li>批量写入 MySQL最大占位符限制 65535</li>
<li><code>SQLSTATE[HY000]: General error: 1390 Prepared statement contains too many placeholders.</code></li>
<li>MAX_NUM = int( 65535 / count( saveData[0] ) )</li>
<li>分段写入 array_chunk( , MAX_NUM , ) 返回分段数组列表</li>
<li>遍历写入 MySQL</li>
<li>写入成功后 发送消息通知其他业务</li>
<li>释放内存,删除临时文件</li>
</ul>
</li>
<li><p>MySQL text 类型大小</p>
<ul>
<li><code>ERROR: SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column</code><figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">TEXT 65,535 bytes ~64kb</span><br><span class="line">MEDIUMTEXT 16,777,215 bytes ~16Mb</span><br><span class="line">LONGTEXT 4,294,967,295 bytes ~4Gb</span><br><span class="line"></span><br><span class="line">ERROR: SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column </span><br></pre></td></tr></table></div></figure>
</li>
</ul>
</li>
<li><p>示例代码</p>
  <figure class="highlight php"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Console</span>\<span class="title">Commands</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Jobs</span>\<span class="title">QueueJob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">SpecialName</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Client</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Console</span>\<span class="title">Command</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">DB</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class     SyncNetlabBlock</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>  App\Console\Commands</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncNetlabBlock</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$signature</span> = <span class="string">&#x27;sync:netlab-blocklist&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$description</span> = <span class="string">&#x27;xxxxxxx&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据</span></span><br><span class="line"><span class="comment">     * 查询匹配特定域名解析 special_name</span></span><br><span class="line"><span class="comment">     *      有则不添加</span></span><br><span class="line"><span class="comment">     *      无则新增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$saveData</span> = [];</span><br><span class="line">        <span class="variable">$queueData</span> = [];</span><br><span class="line">        <span class="variable">$specialNameModel</span> = <span class="keyword">new</span> SpecialName();</span><br><span class="line">        <span class="variable">$netlabBlockList</span> = <span class="keyword">$this</span>-&gt;getNetlabData();</span><br><span class="line">        <span class="variable">$netlabBlockList</span> = <span class="keyword">$this</span>-&gt;distinctDomainName(<span class="variable">$netlabBlockList</span>);</span><br><span class="line">        <span class="comment">// 构造新增数据</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$netlabBlockList</span> <span class="keyword">as</span> <span class="variable">$qname</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$item</span> = [</span><br><span class="line">                <span class="string">&#x27;qname&#x27;</span> =&gt; <span class="variable">$qname</span>,</span><br><span class="line">                ......</span><br><span class="line">            ];</span><br><span class="line">            <span class="variable">$saveData</span>[] = <span class="variable">$item</span>;</span><br><span class="line">            <span class="variable">$queueData</span>[] = <span class="variable">$specialNameModel</span>-&gt;formatMessage(<span class="variable">$item</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分段写入数据库</span></span><br><span class="line">        <span class="keyword">if</span> (count(<span class="variable">$saveData</span>[<span class="number">0</span>]) * count(<span class="variable">$saveData</span>) &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">            print_r(<span class="string">&quot;开启分段写入Mysql:&quot;</span> . count(<span class="variable">$saveData</span>) . PHP_EOL);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;partitionSave(<span class="variable">$saveData</span>, <span class="variable">$queueData</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入数据库</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$saveData</span> &amp;&amp; DB::table(<span class="variable">$specialNameModel</span>-&gt;getTable())-&gt;insert(<span class="variable">$saveData</span>)) &#123;</span><br><span class="line">            <span class="comment">// 发送通知</span></span><br><span class="line">            <span class="variable">$specialNameModel</span>-&gt;dispatch(<span class="keyword">new</span> QueueJob(QueueJob::ADD_SPECIAL_NAME, <span class="variable">$queueData</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放内存</span></span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$saveData</span>, <span class="variable">$queueData</span>, <span class="variable">$netlabBlockList</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分段 插入数据库-发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $saveData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $queueData</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">partitionSave</span>(<span class="params"><span class="variable">$saveData</span>, <span class="variable">$queueData</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$specialNameModel</span> = <span class="keyword">new</span> SpecialName();</span><br><span class="line">        <span class="variable">$groupSave</span> = array_chunk(<span class="variable">$saveData</span>, <span class="number">5000</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$groupQueue</span> = array_chunk(<span class="variable">$queueData</span>, <span class="number">5000</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$groupSave</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            print_r(<span class="string">&quot;chunk_<span class="subst">&#123;$i&#125;</span>保存成功_COUNT()&quot;</span> . count(<span class="variable">$groupSave</span>[<span class="variable">$i</span>]) . PHP_EOL);</span><br><span class="line">            <span class="comment">// 写入数据库</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$groupSave</span>[<span class="variable">$i</span>] &amp;&amp; DB::table(<span class="variable">$specialNameModel</span>-&gt;getTable())-&gt;insert(<span class="variable">$groupSave</span>[<span class="variable">$i</span>])) &#123;</span><br><span class="line">                <span class="comment">// 发送通知</span></span><br><span class="line">                <span class="variable">$specialNameModel</span>-&gt;dispatch(<span class="keyword">new</span> QueueJob(QueueJob::ADD_SPECIAL_NAME, <span class="variable">$groupQueue</span>[<span class="variable">$i</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求netlab接口获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNetlabData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$netlabBlockList</span> = <span class="variable">$options</span> = [];</span><br><span class="line">        <span class="variable">$httpClient</span> = <span class="keyword">new</span> Client();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$path</span> = <span class="string">&quot;/tmp/netlab_blocklist_&quot;</span> . date(<span class="string">&quot;YmdHis&quot;</span>) . <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">        <span class="variable">$url</span> = <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">        <span class="variable">$user</span> = <span class="string">&#x27;xxxxx&#x27;</span>;</span><br><span class="line">        <span class="variable">$password</span> = <span class="string">&#x27;xxxxx&#x27;</span>;</span><br><span class="line">        <span class="variable">$options</span>[<span class="string">&#x27;auth&#x27;</span>] = [<span class="variable">$user</span>, <span class="variable">$password</span>];</span><br><span class="line">        <span class="variable">$options</span>[<span class="string">&#x27;timeout&#x27;</span>] = <span class="number">7200</span>;</span><br><span class="line">        <span class="variable">$response</span> = <span class="variable">$httpClient</span>-&gt;get(<span class="variable">$url</span>, <span class="variable">$options</span>);</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$response</span>-&gt;getBody();</span><br><span class="line">        <span class="variable">$wreturn</span> = file_put_contents(<span class="variable">$path</span>, <span class="variable">$data</span>-&gt;getContents());</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$wreturn</span>) &#123;</span><br><span class="line">            <span class="variable">$netlabBlockList</span> = <span class="keyword">$this</span>-&gt;readBlockListByLine(<span class="variable">$path</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除文件</span></span><br><span class="line">        unlink(<span class="variable">$path</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$netlabBlockList</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $netlabBlockList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">distinctDomainName</span>(<span class="params"><span class="variable">$netlabBlockList</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 获取所有数据库数据-A记录域名-过滤已存在数据</span></span><br><span class="line">        <span class="variable">$queryData</span> = SpecialName::query()-&gt;where(<span class="string">&#x27;qtype&#x27;</span>, SpecialName::DEFAULT_TYPE_A)</span><br><span class="line">            -&gt;get(<span class="string">&#x27;qname&#x27;</span>)-&gt;toArray();</span><br><span class="line">        <span class="variable">$queryData</span> = array_column(<span class="variable">$queryData</span>, <span class="string">&#x27;qname&#x27;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$queryData</span> <span class="keyword">as</span> <span class="variable">$val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$netlabBlockList</span>[<span class="variable">$val</span>])) &#123;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable">$netlabBlockList</span>[<span class="variable">$val</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$netlabBlockList</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  SplFileObject</span></span><br><span class="line"><span class="comment">     * 行读取-转换为数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $fileUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bool $isTab</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readBlockListByLine</span>(<span class="params"><span class="variable">$fileUrl</span>, <span class="variable">$isTab</span> = <span class="literal">true</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        file_exists(<span class="variable">$fileUrl</span>) <span class="keyword">or</span> <span class="keyword">exit</span>(<span class="string">&quot;There is no file&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file</span> = fopen(<span class="variable">$fileUrl</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="variable">$delimiter</span> = <span class="variable">$isTab</span> ? <span class="string">&quot;\t&quot;</span> : <span class="string">&quot;,&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$buffer</span> = [];</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!feof(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$line</span> = fgets(<span class="variable">$file</span>);<span class="comment">//fgets()函数从文件指针中读取一行</span></span><br><span class="line">            <span class="variable">$data</span> = str_getcsv(<span class="variable">$line</span>, <span class="variable">$delimiter</span>);</span><br><span class="line">            <span class="keyword">if</span> (count(<span class="variable">$data</span>) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$buffer</span>[<span class="variable">$data</span>[<span class="number">1</span>]] = <span class="variable">$data</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="variable">$i</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$buffer</span> = array_filter(<span class="variable">$buffer</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$buffer</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>MySQL</tag>
        <tag>Text</tag>
        <tag>CSV</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>初识图数据库:neo4j</title>
    <url>/2020/03/25/%E5%88%9D%E8%AF%86%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93-neo4j/</url>
    <content><![CDATA[
        <h2 id="图数据库是什么"   >
          <a href="#图数据库是什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#图数据库是什么" class="headerlink" title="图数据库是什么"></a>图数据库是什么</h2>
      <blockquote>
<p>在计算机科学中，图数据库（英语：graph database，GDB）是一个使用图结构进行语义查询的数据库，它使用节点、边和属性来表示和存储数据。</p>
</blockquote>
<blockquote>
<p>图数据库是一种非关系型数据库，以解决现有关系数据库的局限性。图模型明确地列出了数据节点之间的依赖关系，而关系模型和其他NoSQL数据库模型则通过隐式连接来链接数据。图数据库从设计上，就是可以简单快速地检索难以在关系系统中建模的复杂层次结构的。<br>– <span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93" >图数据库wiki</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
<span id="more"></span>


        <h2 id="应用"   >
          <a href="#应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#应用" class="headerlink" title="应用"></a>应用</h2>
      <ul>
<li>百度自主研发的原生图数据系统（<span class="exturl"><a class="exturl__link"   href="https://ai.baidu.com/tech/kg/bgraph" >BGraph</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>），在百度的知识图谱系统中应用和实践多年，支撑数以亿计的实体并支撑数以万计的查询 QPS，用于知识问答、搜索推荐和知识推理等。</li>
<li><span class="exturl"><a class="exturl__link"   href="https://www.allhistory.com/relation?id=580716f70bd1be8d718b4567" >全历史</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>查询历史人物的关系图谱,分析两个历史文化名词之间的<span class="exturl"><a class="exturl__link"   href="https://www.allhistory.com/relation/atobPath?id=580716f70bd1be8d718b4567&to=590c4030977fd58037202fe8" >联系途径</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>  <img   src="https://note.youdao.com/yws/api/personal/file/WEB922d619dc8420570c7fc57781c2db539?method=download&shareKey=2979777244337c648359ad8257d6e36a" style=""  alt=""></li>
</ul>

        <h2 id="开源数据库"   >
          <a href="#开源数据库" class="heading-link"><i class="fas fa-link"></i></a><a href="#开源数据库" class="headerlink" title="开源数据库"></a>开源数据库</h2>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://hugegraph.github.io/hugegraph-doc/" >HugeGraph</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://sandbox.neo4j.com/?ref=web-product-database" >Neo4j</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>… …</li>
</ul>

        <h2 id="Neo4J"   >
          <a href="#Neo4J" class="heading-link"><i class="fas fa-link"></i></a><a href="#Neo4J" class="headerlink" title="Neo4J"></a>Neo4J</h2>
      <p>开源，支持ACID，具有用于企业部署的高可用性集群，并附带基于Web的管理工具，包括完整事务支持和可视节点链接图浏览器；可以使用其内置的REST Web API接口从大多数编程语言访问，以及使用官方驱动程序的专有Bolt协议；截至2019年1月最受欢迎的图数据库</p>

        <h2 id="Cypher"   >
          <a href="#Cypher" class="heading-link"><i class="fas fa-link"></i></a><a href="#Cypher" class="headerlink" title="Cypher"></a>Cypher</h2>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://neo4j.com/docs/cypher-manual/4.0/" >Cypher4.0</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> is a graph query language that is used to query the Neo4j Database. Just like you use SQL to query a MySQL database, you would use Cypher to query the Neo4j Database. </li>
</ul>

        <h2 id="查询示例"   >
          <a href="#查询示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#查询示例" class="headerlink" title="查询示例"></a>查询示例</h2>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 查询“发行时间在2010后的影片及与其关系为执导的人物信息”</span><br><span class="line">p 人物</span><br><span class="line">d 关系</span><br><span class="line">m 影片</span><br><span class="line"></span><br><span class="line">neo4j$ MATCH (p:Person)-[d:DIRECTED]-(m:Movie) where m.released &gt; 2010 RETURN p,d,m</span><br></pre></td></tr></table></div></figure>
<html><h4></h4><img style="width:auto;height:300px;" src="http://guides.neo4j.com/sandbox/movies/img/movies-after-2010.svg"/></html>

<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 前二十个 人物节点</span><br><span class="line">MATCH (p:Person) RETURN p limit 20</span><br><span class="line"># 前二十个任意类型节点及其关系</span><br><span class="line">MATCH (n) RETURN n limit 20</span><br><span class="line"></span><br><span class="line"># 创建人物顶点</span><br><span class="line">Create (p:Person &#123;name: &#39;xxx&#39;&#125;) RETURN p</span><br><span class="line"></span><br><span class="line"># 创建关系</span><br><span class="line">MATCH (p:Person), (m:Movie)</span><br><span class="line">WHERE p.name &#x3D; &quot;xxx&quot; and m.title &#x3D; &quot;Cloud Atlas&quot;</span><br><span class="line">CREATE (p)-[w:WATCHED]-&gt;(m)</span><br><span class="line">RETURN type(w)</span><br><span class="line"></span><br><span class="line"># 关系查询</span><br><span class="line">MATCH (p:Person)-[r:REVIEWED]-(m:Movie)  return p,r,m;</span><br><span class="line">MATCH (p:Person)-[w:WATCHED]-(m:Movie) where p.name&#x3D;&quot;xxx&quot; RETURN p,w,m</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>更多查询语句见 <span class="exturl"><a class="exturl__link"   href="https://neo4j.com/docs/cypher-manual/4.0/" >Cypher4.0 文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </p>
]]></content>
      <tags>
        <tag>图数据库</tag>
        <tag>neo4j</tag>
        <tag>Graph</tag>
        <tag>cyper</tag>
      </tags>
  </entry>
  <entry>
    <title>go-gin es查询使用多条件与聚合</title>
    <url>/2019/05/25/go-gin-es%E6%9F%A5%E8%AF%A2%E4%BD%BF%E7%94%A8%E5%A4%9A%E6%9D%A1%E4%BB%B6%E4%B8%8E%E8%81%9A%E5%90%88/</url>
    <content><![CDATA[
        <h2 id="es查询-term-与-match"   >
          <a href="#es查询-term-与-match" class="heading-link"><i class="fas fa-link"></i></a><a href="#es查询-term-与-match" class="headerlink" title="es查询 term 与 match"></a>es查询 term 与 match</h2>
      
        <h2 id="es查询-must-与-should"   >
          <a href="#es查询-must-与-should" class="heading-link"><i class="fas fa-link"></i></a><a href="#es查询-must-与-should" class="headerlink" title="es查询 must 与 should"></a>es查询 must 与 should</h2>
      <ul>
<li>must的两个条件都必须满足</li>
<li>should中的两个条件至少满足一个就可以<span id="more"></span>

</li>
</ul>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">GET &#x2F;dns_cache_ms_log_queue_2019*&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;Data.Tid.keyword&quot;: &quot;445f395f647c1b36&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;Host.keyword&quot;: &quot;p53577v.hulk.shbt.qihoo.net_001&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h2 id="es-使用排序字段的问题"   >
          <a href="#es-使用排序字段的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#es-使用排序字段的问题" class="headerlink" title="es 使用排序字段的问题"></a>es 使用排序字段的问题</h2>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://my.oschina.net/dabird/blog/1926042" >es sort all shards failed [type=search_phase_execution_exception]</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://www.elastic.co/guide/en/elasticsearch/reference/6.7/search-request-sort.html#_ignoring_unmapped_fields" >Ignoring Unmapped Fields</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参与排序的字段类型不明确 CreateTime [未映射类型字段]</span></span><br><span class="line">client.Sort(<span class="string">&quot;CreateTime&quot;</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// 替换为默认时间字段</span></span><br><span class="line">client.Sort(<span class="string">&quot;@timestamp&quot;</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></div></figure>


        <h2 id="olivere-elastic-使用"   >
          <a href="#olivere-elastic-使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#olivere-elastic-使用" class="headerlink" title="olivere/elastic 使用"></a>olivere/elastic 使用</h2>
      <ul>
<li>NewBoolQuery 多条件查询器</li>
<li>q.Must / q.Should 添加查询器</li>
<li>其他查询器 NewTermQuery NewMatchQuery …</li>
<li>分页 From(OFFSET) / Size(PAGESIZ)</li>
<li>排序 Sort(FIELD,DESC_BOOL)</li>
</ul>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line">client := GetEsClient().Search().Index(<span class="string">&quot;dns_cache_ms_log_queue_20*&quot;</span>)</span><br><span class="line">boolQuery := elastic.NewBoolQuery()</span><br><span class="line"></span><br><span class="line">termQuery := elastic.NewTermQuery(<span class="string">&quot;Data.Tid.keyword&quot;</span>, tid)</span><br><span class="line">termQueryHost := elastic.NewTermQuery(<span class="string">&quot;Host.keyword&quot;</span>, host)</span><br><span class="line">boolQuery.Must(termQuery)</span><br><span class="line">boolQuery.Must(termQueryHost)</span><br><span class="line">client = client.Query(boolQuery)</span><br><span class="line">PrintDSL(boolQuery) <span class="comment">// 打印查询器生成的 json 数据</span></span><br><span class="line">searchResult, err := client.From(page*ES_PAGE_SIZE).Size(ES_PAGE_SIZE).Sort(<span class="string">&quot;@timestamp&quot;</span>, <span class="literal">false</span>).</span><br><span class="line">    Pretty(<span class="literal">true</span>). <span class="comment">// 查询结果返回可读性较好的JSON格式</span></span><br><span class="line">    Do(context.Background())</span><br><span class="line">fmt.Printf(<span class="string">&quot;查询消耗时间 %d ms, 结果总数: %d\n&quot;</span>, searchResult.TookInMillis, searchResult.TotalHits())</span><br></pre></td></tr></table></div></figure>


        <h2 id="聚合查询"   >
          <a href="#聚合查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2>
      <ul>
<li>s</li>
</ul>
]]></content>
      <tags>
        <tag>go</tag>
        <tag>gin</tag>
        <tag>es</tag>
        <tag>多条件</tag>
        <tag>聚合</tag>
      </tags>
  </entry>
  <entry>
    <title>web服务https证书设置-nginx/golang</title>
    <url>/2019/05/26/web%E6%9C%8D%E5%8A%A1https%E8%AF%81%E4%B9%A6%E8%AE%BE%E7%BD%AE-nginx-golang/</url>
    <content><![CDATA[
        <h2 id="证书"   >
          <a href="#证书" class="heading-link"><i class="fas fa-link"></i></a><a href="#证书" class="headerlink" title="证书"></a>证书</h2>
      <ul>
<li>用于签名的信息</li>
<li>…</li>
<li>.crt/.cer 证书(Certificate)</li>
<li>.key 密钥/私钥(Private Key)</li>
<li>.csr 证书认证签名请求(Certificate signing request)</li>
<li>*.pem base64编码文本储存格式，可以单独放证书或密钥，也可以同时放两个；base64编码就是两条——-之间的那些莫名其妙的字符</li>
<li>*.der 证书的二进制储存格式(不常用)</li>
</ul>
<p>自签证书使用注意事项</p>
<ul>
<li>根证书添加</li>
<li>签名证书添加</li>
</ul>

        <h2 id="生成方式"   >
          <a href="#生成方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#生成方式" class="headerlink" title="生成方式"></a>生成方式</h2>
      <span id="more"></span>
<ul>
<li>工具网站</li>
<li>openssl</li>
</ul>

        <h2 id="nginx-配置ssl相关参数"   >
          <a href="#nginx-配置ssl相关参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#nginx-配置ssl相关参数" class="headerlink" title="nginx 配置ssl相关参数"></a>nginx 配置ssl相关参数</h2>
      <ul>
<li>listen 443 default_server ssl;</li>
<li>ssl_certificate /etc/nginx/certs/default.crt;</li>
<li>ssl_certificate_key /etc/nginx/certs/default.key;</li>
</ul>
<p>优化设置</p>
<ul>
<li>支持协议</li>
<li>….</li>
</ul>

        <h2 id="Go-web服务使用证书"   >
          <a href="#Go-web服务使用证书" class="heading-link"><i class="fas fa-link"></i></a><a href="#Go-web服务使用证书" class="headerlink" title="Go-web服务使用证书"></a>Go-web服务使用证书</h2>
      ]]></content>
      <tags>
        <tag>go</tag>
        <tag>nginx</tag>
        <tag>https</tag>
        <tag>web</tag>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel-mysql2pgsql</title>
    <url>/2020/09/16/mysql2pgsql/</url>
    <content><![CDATA[
        <h1 id="Laravel-mysql-to-pgsql"   >
          <a href="#Laravel-mysql-to-pgsql" class="heading-link"><i class="fas fa-link"></i></a><a href="#Laravel-mysql-to-pgsql" class="headerlink" title="Laravel mysql to pgsql"></a>Laravel mysql to pgsql</h1>
      <p>laravel 项目直接修改配置文件即可切换 driver</p>
<ul>
<li><code>php</code> 开启 <code>pdo_pgsql.so</code> <code>extension php.ini</code><ul>
<li>下载源码-解压-CD…</li>
<li><code>phpize</code></li>
<li>执行 <code>./configuration with-php-config=php-config</code></li>
<li><code>make &amp;&amp; make install</code></li>
<li><code>vim php.ini extensions pdo_pgsql</code></li>
</ul>
</li>
<li>时区问题<ul>
<li>使用 工具从 <code>mysql</code> 导入到 <code>pgsql</code> 的数据存在时区 例如: <code>2020-08-19 19:00:12+08</code></li>
<li>需要修改所有 <code>Model</code> 的 <code>dateFormat</code></li>
<li><code>protected $dateFormat = &#39;Y-m-d H:i:sP&#39;;</code></li>
<li><code>model-&gt;save()</code>: 自动更新时间逻辑 <code>freshTimestamp()</code></li>
<li>数据查询渲染  <code>serializeDate()</code></li>
<li><code>Carbon</code> 类的使用 &amp;&amp; <span class="exturl"><a class="exturl__link"   href="https://www.php.net/manual/en/datetime.construct.php" >Datetime</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>扩展php中的其他时区格式: <a href="https://www.php.net/manual/zh/function.date.php"><code>e</code>/<code>O</code>/<code>P</code>/<code>T</code>/<code>Z</code></a> 等含义</li>
<li>相关代码<span id="more"></span>
<figure class="highlight php"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$dateFormat</span> = <span class="string">&quot;Y-m-d H:i:sP&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$dates</span> = [<span class="string">&#x27;deleted_at&#x27;</span>,<span class="string">&quot;updated_at&quot;</span>,<span class="string">&quot;created_at&quot;</span>];</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">freshTimestamp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date(<span class="keyword">$this</span>-&gt;dateFormat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为数组 / JSON 序列化准备日期。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> DateTimeInterface $date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">serializeDate</span>(<span class="params">DateTimeInterface <span class="variable">$date</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 默认时区</span></span><br><span class="line">        <span class="comment">// $timezone = new DateTimeZone(date_default_timezone_get());</span></span><br><span class="line">        <span class="comment">// $val-&gt;setTimezone($timezone);</span></span><br><span class="line">        <span class="comment">// return $val-&gt;format(&#x27;Y-m-d H:i:s&#x27;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// - **走过的弯路**</span></span><br><span class="line"><span class="comment">// - 自定义 `Model` 的 `asDatetime()` / `get-DATEFIELD-Attribute()`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    protected function getCreatedAtAttribute($value)&#123;</span></span><br><span class="line"><span class="comment">//        return  &quot;2020-04-15 08:30:04+08:00&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    protected function getUpdatedAtAttribute($value)&#123;</span></span><br><span class="line"><span class="comment">//        return &quot;2020-04-15 08:30:04+08:00&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    protected function asDateTime($value)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        $ts = explode(&quot;+&quot;, $value);</span></span><br><span class="line"><span class="comment">//        var_dump($ts);</span></span><br><span class="line"><span class="comment">//        if (count($ts) &gt; 1) &#123;</span></span><br><span class="line"><span class="comment">//            return \Carbon\Carbon::rawCreateFromFormat(&#x27;Y-m-d H:i:sP&#x27;, &quot;2020-04-15 08:30:04+08:00&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return \Carbon\Carbon::rawCreateFromFormat(&#x27;Y-m-d H:i:sP&#x27;, &quot;2020-04-15 08:30:04+08:00&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public function toArray()</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        return [];</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


</li>
</ul>
</li>
</ul>
<p>操作方案: 综合考虑后使用两步走的方案</p>
<ol>
<li><p>先转换 <code>dbschame.sql</code> :使用 <code>py-mysql2pgsql</code> 工具包</p>
 <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">oomcc:py-mysql2pgsql oom$ py-mysql2pgsql -h</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;philipsoutham&#x2F;py-mysql2pgsql</span><br><span class="line">oomcc:py-mysql2pgsql oom$ py-mysql2pgsql -f mysql2pgsql.yml</span><br></pre></td></tr></table></div></figure>

<p> <code>mysql2pgsql.yml</code> 文件:</p>
 <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># a socket connection will be selected if a &#39;socket&#39; is specified</span><br><span class="line"># also &#39;localhost&#39; is a special &#39;hostname&#39; for MySQL that overrides the &#39;port&#39; option</span><br><span class="line"># and forces it to use a local socket connection</span><br><span class="line"># if tcp is chosen, you can use compression</span><br><span class="line"></span><br><span class="line">mysql:</span><br><span class="line">hostname: 127.0.0.1</span><br><span class="line">port: 33036</span><br><span class="line">username: root</span><br><span class="line">password: 123456</span><br><span class="line">database: eerrrr</span><br><span class="line">compress: false</span><br><span class="line">destination:</span><br><span class="line"># if file is given, output goes to file, else postgres</span><br><span class="line">file: .&#x2F;td.sql</span><br><span class="line">postgres:</span><br><span class="line">hostname: localhost</span><br><span class="line">port: 5432</span><br><span class="line">username: mysql2psql</span><br><span class="line">password: </span><br><span class="line">database: mysql2psql_test</span><br><span class="line"></span><br><span class="line"># if tables is given, only the listed tables will be converted.  leave empty to convert all tables.</span><br><span class="line">#only_tables:</span><br><span class="line">#- table1</span><br><span class="line">#- table2</span><br><span class="line"># if exclude_tables is given, exclude the listed tables from the conversion.</span><br><span class="line">#exclude_tables:</span><br><span class="line">#- table3</span><br><span class="line">#- table4</span><br><span class="line"></span><br><span class="line"># if supress_data is true, only the schema definition will be exported&#x2F;migrated, and not the data</span><br><span class="line">supress_data: true</span><br><span class="line"></span><br><span class="line"># if supress_ddl is true, only the data will be exported&#x2F;imported, and not the schema</span><br><span class="line">supress_ddl: false</span><br><span class="line"></span><br><span class="line"># if force_truncate is true, forces a table truncate before table loading</span><br><span class="line">force_truncate: false</span><br><span class="line"></span><br><span class="line"># if timezone is true, forces to append&#x2F;convert to UTC tzinfo mysql data</span><br><span class="line">timezone: false</span><br><span class="line"></span><br><span class="line"># if index_prefix is given, indexes will be created whith a name prefixed with index_prefix</span><br><span class="line">index_pre**fix:** idx_</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



</li>
</ol>
<ol start="2">
<li><p>再导入数据: 使用 <strong>pgloader/navicate</strong>:</p>
<p> a): <code>navicate</code> -&gt; 工具-&gt; 数据传输: 关闭设置中的 <code>DDL相关选项</code></p>
<p> b): <code>pgloader</code>: 自定义传输模版 <code>pg.load</code></p>
<p> <code>pg.load</code> 文件:</p>
 <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">LOAD DATABASE</span><br><span class="line">    FROM mysql:&#x2F;&#x2F;www:wwww@12wwww1:33036&#x2F;aaa</span><br><span class="line">    INTO pgsql:&#x2F;&#x2F;www:wwww@10wwww87:31139&#x2F;ffff</span><br><span class="line"></span><br><span class="line">    WITH include drop, create tables, create indexes, workers &#x3D; 8, concurrency &#x3D; 1</span><br><span class="line"></span><br><span class="line">ALTER SCHEMA &#39;wwwww&#39; RENAME TO &#39;public&#39;</span><br><span class="line">;</span><br></pre></td></tr></table></div></figure>

<p> <strong>执行日志</strong>:</p>
 <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">oomcc:py-mysql2pgsql oom$ vim pg.load </span><br><span class="line">oomcc:py-mysql2pgsql oom$ pgloader pg.load</span><br><span class="line">2020-09-15T11:31:53.011646+01:00 LOG pgloader version &quot;3.6.2&quot;</span><br><span class="line">2020-09-15T11:31:53.013707+01:00 LOG Data errors in &#39;&#x2F;private&#x2F;tmp&#x2F;pgloader&#x2F;&#39;</span><br><span class="line">2020-09-15T11:31:53.013761+01:00 LOG Parsing commands from file #P&quot;&#x2F;Users&#x2F;oom&#x2F;Desktop&#x2F;py-mysql2pgsql&#x2F;pg.load&quot;</span><br><span class="line">2020-09-15T11:31:53.258908+01:00 LOG Migrating from #&lt;MYSQL-CONNECTION mysql:&#x2F;&#x2F;root@127.0.0.1:33036&#x2F;dns_cache_new &#123;1005ABE6E3&#125;&gt;</span><br><span class="line">2020-09-15T11:31:53.259212+01:00 LOG Migrating into #&lt;PGSQL-CONNECTION pgsql:&#x2F;&#x2F;light@10.220.171.187:31139&#x2F;cache_ms_s &#123;1005ABF393&#125;&gt;</span><br><span class="line">2020-09-15T11:32:37.324643+01:00 LOG report summary reset</span><br><span class="line">                table name     errors       rows      bytes      total time</span><br><span class="line">-----------------------------  ---------  ---------  ---------  --------------</span><br><span class="line">             fetch meta data          0         60                     0.406s</span><br><span class="line">              Create Schemas          0          0                     0.029s</span><br><span class="line">            Create SQL Types          0          0                     0.034s</span><br><span class="line">               Create tables          0         48                     2.472s</span><br><span class="line">              Set Table OIDs          0         24                     0.024s</span><br><span class="line">-----------------------------  ---------  ---------  ---------  --------------</span><br><span class="line">    public.admin_permissions          0         10     0.8 kB          0.362s</span><br><span class="line">  public.admin_operation_log          0      27832     3.8 MB          2.596s</span><br><span class="line">     public.admin_role_users          0          3     0.0 kB          0.569s</span><br><span class="line">           ... ...</span><br><span class="line">-----------------------------  ---------  ---------  ---------  --------------</span><br><span class="line">     COPY Threads Completion          0          8                    31.225s</span><br><span class="line">              Create Indexes          0         36                    35.220s</span><br><span class="line">      Index Build Completion          0         36                     2.508s</span><br><span class="line">             Reset Sequences          0         22                     0.568s</span><br><span class="line">                Primary Keys          0         24                     1.041s</span><br><span class="line">         Create Foreign Keys          0          0                     0.000s</span><br><span class="line">             Create Triggers          0         20                     0.997s</span><br><span class="line">            Install Comments          0         90                     4.185s</span><br><span class="line">-----------------------------  ---------  ---------  ---------  --------------</span><br><span class="line">           Total import time          ✓     762609   130.7 MB       1m15.744s</span><br><span class="line">oomcc:py-mysql2pgsql oom$ </span><br></pre></td></tr></table></div></figure>

</li>
</ol>

        <h2 id="Error-and-fix"   >
          <a href="#Error-and-fix" class="heading-link"><i class="fas fa-link"></i></a><a href="#Error-and-fix" class="headerlink" title="Error and fix:"></a>Error and <strong>fix:</strong></h2>
      <ol>
<li><p>message: “SQLSTATE[23502]: Not null violation: 7 ERROR:  null value in column &quot;id&quot; violates not-null constraint\nDETAIL:  Failing row contains (null, 12, 57, null, null, null, null). (SQL: insert into &quot;dc_view_recursion&quot; (&quot;device_id&quot;, &quot;view_id&quot;) values (57, 12), (90, 12), (91, 12), (92, 12))”</p>
<p> <strong>fix:</strong> <code>转换建表语句 py-mysql2pgsql</code></p>
</li>
<li><p>解决mac _mysql.c:44:10: fatal error: ‘my_config.h‘ file not found</p>
<p> <strong>fix:</strong> <code>/usr/local/include/mysql 下有个 mysql.h 文件，这个就应该是我们要找的my_config.h 文件了吧，cp mysql.h my_config.h ，再次 pip install MySQL-python</code></p>
</li>
<li><p><span class="exturl"><a class="exturl__link"   href="https://stackoverflow.com/questions/26288042/error-installing-psycopg2-library-not-found-for-lssl" >ld: library not found for -lssl</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p> <strong>fix:</strong> <code>env LDFLAGS=&quot;-I/usr/local/opt/openssl/include -L/usr/local/opt/openssl/lib&quot; pip install mysql-python | psycopg2</code></p>
</li>
</ol>
<ol start="8">
<li><a href="https://stackoverflow.com/questions/11618898/pg-config-executable-not-found"><code>f&quot;Unable to find &#39;pg_config&#39; file in &#39;&#123;self.pg_config_exe&#125;&#39;&quot;)</code></a></li>
</ol>
<ol start="4">
<li><p>ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</p>
<p> <strong>fix:</strong> <code>pip install -U setuptools</code></p>
</li>
<li><p>UnicodeEncodeError: ‘latin-1’ codec can’t encode characters in position 0-6: ordinal not in range(256)</p>
<p> <strong>fix:</strong> ⬇️</p>
</li>
<li><p>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe7 in position 1: ordinal not in range(128)</p>
<p> <strong>fix:</strong>  <code>注销第三方库的表注释生成代码:/Library/Python/2.7/site-packages/py_mysql2pgsql-0.1.6-py2.7.egg/mysql2pgsql/lib/postgres_writer.py:Line 144-148</code></p>
</li>
<li><p><span class="exturl"><a class="exturl__link"   href="https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation" >yaml.load(input) Deprecation Warning!</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p> <strong>fix:</strong>.  <code>手动修改 py-mysql2pgsql 源码,添加Loader:</code></p>
<p> <code>self.options = load(open(config_file_path),Loader=FullLoader)</code></p>
<p> <code>/Library/Python/2.7/site-packages/py_mysql2pgsql-0.1.6-py2.7.egg/mysql2pgsql/lib/config.py:Line 18</code></p>
</li>
</ol>
<p>其他</p>
<ul>
<li>pgloader : 存在自增索引初始值不对的问题</li>
</ul>
]]></content>
      <tags>
        <tag>laravel</tag>
        <tag>pgsql</tag>
        <tag>mysql</tag>
        <tag>datetime</tag>
        <tag>dateformat</tag>
      </tags>
  </entry>
  <entry>
    <title>golang-sqlx-clickhouse-tuple</title>
    <url>/2020/09/23/golang-sqlx-clickhouse-tuple/</url>
    <content><![CDATA[
        <h1 id="Go查询CH-数据-tuple-转数组"   >
          <a href="#Go查询CH-数据-tuple-转数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#Go查询CH-数据-tuple-转数组" class="headerlink" title="Go查询CH 数据 tuple 转数组"></a>Go查询CH 数据 tuple 转数组</h1>
      
        <h2 id="Go-查询-ClickHouse"   >
          <a href="#Go-查询-ClickHouse" class="heading-link"><i class="fas fa-link"></i></a><a href="#Go-查询-ClickHouse" class="headerlink" title="Go 查询 ClickHouse"></a>Go 查询 ClickHouse</h2>
      <p>业务场景:需要使用 <code>Golang</code> 从 <code>CilckHouse</code> 集群中查询数据,查询的 <code>SQL</code> 以模版的形式存放在 <code>Postgresql</code> 数据库中.<br>使用的 <code>driver</code> 是 <a href="https://github.com/ClickHouse/clickhouse-go/blob/master/examples/sqlx.go"><code>sqlx</code></a></p>
<ul>
<li>使用CH 在私有集群中,报漏的端口只有 <code>http</code> 的 <code>8123</code> 所以需要更改拨号协议</li>
<li>另外如果 <code>ClickHouse</code> 是必要的依赖服务,每次获取查询对象 需要先检查一下 <code>Ping()</code></li>
</ul>
<figure class="highlight golang"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ClickHouse配置参数</span></span><br><span class="line"><span class="keyword">type</span> ClickHouse <span class="keyword">struct</span> &#123;</span><br><span class="line">    Host         <span class="keyword">string</span></span><br><span class="line">    Port         <span class="keyword">int</span></span><br><span class="line">    User         <span class="keyword">string</span></span><br><span class="line">    Password     <span class="keyword">string</span></span><br><span class="line">    DBName       <span class="keyword">string</span></span><br><span class="line">    ReadTimeout  <span class="keyword">uint</span></span><br><span class="line">    WriteTimeout <span class="keyword">uint</span></span><br><span class="line">    Parameters   <span class="keyword">string</span> <span class="comment">// debug=true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// DSN 数据库连接串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ClickHouse)</span> <span class="title">DSN</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="comment">// dsn := fmt.Sprintf(&quot;http://%s:%s@%s:%d/%s?read_timeout=%d&amp;write_timeout=%d&quot;, a.User, a.Password, a.Host, a.Port, a.DBName, a.ReadTimeout, a.WriteTimeout)</span></span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;http://%s:%s@%s:%d/%s&quot;</span>,  a.User, a.Password, a.Host, a.Port, a.DBName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connect, err := sqlx.Open(<span class="string">&quot;clickhouse&quot;</span>, <span class="string">&quot;tcp://127.0.0.1:9000?compress=true&amp;debug=true&quot;</span>)</span><br><span class="line"><span class="comment">//connect, err := sqlx.Open(&quot;clickhouse&quot;, &quot;http://127.0.0.1:8123?compress=true&amp;debug=true&quot;)</span></span><br><span class="line"></span><br><span class="line">checkErr(err)</span><br><span class="line"><span class="keyword">if</span> err := connect.Ping(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> exception, ok := err.(*clickhouse.Exception); ok &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;[%d] %s \n%s\n&quot;</span>, exception.Code, exception.Message, exception.StackTrace)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h2 id="Row-转-Map"   >
          <a href="#Row-转-Map" class="heading-link"><i class="fas fa-link"></i></a><a href="#Row-转-Map" class="headerlink" title="Row 转 Map"></a>Row 转 Map</h2>
      <ul>
<li>因为查询的 SQL 模版较多, 不想定义对应的结构体 :smaile:<br>所以对查询数据做了一个 Row2Map 的处理,这样获取到的数据 直接转换为 JSON 输出到前端<span id="more"></span>

</li>
</ul>
<figure class="highlight golang"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> QueryResult <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RowsToMap</span><span class="params">(rows *sqlx.Rows)</span> []<span class="title">QueryResult</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> list = []QueryResult&#123;&#125; <span class="comment">//返回的切片</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> rows == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">    &#125;</span><br><span class="line">    ts, _ := rows.ColumnTypes()</span><br><span class="line">    columns, _ := rows.Columns()</span><br><span class="line">    columnLength := <span class="built_in">len</span>(columns)</span><br><span class="line">    cache := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, columnLength) <span class="comment">//临时存储每行数据</span></span><br><span class="line">    <span class="keyword">for</span> index, _ := <span class="keyword">range</span> cache &#123;              <span class="comment">//为每一列初始化一个指针</span></span><br><span class="line">        <span class="keyword">var</span> a <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">        cache[index] = &amp;a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        _ = rows.Scan(cache...)</span><br><span class="line">        item := <span class="built_in">make</span>(QueryResult)</span><br><span class="line">        <span class="keyword">for</span> idex, data := <span class="keyword">range</span> cache &#123;</span><br><span class="line">            val := *data.(*<span class="keyword">interface</span>&#123;&#125;) <span class="comment">//取实际类型</span></span><br><span class="line">            item[columns[idex]] = GenarateTuplesToArray(val, ts[idex])</span><br><span class="line">        &#125;</span><br><span class="line">        list = <span class="built_in">append</span>(list, item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h2 id="Tuple-转-数组"   >
          <a href="#Tuple-转-数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#Tuple-转-数组" class="headerlink" title="Tuple 转 数组"></a>Tuple 转 数组</h2>
      <ul>
<li>在返回的数据中出现 前端 Javascrip 取值异常的情况,因为先前的数据接口已经有一版本 nodejs 完成的.<br>所以前端的 数据处理部分已经是完成了的.现在出现了出局结构不一致的情况,具体数据不同体现在:</li>
</ul>
<figure class="highlight"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[&#123;&quot;11111&quot;,&quot;asdasd,aaaa,aaa&quot;&#125;] =&gt; nodejs =&gt; [[&quot;11111&quot;,&quot;asdasd,aaaa,aaa&quot;]] </span><br><span class="line"></span><br><span class="line">[&#123;&quot;11111&quot;,&quot;asdasd,aaaa,aaa&quot;&#125;] =&gt; golang =&gt; [&#123;field0:&quot;11111&quot;,field1:&quot;asdasd,aaaa,aaa&quot;&#125;]</span><br></pre></td></tr></table></div></figure>

<p>最初以为是 SQL 变更了: 排查后发现并没有修改 SQL.但是发现了查询有使用 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/tuple/"><code>Tuple</code></a><br>具体对比数据数据结构后 确认是 由于 node/go 转换元组 <code>Tuple</code> 的操作不同产生的</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> anwsers 字段的查询Tuple</span><br><span class="line">arrayFilter(</span><br><span class="line">  (i,type) <span class="operator">-</span><span class="operator">&gt;</span> (type <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">28</span>)),</span><br><span class="line">  arrayMap(rdata <span class="operator">-</span><span class="operator">&gt;</span> (</span><br><span class="line">    rdata, concat(dictGet(<span class="string">&#x27;ipip4&#x27;</span>, <span class="string">&#x27;country&#x27;</span>, tuple(IPv4StringToNum(rdata))), </span><br><span class="line">    If(province <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;，&#x27;</span>),dictGet(<span class="string">&#x27;ipip4&#x27;</span>,<span class="string">&#x27;province&#x27;</span>,tuple(IPv4StringToNum(rdata))) <span class="keyword">AS</span> province,</span><br><span class="line">    If(city <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;，&#x27;</span>),dictGet(<span class="string">&#x27;ipip4&#x27;</span>,<span class="string">&#x27;city&#x27;</span>,tuple(IPv4StringToNum(rdata))) <span class="keyword">AS</span> city)),</span><br><span class="line">    res.`responseAnswerRrs.rdata`),</span><br><span class="line">  res.`responseAnswerRrs.type`) <span class="keyword">AS</span> answers</span><br></pre></td></tr></table></div></figure>

<p>打印详细的查询结果 及 元组字段 ‘anwsers’ 格式:</p>
<figure class="highlight golang"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ts, _ := rows.ColumnTypes() <span class="comment">// 所有列对象</span></span><br><span class="line"></span><br><span class="line">columnTypes := ts[idex] <span class="comment">// idex 是查询结果中 元组字段的下标,具体可以在 row2map 中获取使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字段类型</span></span><br><span class="line">columnTypes.DatabaseTypeName() = <span class="string">&quot;Array(Tuple(String, String))&quot;</span> </span><br><span class="line">columnTypes.ScanType() = []<span class="keyword">struct</span> &#123;</span><br><span class="line">  Field0 <span class="keyword">string</span></span><br><span class="line">  Field1 <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 database/sql 包中的 ColumnType 类定义 </span></span><br><span class="line"><span class="comment">// ColumnType contains the name and type of a column.</span></span><br><span class="line"><span class="keyword">type</span> ColumnType <span class="keyword">struct</span> &#123;</span><br><span class="line">  name <span class="keyword">string</span> </span><br><span class="line"></span><br><span class="line">  hasNullable       <span class="keyword">bool</span></span><br><span class="line">  hasLength         <span class="keyword">bool</span></span><br><span class="line">  hasPrecisionScale <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">  nullable     <span class="keyword">bool</span></span><br><span class="line">  length       <span class="keyword">int64</span></span><br><span class="line">  databaseType <span class="keyword">string</span></span><br><span class="line">  precision    <span class="keyword">int64</span></span><br><span class="line">  scale        <span class="keyword">int64</span></span><br><span class="line">  scanType     reflect.Type</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后查询出来的数据格式</span></span><br><span class="line">[&#123;<span class="string">&quot;11111&quot;</span>,<span class="string">&quot;asdasd,aaaa,aaa&quot;</span>&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>最后解决方案是: 修改 row2map 函数,将 <code>Array(Tuple(String, String))</code> 手动转换为 <code>[][]string</code>,<br>这样 <code>json.Marshal(d)</code> 处理的时候就会保持原来的数组格式</p>
<p><code>[&#123;&quot;11111&quot;,&quot;asdasd,aaaa,aaa&quot;&#125;] =&gt; golang =&gt; [[&quot;11111&quot;,&quot;asdasd,aaaa,aaa&quot;]]</code></p>

        <h2 id="Code"   >
          <a href="#Code" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code" class="headerlink" title="Code"></a>Code</h2>
      <figure class="highlight golang"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换查询结果中的 Tuple 数据 (aaa,vvv,aaa)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenarateTuplesToArray</span><span class="params">(val <span class="keyword">interface</span>&#123;&#125;, columnTypes *sql.ColumnType)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">  <span class="keyword">if</span> columnTypes.DatabaseTypeName() == <span class="string">&quot;Array(Tuple(String, String))&quot;</span> &#123;</span><br><span class="line">    d := val.([]<span class="keyword">struct</span> &#123;</span><br><span class="line">      Field0 <span class="keyword">string</span></span><br><span class="line">      Field1 <span class="keyword">string</span></span><br><span class="line">    &#125;) <span class="comment">// 按照具体情况来</span></span><br><span class="line">    t := <span class="built_in">make</span>([][]<span class="keyword">string</span>, <span class="built_in">len</span>(d))</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> d &#123;</span><br><span class="line">      t[k] = []<span class="keyword">string</span>&#123;v.Field0, v.Field1&#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>go</tag>
        <tag>sqlx</tag>
        <tag>clickhouse</tag>
        <tag>tuple</tag>
        <tag>row2map</tag>
      </tags>
  </entry>
  <entry>
    <title>html-a-noreferer</title>
    <url>/2020/09/23/html-a-noreferer/</url>
    <content><![CDATA[
        <h1 id="使用-a-标签的问题"   >
          <a href="#使用-a-标签的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用-a-标签的问题" class="headerlink" title="使用 a 标签的问题"></a>使用 a 标签的问题</h1>
      
        <h2 id="HTMl-lt-a-gt-lt-a-gt-noreferrer-noopener-nofollow"   >
          <a href="#HTMl-lt-a-gt-lt-a-gt-noreferrer-noopener-nofollow" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTMl-lt-a-gt-lt-a-gt-noreferrer-noopener-nofollow" class="headerlink" title="HTMl:&lt;a&gt;&lt;/a&gt; noreferrer noopener nofollow"></a>HTMl:&lt;a&gt;&lt;/a&gt; noreferrer noopener nofollow</h2>
      <p>在使用 VSCode 编辑 Html 代码时:提示</p>
<p><code>Line 71:36:  Using target=&quot;_blank&quot; without rel=&quot;noopener noreferrer&quot; is a security risk: see https://mathiasbynens.github.io/rel-noopener  react/jsx-no-target-blank</code></p>
<p>我大概查看了一下相关的<span class="exturl"><a class="exturl__link"   href="https://web.dev/external-anchors-use-rel-noopener/" >漏洞描述</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>,就直接加上了对应的 <a href="https://web.dev/external-anchors-use-rel-noopener/"><code>rel=&quot;noopener noreferrer&quot;</code></a> 属性,以为就这样完事了,没问题!</p>
<hr>
<p>可到了测试环境发现有一个跳转到下载链接的接口一直身份验证不通过<br>就去往下排查了一下,发现身份验证逻辑中有:在指定环境下验证请求头中的 <code>referer</code> 属性是否等于 <code>host</code><br>的逻辑,</p>
<p>然后就去检查了相关的请求头信息,发现问题了: 没有 <code>referer</code> 属性;</p>
<p>最初以为是Nginx代理接口的时候没有转发对于的头信息,经过排查发现并不是.</p>
<p>后来有继续对比线上环境的接口,同样浏览器下同一个接口出现了 线上环境 请求头与 测试环境请求头不一致的问题.<br>重点表现: <code>Request Header</code> 中的 <code>Referrer Policy: no referer</code>.</p>
<p>这才知道: <code>a</code> 标签的 <code>noreferrer</code> 会导致跳转地址的请求重设 <code>Referrer Policy</code></p>

        <h2 id="Referrer-Policy"   >
          <a href="#Referrer-Policy" class="heading-link"><i class="fas fa-link"></i></a><a href="#Referrer-Policy" class="headerlink" title="Referrer Policy:"></a>Referrer Policy:</h2>
      
        <h3 id="策略"   >
          <a href="#策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#策略" class="headerlink" title="策略"></a>策略</h3>
      <ul>
<li><code>No Referrer</code>：任何情况下都不发送Referrer信息</li>
<li><code>No Referrer When Downgrade</code>：仅当协议降级（如HTTPS页面引入HTTP资源）时不发送Referrer信息。是大部分浏览器默认策略。</li>
<li><code>Origin Only</code>：发送只包含host部分的referrer.</li>
<li><code>Origin When Cross-origin</code>：仅在发生跨域访问时发送只包含host的Referer，同域下还是完整的。与Origin Only的区别是多判断了是否Cross-origin。协议、域名和端口都一致，浏览器才认为是同域。</li>
<li><code>Unsafe URL</code>：全部都发送Referrer信息。最宽松最不安全的策略。</li>
</ul>

        <h3 id="使用"   >
          <a href="#使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用" class="headerlink" title="使用"></a>使用</h3>
      <ul>
<li><p><a href="">CSP(Content-Security-Policy)</a></p>
</li>
<li><p>标签</p>
<ul>
<li>meta</li>
<li>a</li>
</ul>
<p>html页面的meta标签指定。</p>
<p><code>&lt;meta name=referrer content=no-referrer&gt;</code></p>
<p>a 标签的referer属性作用的只是当前标签。<br>策略只有三中：不传、只host、都传<br>针对单个链接设置的策略优先级高。</p>
<p><code>&lt;a href=&quot;http://example.com&quot; rel=&quot;noopener noreferrer&quot; &gt;xxx&lt;/a&gt;</code></p>
<pre><code></code></pre></li>
</ul>
<ul>
<li>最后去掉了 a 标签的 rel=”noopener noreferrer” 😊</li>
</ul>
]]></content>
      <tags>
        <tag>html</tag>
        <tag>a</tag>
        <tag>referer</tag>
        <tag>&lt;a&gt;</tag>
      </tags>
  </entry>
  <entry>
    <title>wkhtmltox-docker-golang</title>
    <url>/2020/09/24/wkhtmltox-docker-golang/</url>
    <content><![CDATA[
        <h1 id="使用-wkhtmltopdf-生成用户定时报表-pdf"   >
          <a href="#使用-wkhtmltopdf-生成用户定时报表-pdf" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用-wkhtmltopdf-生成用户定时报表-pdf" class="headerlink" title="使用 wkhtmltopdf 生成用户定时报表.pdf"></a>使用 wkhtmltopdf 生成用户定时报表.pdf</h1>
      
        <h2 id="方案选择"   >
          <a href="#方案选择" class="heading-link"><i class="fas fa-link"></i></a><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h2>
      <ul>
<li><p>要实现用户的定时 <code>PDF</code> 报告发送功能,需要用到 <code>HTML</code>-&gt;<code>PDF</code> 的转换.选的工具是 <a href="https://wkhtmltopdf.org/"><code>wkhtmltopdf</code></a> 使用 <code>golang</code> 的 <code>cmd.Exec(&quot;转换shell命令&quot;)</code> 来做的.</p>
</li>
<li><p>当然也有其他的方式无头浏览器(Headless Chrome) <a href="https://github.com/puppeteer/puppeteer"><code>nodejs-puppter</code></a> / <a href="https://github.com/chromedp/chromedp"><code>golang-chromedp</code></a> | <a href="https://github.com/chromedp/example"><code>example</code></a> , 之前也整理过无头浏览器的使用<a href="/2019/03/05/Golang使用WebSocket-ChromeDP实现实时页面监控/"><code>Golang使用WebSocket+ChromeDP实现实时页面监控</code></a></p>
</li>
</ul>

        <h2 id="Golnag-渲染-HTML"   >
          <a href="#Golnag-渲染-HTML" class="heading-link"><i class="fas fa-link"></i></a><a href="#Golnag-渲染-HTML" class="headerlink" title="Golnag 渲染 HTML"></a>Golnag 渲染 HTML</h2>
      <p>template/template 包使用</p>

        <h2 id="图表渲染"   >
          <a href="#图表渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#图表渲染" class="headerlink" title="图表渲染"></a>图表渲染</h2>
      <p>wkhtmltopdf 使用上存在 JS 语法兼容的问题,目前只支持 ES5.所以在使用图表组件的时候需要确认开发支持的JS语法版本</p>
<ul>
<li>Antv.G2.js</li>
<li>Echart.js</li>
</ul>

        <h2 id="wkhtmltopdf-alpine-镜像-容器化部署"   >
          <a href="#wkhtmltopdf-alpine-镜像-容器化部署" class="heading-link"><i class="fas fa-link"></i></a><a href="#wkhtmltopdf-alpine-镜像-容器化部署" class="headerlink" title="wkhtmltopdf-alpine 镜像,容器化部署"></a>wkhtmltopdf-alpine 镜像,容器化部署</h2>
      <ul>
<li>使用 docker 多段构建 压缩镜像到最小<span id="more"></span>
<figure class="highlight dockerfile"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> surnet/alpine-wkhtmltopdf:<span class="number">3.9</span>-<span class="number">0.12</span>.<span class="number">5</span>-full as wkhtmltopdf</span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.9</span></span><br><span class="line"><span class="comment"># 设置时区为上海</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk del tzdata</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;https://mirror.tuna.tsinghua.edu.cn/alpine/v3.9/main/&quot;</span> &gt; /etc/apk/repositories</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;\n&quot;</span> &gt;&gt; /etc/apk/repositories</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;https://mirror.tuna.tsinghua.edu.cn/alpine/v3.9/community/&quot;</span> &gt;&gt; /etc/apk/repositories</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk upgrade \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add --no-cache bash \</span></span><br><span class="line"><span class="bash">    bash-doc \</span></span><br><span class="line"><span class="bash">    bash-completion \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/cache/apk/* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install dependencies for wkhtmltopdf</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --no-cache \</span></span><br><span class="line"><span class="bash">    libstdc++ \</span></span><br><span class="line"><span class="bash">    libx11 \</span></span><br><span class="line"><span class="bash">    libxrender \</span></span><br><span class="line"><span class="bash">    libxext \</span></span><br><span class="line"><span class="bash">    libssl1.1 \</span></span><br><span class="line"><span class="bash">    ca-certificates \</span></span><br><span class="line"><span class="bash">    fontconfig \</span></span><br><span class="line"><span class="bash">    freetype \</span></span><br><span class="line"><span class="bash">    ttf-dejavu \</span></span><br><span class="line"><span class="bash">    ttf-droid \</span></span><br><span class="line"><span class="bash">    ttf-freefont \</span></span><br><span class="line"><span class="bash">    ttf-liberation \</span></span><br><span class="line"><span class="bash">    ttf-ubuntu-font-family \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add --no-cache --virtual .build-deps \</span></span><br><span class="line"><span class="bash">    msttcorefonts-installer \</span></span><br><span class="line"><span class="bash">    \</span></span><br><span class="line"><span class="bash">    <span class="comment"># Install microsoft fonts</span></span></span><br><span class="line">    &amp;&amp; update-ms-fonts \</span><br><span class="line">    &amp;&amp; fc-cache -f \</span><br><span class="line">    \</span><br><span class="line">    <span class="comment"># Clean up when done</span></span><br><span class="line">    &amp;&amp; rm -rf /tmp/* \</span><br><span class="line">    &amp;&amp; apk del .build-deps</span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy wkhtmltopdf files from docker-wkhtmltopdf image</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=wkhtmltopdf /bin/wkhtmltopdf /bin/wkhtmltopdf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=wkhtmltopdf /bin/wkhtmltoimage /bin/wkhtmltoimage</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=wkhtmltopdf /bin/libwkhtmltox* /bin/</span></span><br></pre></td></tr></table></div></figure>

</li>
</ul>

        <h2 id="wkhtmltopdf-常用参数"   >
          <a href="#wkhtmltopdf-常用参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#wkhtmltopdf-常用参数" class="headerlink" title="wkhtmltopdf 常用参数"></a>wkhtmltopdf 常用参数</h2>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">常规选项 </span><br><span class="line">–allow 允许加载从指定的文件夹中的文件或文件（可重复） </span><br><span class="line">–book* 设置一会打印一本书的时候，通常设置的选项 </span><br><span class="line">–collate 打印多份副本时整理 </span><br><span class="line">–cookie 设置一个额外的cookie（可重复） </span><br><span class="line">–cookie-jar 读取和写入的Cookie，并在提供的cookie jar文件 </span><br><span class="line">–copies 复印打印成pdf文件数（默认为1） </span><br><span class="line">–cover* 使用HTML文件作为封面。它会带页眉和页脚的TOC之前插入 </span><br><span class="line">–custom-header 设置一个附加的HTTP头（可重复） </span><br><span class="line">–debug-javascript 显示的javascript调试输出 </span><br><span class="line">–default-header* 添加一个缺省的头部，与页面的左边的名称，页面数到右边，例如： –header-left ‘[webpage]’ –header-right ‘[page]/[toPage]’ –header-line </span><br><span class="line">–disable-external-links* 禁止生成链接到远程网页 </span><br><span class="line">–disable-internal-links* 禁止使用本地链接 </span><br><span class="line">–disable-javascript 禁止让网页执行JavaScript </span><br><span class="line">–disable-pdf-compression* 禁止在PDF对象使用无损压缩 </span><br><span class="line">–disable-smart-shrinking* 禁止使用WebKit的智能战略收缩，使像素/ DPI比没有不变 </span><br><span class="line">–disallow-local-file-access 禁止允许转换的本地文件读取其他本地文件，除非explecitily允许用 –allow </span><br><span class="line">–dpi 显式更改DPI（这对基于X11的系统没有任何影响） </span><br><span class="line">–enable-plugins 启用已安装的插件（如Flash </span><br><span class="line">–encoding 设置默认的文字编码 </span><br><span class="line">–extended-help 显示更广泛的帮助，详细介绍了不常见的命令开关 </span><br><span class="line">–forms* 打开HTML表单字段转换为PDF表单域 </span><br><span class="line">–grayscale PDF格式将在灰阶产生 </span><br><span class="line">–<span class="built_in">help</span> Display <span class="built_in">help</span> </span><br><span class="line">–htmldoc 输出程序HTML帮助 </span><br><span class="line">–ignore-load-errors 忽略claimes加载过程中已经遇到了一个错误页面 </span><br><span class="line">–lowquality 产生低品质的PDF/ PS。有用缩小结果文档的空间 </span><br><span class="line">–manpage 输出程序手册页 </span><br><span class="line">–margin-bottom 设置页面下边距 (default 10mm) </span><br><span class="line">–margin-left 将左边页边距 (default 10mm) </span><br><span class="line">–margin-right 设置页面右边距 (default 10mm) </span><br><span class="line">–margin-top 设置页面上边距 (default 10mm) </span><br><span class="line">–minimum-font-size 最小字体大小 (default 5) </span><br><span class="line">–no-background 不打印背景 </span><br><span class="line">–orientation 设置方向为横向或纵向 </span><br><span class="line">–page-height 页面高度 (default unit millimeter) </span><br><span class="line">–page-offset* 设置起始页码 (default 1) </span><br><span class="line">–page-size 设置纸张大小: A4, Letter, etc. </span><br><span class="line">–page-width 页面宽度 (default unit millimeter) </span><br><span class="line">–password HTTP验证密码 </span><br><span class="line">–post Add an additional post field (repeatable) </span><br><span class="line">–post-file Post an aditional file (repeatable) </span><br><span class="line">–print-media-type* 使用的打印介质类型，而不是屏幕 </span><br><span class="line">–proxy 使用代理 </span><br><span class="line">–quiet Be less verbose </span><br><span class="line">–read-args-from-stdin 读取标准输入的命令行参数 </span><br><span class="line">–readme 输出程序自述 </span><br><span class="line">–redirect-delay 等待几毫秒为JS-重定向(default 200) </span><br><span class="line">–replace* 替换名称,值的页眉和页脚（可重复） </span><br><span class="line">–stop-slow-scripts 停止运行缓慢的JavaScripts </span><br><span class="line">–title 生成的PDF文件的标题（第一个文档的标题使用，如果没有指定） </span><br><span class="line">–toc* 插入的内容的表中的文件的开头 </span><br><span class="line">–use-xserver* 使用X服务器（一些插件和其他的东西没有X11可能无法正常工作） </span><br><span class="line">–user-style-sheet 指定用户的样式表，加载在每一页中 </span><br><span class="line">–username HTTP认证的用户名 </span><br><span class="line">–version 输出版本信息退出 </span><br><span class="line">–zoom 使用这个缩放因子 (default 1)</span><br><span class="line"></span><br><span class="line">页眉和页脚选项 </span><br><span class="line">–header-center* (设置在中心位置的页眉内容) </span><br><span class="line">–header-font-name* (default Arial) (设置页眉的字体名称) </span><br><span class="line">–header-font-size* (设置页眉的字体大小) </span><br><span class="line">–header-html* (添加一个HTML页眉,后面是网址) </span><br><span class="line">–header-left* (左对齐的页眉文本) </span><br><span class="line">–header-line* (显示一条线在页眉下) </span><br><span class="line">–header-right* (右对齐页眉文本) </span><br><span class="line">–header-spacing* (设置页眉和内容的距离,默认0) </span><br><span class="line">–footer-center* (设置在中心位置的页脚内容) </span><br><span class="line">–footer-font-name* (设置页脚的字体名称) </span><br><span class="line">–footer-font-size* (设置页脚的字体大小default 11) </span><br><span class="line">–footer-html* (添加一个HTML页脚,后面是网址) </span><br><span class="line">–footer-left* (左对齐的页脚文本) </span><br><span class="line">–footer-line* 显示一条线在页脚内容上) </span><br><span class="line">–footer-right* (右对齐页脚文本) </span><br><span class="line">–footer-spacing* (设置页脚和内容的距离) </span><br><span class="line">./wkhtmltopdf –footer-right ‘[page]/[topage]’ http://www.baidu.com baidu.pdf </span><br><span class="line">./wkhtmltopdf –header-center ‘报表’ –header-line –margin-top 2cm –header-line http://192.168.212.139/oma/ oma.pdf </span><br><span class="line">表内容选项中 </span><br><span class="line">–toc-depth* Set the depth of the toc (default 3) </span><br><span class="line">–toc-disable-back-links* Do not link from section header to toc </span><br><span class="line">–toc-disable-links* Do not link from toc to sections </span><br><span class="line">–toc-font-name* Set the font used <span class="keyword">for</span> the toc (default Arial) </span><br><span class="line">–toc-header-font-name* The font of the toc header (<span class="keyword">if</span> <span class="built_in">unset</span> use –toc-font-name) </span><br><span class="line">–toc-header-font-size* The font size of the toc header (default 15) </span><br><span class="line">–toc-header-text* The header text of the toc (default Table Of Contents) </span><br><span class="line">–toc-l1-font-size* Set the font size on level 1 of the toc (default 12) </span><br><span class="line">–toc-l1-indentation* Set indentation on level 1 of the toc (default 0) </span><br><span class="line">–toc-l2-font-size* Set the font size on level 2 of the toc (default 10) </span><br><span class="line">–toc-l2-indentation* Set indentation on level 2 of the toc (default 20) </span><br><span class="line">–toc-l3-font-size* Set the font size on level 3 of the toc (default 8) </span><br><span class="line">–toc-l3-indentation* Set indentation on level 3 of the toc (default 40) </span><br><span class="line">–toc-l4-font-size* Set the font size on level 4 of the toc (default 6) </span><br><span class="line">–toc-l4-indentation* Set indentation on level 4 of the toc (default 60) </span><br><span class="line">–toc-l5-font-size* Set the font size on level 5 of the toc (default 4) </span><br><span class="line">–toc-l5-indentation* Set indentation on level 5 of the toc (default 80) </span><br><span class="line">–toc-l6-font-size* Set the font size on level 6 of the toc (default 2) </span><br><span class="line">–toc-l6-indentation* Set indentation on level 6 of the toc (default 100) </span><br><span class="line">–toc-l7-font-size* Set the font size on level 7 of the toc (default 0) </span><br><span class="line">–toc-l7-indentation* Set indentation on level 7 of the toc (default 120) </span><br><span class="line">–toc-no-dots* Do not use dots, <span class="keyword">in</span> the toc </span><br><span class="line">轮廓选项 </span><br><span class="line">–dump-outline 转储目录到一个文件 </span><br><span class="line">–outline 显示目录(文章中h1,h2来定) </span><br><span class="line">–outline-depth 设置目录的深度（默认为4） </span><br><span class="line">页脚和页眉 </span><br><span class="line">* [page] 由当前正在打印的页的数目代替 </span><br><span class="line">* [frompage] 由要打印的第一页的数量取代 </span><br><span class="line">* [topage] 由最后一页要打印的数量取代 </span><br><span class="line">* [webpage] 通过正在打印的页面的URL替换 </span><br><span class="line">* [section] 由当前节的名称替换 </span><br><span class="line">* [subsection] 由当前小节的名称替换 </span><br><span class="line">* [date] 由当前日期系统的本地格式取代 </span><br><span class="line">* [time] 由当前时间，系统的本地格式取代 </span><br><span class="line">./wkhtmltopdf –footer-right ‘[page]/[topage]’ http://www.baidu.com baidu.pdf </span><br><span class="line">./wkhtmltopdf –header-center ‘报表’ –outline –header-line –margin-top 2cm –header-line http://www.hao123.com/ hao123.pdf </span><br><span class="line">./wkhtmltopdf –header-left ‘[webpage]’ –footer-center ‘测试([page]/[toPage])’ http://www.baidu.com baidu.pdf</span><br></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>wkhtmltox</tag>
        <tag>golang</tag>
        <tag>charset</tag>
        <tag>中文</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-cronjob-自动删除</title>
    <url>/2020/09/27/k8s-cronjob-%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[
        <h1 id="使用-K8s-CronJob-记录"   >
          <a href="#使用-K8s-CronJob-记录" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用-K8s-CronJob-记录" class="headerlink" title="使用 K8s CronJob 记录"></a>使用 K8s CronJob 记录</h1>
      <p>在公司私有集群中部署了一个定时服务,结果一段时间之后产生了 大量的 <code>Unavailable</code> 的 <code>Pods</code>.<br>总结下操作的步骤</p>
<ol>
<li><p>直接在 <code>rancher</code> 服务上创建 <code>CronJob</code>:</p>
<ul>
<li>配置了 镜像地址 , 服务名字,最大失败/成功数量…</li>
</ul>
<p>但结果就是 Pod 无限增长,所以开始另辟蹊径. 通过 yaml 创建 CronJob</p>
</li>
<li><p>初始 <a href="https://kubernetes.io/zh/docs/tasks/job/automated-tasks-with-cron-jobs/"><code>application/job/cronjob.yaml</code></a> </p>
 <figure class="highlight yaml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">            <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">            <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">date;</span> <span class="string">echo</span> <span class="string">Hello</span> <span class="string">from</span> <span class="string">the</span> <span class="string">Kubernetes</span> <span class="string">cluster</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>   执行结果:</p>
<pre><code>- `batch/v1` 不存在 , 当前k8s环境只有 `batch/v1beta1` 🤦‍♂️</code></pre><p>   修改后结果一样,不会自动删除</p>
<span id="more"></span></li>
<li><p>查询涉及 <code>Pod</code> 自动删除的 配置项</p>
<ul>
<li><p><code>ttlSecondsAfterFinished</code> 执行完 过指定时间后 自动删除 <code>Pod</code> :</p>
<p>结果是第一次放错 <code>.spec</code>, 正确路径 <code>.jobTemplate.spec.ttlSecondsAfterFinished</code>.<br>但是使用后还是不OK</p>
</li>
<li><p><code>backoffLimit</code> 允许失败次数;无啥用</p>
</li>
<li><p><code>failedJobsHistoryLimit</code>: 保留失败 <code>Pod</code> 数: 无啥用</p>
</li>
<li><p><code>successfulJobsHistoryLimit</code>: 成功 <code>Pod</code> 数</p>
<p>修改后的 <code>yaml</code>,依然不会自动删除 Pod !</p>
<figure class="highlight yaml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">saas-report-cronjob-wek8</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;0 8 * * 1&quot;</span></span><br><span class="line">  <span class="attr">successfulJobsHistoryLimit:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">failedJobsHistoryLimit:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">ttlSecondsAfterFinished:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">backoffLimit:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">saas-report-cronjon-wek8</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">iiiii:dev</span></span><br><span class="line">            <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">            <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">producer</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">wek_8</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></div></figure>
</li>
</ul>
</li>
<li><p>排查 <code>Pod</code> 状态</p>
<ul>
<li><p>任务 <code>Pod</code> 上的状态 一直都是 <code>NotReady</code><br>. 猜测因为启用了 <code>istio</code> 网关, 其中代理网关一直都是 <code>running</code>. 所以健康检查一直都是 <code>未就绪</code> 的状态,这里 也就不存在执行<code>失败/成功</code>的状态了</p>
</li>
<li><p><code>failedJobsHistoryLimit</code>: 保留失败 <code>Pod</code> 数: 无啥用了</p>
</li>
<li><p><code>successfulJobsHistoryLimit</code>: 成功 <code>Pod</code> 数: 无啥用了</p>
<p>启用 健康检查:也无效,因为代理网关是不会退出的.当任务执行完成后 状态还是会被标记为 <code>NotReady</code></p>
<figure class="highlight yaml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="string">...</span> <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">command:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">producer</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">mth_8</span></span><br><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">    <span class="attr">failureThreshold:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">httpGet:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/metrics</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9900</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">    <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">periodSeconds:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">timeoutSeconds:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">readinessProbe:</span></span><br><span class="line">  <span class="attr">failureThreshold:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/metrics</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9900</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">successThreshold:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
</li>
</ul>
</li>
<li><p>解决思路 通过最大存活时间 <code>activeDeadlineSeconds</code>, 不管 <code>Pod</code> 执行状态.到时间销毁.配置后生效:<code>done</code></p>
</li>
<li><p>后期通过 配置 <code>yaml</code> 指定不启用代理网关,来保证了 <code>Pod</code> 的 <code>PodCompleted</code> 状态的变更,也让上面的配置生效了</p>
</li>
</ol>
<p>总结:</p>
<ul>
<li>文档对照着来,查找相关配置;</li>
<li>Pod 健康状态检查添加:</li>
<li>网关代理 导致的 Terminated/Running = &gt; Unavailable ; Pod NotReady</li>
<li>Pod 的最大存活时间:</li>
</ul>
<p>最终 <code>yaml</code></p>
<figure class="highlight yaml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">saas-report-cronjob-day8</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">schedule:</span> <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line"><span class="attr">successfulJobsHistoryLimit:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">failedJobsHistoryLimit:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">jobTemplate:</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">ttlSecondsAfterFinished:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">activeDeadlineSeconds:</span> <span class="number">172800</span></span><br><span class="line">    <span class="attr">backoffLimit:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">metadata:</span></span><br><span class="line">        <span class="attr">annotations:</span></span><br><span class="line">          <span class="attr">sidecar.istio.io/inject:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">      <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">        <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">saas-report-cronjon-day8</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">report:dev</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">producer</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">day_8</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">              <span class="attr">failureThreshold:</span> <span class="number">100</span></span><br><span class="line">              <span class="attr">httpGet:</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">/metrics</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">9900</span></span><br><span class="line">                <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">              <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">              <span class="attr">periodSeconds:</span> <span class="number">2</span></span><br><span class="line">              <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">              <span class="attr">timeoutSeconds:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">100</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/metrics</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">9900</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>cronJob</tag>
        <tag>ttlSecondsAfterFinished</tag>
        <tag>activeDeadlineSeconds</tag>
        <tag>backoffLimit</tag>
        <tag>自动删除</tag>
        <tag>状态检查</tag>
        <tag>istio</tag>
      </tags>
  </entry>
  <entry>
    <title>post</title>
    <url>/2021/10/14/post/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>golang-heap-prority-queue-max-min-heap</title>
    <url>/2020/10/14/golang-heap-prority-queue-max-min-heap/</url>
    <content><![CDATA[
        <h1 id="golang-容器包中-heap-的使用"   >
          <a href="#golang-容器包中-heap-的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#golang-容器包中-heap-的使用" class="headerlink" title="golang 容器包中 heap 的使用"></a><code>golang</code> 容器包中 <code>heap</code> 的使用</h1>
      <p>原文: <span class="exturl"><a class="exturl__link"   href="https://golang.org/pkg/container/heap/" >https://golang.org/pkg/container/heap/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><code>golang</code> 中提供了可以使用 <a href="https://golang.org/pkg/container/heap/"><code>container/heap</code></a> 操作所有实现了 heap.Interface 类型的 堆数据结构.<br>操作函数:</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">func Fix(h Interface, i int)</span><br><span class="line">func Init(h Interface)</span><br><span class="line">func Pop(h Interface) interface&#123;&#125;</span><br><span class="line">func Push(h Interface, x interface&#123;&#125;)</span><br><span class="line">func Remove(h Interface, i int) interface&#123;&#125;</span><br></pre></td></tr></table></div></figure>

<p>需要实现的接口:</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    sort.Interface</span><br><span class="line">    Push(x <span class="keyword">interface</span>&#123;&#125;) <span class="comment">// add x as element Len()</span></span><br><span class="line">    Pop() <span class="keyword">interface</span>&#123;&#125;   <span class="comment">// remove and return element Len() - 1.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sort.Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// Len is the number of elements in the collection.</span></span><br><span class="line">    Len() <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Less reports whether the element with index i</span></span><br><span class="line">    <span class="comment">// must sort before the element with index j.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If both Less(i, j) and Less(j, i) are false,</span></span><br><span class="line">    <span class="comment">// then the elements at index i and j are considered equal.</span></span><br><span class="line">    <span class="comment">// Sort may place equal elements in any order in the final result,</span></span><br><span class="line">    <span class="comment">// while Stable preserves the original input order of equal elements.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Less must describe a transitive ordering:</span></span><br><span class="line">    <span class="comment">//  - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well.</span></span><br><span class="line">    <span class="comment">//  - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Note that floating-point comparison (the &lt; operator on float32 or float64 values)</span></span><br><span class="line">    <span class="comment">// is not a transitive ordering when not-a-number (NaN) values are involved.</span></span><br><span class="line">    <span class="comment">// See Float64Slice.Less for a correct implementation for floating-point values.</span></span><br><span class="line">    Less(i, j <span class="keyword">int</span>) <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Swap swaps the elements with indexes i and j.</span></span><br><span class="line">    Swap(i, j <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<span id="more"></span>

        <h2 id="堆"   >
          <a href="#堆" class="heading-link"><i class="fas fa-link"></i></a><a href="#堆" class="headerlink" title="堆"></a>堆</h2>
      <ul>
<li>最大堆</li>
</ul>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆-完全二叉树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IntMaxHeap []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntMaxHeap)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(h) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntMaxHeap)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> h[i] &gt; h[j] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntMaxHeap)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; h[i], h[j] = h[j], h[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *IntMaxHeap)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    *h = <span class="built_in">append</span>(*h, x.(<span class="keyword">int</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *IntMaxHeap)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    old := *h</span><br><span class="line">    n := <span class="built_in">len</span>(old)</span><br><span class="line">    x := old[n<span class="number">-1</span>]</span><br><span class="line">    *h = old[:n<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IntHeap []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntHeap)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(h) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntHeap)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> h[i] &lt; h[j] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntHeap)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; h[i], h[j] = h[j], h[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *IntHeap)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    *h = <span class="built_in">append</span>(*h, x.(<span class="keyword">int</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *IntHeap)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    old := *h</span><br><span class="line">    n := <span class="built_in">len</span>(old)</span><br><span class="line">    x := old[n<span class="number">-1</span>]</span><br><span class="line">    *h = old[:n<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>最小堆<br>  修改 <code>Swap(i,j)</code> 函数中的比较逻辑即可</li>
</ul>

        <h2 id="TopK"   >
          <a href="#TopK" class="heading-link"><i class="fas fa-link"></i></a><a href="#TopK" class="headerlink" title="TopK"></a>TopK</h2>
      <ul>
<li>初始化堆</li>
<li>控制容量</li>
<li>翻转输出</li>
</ul>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;container/heap&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TopKHeap []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TopK <span class="keyword">struct</span> &#123;</span><br><span class="line">    TopK    <span class="keyword">int</span>         <span class="comment">// topk</span></span><br><span class="line">    maxHeap *IntMaxHeap <span class="comment">// topk 使用最大堆来实现</span></span><br><span class="line">    <span class="comment">// 先初始化 随机最大堆, 剩下的值 与其中最大的比较,遇到比最大数小 则出队入队操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTopKHeap</span><span class="params">(nums IntMaxHeap, k <span class="keyword">int</span>)</span> *<span class="title">TopK</span></span> &#123;</span><br><span class="line">    t := &amp;TopK&#123;k, &amp;nums&#125;</span><br><span class="line">    heap.Init(t.maxHeap)</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TopK)</span> <span class="title">Push</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> v.(<span class="keyword">int</span>) &lt; (*t.maxHeap)[<span class="number">0</span>] &#123;</span><br><span class="line">        heap.Pop(t.maxHeap)</span><br><span class="line">        heap.Push(t.maxHeap, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TopK)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> heap.Pop(t.maxHeap)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TopK)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.maxHeap.Len()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TopK)</span> <span class="title">Max</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> (*t.maxHeap)[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻转</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TopK)</span> <span class="title">Reversal</span><span class="params">()</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    l := t.maxHeap.Len()</span><br><span class="line">    r := <span class="built_in">make</span>([]<span class="keyword">int</span>, l)</span><br><span class="line">    <span class="keyword">var</span> n IntMaxHeap = *t.maxHeap</span><br><span class="line">    <span class="keyword">for</span> l &gt; <span class="number">0</span> &#123;</span><br><span class="line">        l--</span><br><span class="line">        r[l] = t.Pop().(<span class="keyword">int</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    t.maxHeap = &amp;n</span><br><span class="line">    heap.Init(t.maxHeap)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h2 id="优先级队列"   >
          <a href="#优先级队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2>
      <ul>
<li>消息结构化</li>
<li>优先级字段</li>
<li>更新优先级</li>
</ul>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;container/heap&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆结构的优先级队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息体</span></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">    value    <span class="keyword">string</span></span><br><span class="line">    priority <span class="keyword">int</span></span><br><span class="line">    index    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆</span></span><br><span class="line"><span class="keyword">type</span> PriorityQueue []*Item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p PriorityQueue)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(p) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p PriorityQueue)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> p[i].priority &gt; p[j].priority &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p PriorityQueue)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    p[i], p[j] = p[j], p[i]</span><br><span class="line">    p[i].index = i</span><br><span class="line">    p[j].index = j</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PriorityQueue)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(*p)</span><br><span class="line">    item := x.(*Item)</span><br><span class="line">    item.index = n</span><br><span class="line">    *p = <span class="built_in">append</span>(*p, item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PriorityQueue)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    old := *p</span><br><span class="line">    n := <span class="built_in">len</span>(old)</span><br><span class="line">    item := old[n<span class="number">-1</span>]</span><br><span class="line">    item.index = <span class="number">-1</span></span><br><span class="line">    *p = old[:n<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PriorityQueue)</span> <span class="title">Update</span><span class="params">(item *Item, value <span class="keyword">string</span>, priority <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    item.value = value</span><br><span class="line">    item.priority = priority</span><br><span class="line">    heap.Fix(p, item.index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h2 id="测试"   >
          <a href="#测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#测试" class="headerlink" title="测试"></a>测试</h2>
      <figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;container/heap&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestIntHeap</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    h := &amp;IntHeap&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">    heap.Init(h)</span><br><span class="line">    heap.Push(h, <span class="number">9</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;mininum: %d\n&quot;</span>, heap.Pop(h))</span><br><span class="line">    heap.Push(h, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> h.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d &quot;</span>, heap.Pop(h))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTopKHeap</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    i, k := <span class="number">4</span>, <span class="number">4</span></span><br><span class="line">    h := &amp;IntMaxHeap&#123;<span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">    l := <span class="built_in">len</span>(*h)</span><br><span class="line">    initNum := (*h)[:k]</span><br><span class="line">    topk := NewTopKHeap(initNum, k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i &lt; l &#123;</span><br><span class="line">        topk.Push((*h)[i])</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    topk.Push(<span class="number">8</span>)</span><br><span class="line">    topk.Push(<span class="number">8</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;topk&#x27;s maxnum: %d\n&quot;</span>, topk.Max())</span><br><span class="line">    fmt.Println(topk.Reversal())</span><br><span class="line">    <span class="keyword">for</span> topk.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d &quot;</span>, topk.Pop())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHepPQ</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    items := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">&quot;taskA&quot;</span>: <span class="number">1</span>, <span class="string">&quot;taskB&quot;</span>: <span class="number">2</span>, <span class="string">&quot;taskC&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line">    p := <span class="built_in">make</span>(PriorityQueue, <span class="built_in">len</span>(items))</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> value, priority := <span class="keyword">range</span> items &#123;</span><br><span class="line">        p[i] = &amp;Item&#123;value: value, priority: priority, index: i&#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    heap.Init(&amp;p)</span><br><span class="line">    item := &amp;Item&#123;</span><br><span class="line">        value: <span class="string">&quot;ooo&quot;</span>, priority: <span class="number">4</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    heap.Push(&amp;p, item)</span><br><span class="line">    p.Update(item, item.value, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> p.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">        item := heap.Pop(&amp;p).(*Item)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%.2d:%s\n&quot;</span>, item.priority, item.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>输出结果</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">oomcc:gogin oom$ go <span class="built_in">test</span> -timeout 30s -run ^TestIntHeap$ ./src/learn/heap*.go -v</span><br><span class="line">=== RUN   TestIntHeap</span><br><span class="line">mininum: 1</span><br><span class="line">1 2 3 4 6 7 9 --- PASS: TestIntHeap (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      command-line-arguments  0.007s</span><br><span class="line">oomcc:gogin oom$ go <span class="built_in">test</span> -timeout 30s -run ^TestTopKHeap$ ./src/learn/heap*.go -v</span><br><span class="line">=== RUN   TestTopKHeap</span><br><span class="line">topk s maxnum: 6</span><br><span class="line">[1 2 4 6]</span><br><span class="line">6 4 2 1 --- PASS: TestTopKHeap (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      command-line-arguments  0.007s</span><br><span class="line">oomcc:gogin oom$ go <span class="built_in">test</span> -timeout 30s -run ^TestHepPQ$ ./src/learn/heap*.go -v </span><br><span class="line">=== RUN   TestHepPQ</span><br><span class="line">05:ooo</span><br><span class="line">03:taskC</span><br><span class="line">02:taskB</span><br><span class="line">01:taskA</span><br><span class="line">--- PASS: TestHepPQ (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      command-line-arguments  0.006s</span><br></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>golang</tag>
        <tag>Heap</tag>
        <tag>MinHeap</tag>
        <tag>MaxHeap</tag>
        <tag>PriorityQueue</tag>
        <tag>TopK</tag>
      </tags>
  </entry>
</search>
