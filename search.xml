<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker 使用gosu切换用户</title>
    <url>/2020/09/15/Docker-%E4%BD%BF%E7%94%A8gosu%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<h1 id="容器启动时切换用户gosu执行脚本"><a href="#容器启动时切换用户gosu执行脚本" class="headerlink" title="容器启动时切换用户gosu执行脚本"></a>容器启动时切换用户gosu执行脚本</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>想在小组内部推一下代码检查工具Sonar，申请了容器空间用于部署。在自己本地编译镜像之后推送到公司镜像源之后，发现拉取后启动容器失败了：检查输出日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java.lang.RuntimeException: don<span class="string">&#x27;t run elasticsearch as root.</span></span><br><span class="line"><span class="string">        at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:94)</span></span><br><span class="line"><span class="string">        at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:160)</span></span><br><span class="line"><span class="string">        at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:286)</span></span><br><span class="line"><span class="string">        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35)</span></span><br></pre></td></tr></table></figure>
<p>这就奇怪了，本地构建的镜像，运行都是正常的啊；难道公司容器服务启动的时候会强制以root账户运行？</p>
<h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><blockquote>
<p>本地构建镜像的时候修改 ENDPOINT 脚本 <code>run.sh</code> ；输出当前执行用户 whoami ;确实是  <code>root</code></p>
</blockquote>
<h3 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前置切换用户</span></span><br><span class="line"><span class="keyword">USER</span> sonarqube</span><br><span class="line">ENDPOINT [<span class="string">&quot;run.sh&quot;</span>]</span><br><span class="line"><span class="comment"># 推送，部署还是报错 ES 无法使用 root 账户启动</span></span><br></pre></td></tr></table></figure>

<h3 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改ENDPOINT</span></span><br><span class="line"></span><br><span class="line">ENDPOINT su - sonarqube -s <span class="string">&quot;./run.sh&quot;</span></span><br><span class="line"><span class="comment"># 推送 部署还是错误： 环境变量，账户目录/home/sonarqube(本来就没创建账户目录)都找不到了</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="尝试3【√】"><a href="#尝试3【√】" class="headerlink" title="尝试3【√】"></a>尝试3【√】</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改镜像 添加 gosu / su-exec (sonarqube 官方脚本有这个)</span></span><br><span class="line">RUN apt update &amp;&amp; apt install gosu -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时修改 run.sh 脚本</span></span><br><span class="line"><span class="built_in">exec</span> gosu sonarqube <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送&amp;启动，OK</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>ELK:Nginx日志记录</title>
    <url>/2020/09/15/ELK-Nginx%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><ul>
<li>目的：需要统计推广带来的转化效果</li>
<li>思路：通过统计 Nginx 日志，来分析不同渠道带来的访问量的变化。（可能再通过新增用户比去计算下转化率，不确定是不是需要这个值）</li>
</ul>
<h1 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h1><ul>
<li>修改 Nginx 日志格式为JSON ，通过 Qbus 收集 Nginx 的访问日志到消息队列。再使用 Logstash 同步到 ES 中；接着创建 Kibana 索引查询模板，筛选展示数据<ul>
<li>Qbus</li>
<li>Elasticsearch</li>
<li>Kibana</li>
<li>Logstash</li>
<li>Nginx 日志</li>
</ul>
</li>
</ul>
<h2 id="修改-Nginx-日志格式"><a href="#修改-Nginx-日志格式" class="headerlink" title="修改 Nginx 日志格式"></a>修改 Nginx 日志格式</h2><blockquote>
<p>日志格式修改 是为了 Logstash 同步方便，可以自动创建索引 mapping 。 在Hulk 平台修改配置。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log_format logstash &#39;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#39;</span><br><span class="line">               &#39;&quot;@version&quot;:&quot;1&quot;,&#39;</span><br><span class="line">               &#39;&quot;request_id&quot;:&quot;$request_id&quot;,&#39;</span><br><span class="line">               &#39;&quot;client&quot;:&quot;$remote_addr&quot;,&#39;</span><br><span class="line">               &#39;&quot;url&quot;:&quot;$uri&quot;,&#39;</span><br><span class="line">               &#39;&quot;status&quot;:&quot;$status&quot;,&#39;</span><br><span class="line">               &#39;&quot;domain&quot;:&quot;$host&quot;,&#39;</span><br><span class="line">               &#39;&quot;host&quot;:&quot;$server_addr&quot;,&#39;</span><br><span class="line">               &#39;&quot;server_name&quot;:&quot;$server_name&quot;,&#39;</span><br><span class="line">               &#39;&quot;request&quot;:&quot;$request&quot;,&#39;</span><br><span class="line">               &#39;&quot;request_length&quot;:&quot;$request_length&quot;,&#39;</span><br><span class="line">               &#39;&quot;http_x_forwarded_for&quot;:&quot;$http_x_forwarded_for&quot;,&#39;</span><br><span class="line">               &#39;&quot;http_x_real_ip&quot;:&quot;$http_x_real_ip&quot;,&#39;</span><br><span class="line">               &#39;&quot;size&quot;:$body_bytes_sent,&#39;</span><br><span class="line">               &#39;&quot;rsp_time&quot;:$request_time,&#39;</span><br><span class="line">               &#39;&quot;referer&quot;: &quot;$http_referer&quot;,&#39;</span><br><span class="line">               &#39;&quot;ua&quot;: &quot;$http_user_agent&quot;&#39;</span><br><span class="line">&#39;&#125;&#39;;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 日志内容</span><br><span class="line"></span><br><span class="line">  $request_length       请求长度（包括请求行，标题和请求正文）</span><br><span class="line">  $request_method       请求的动作（get或者post）</span><br><span class="line">  $request_time         请求时间(以毫秒为单位的请求处理时间（1.3.9,1.2.6）; 从客户端读取第一个字节后经过的时间)</span><br><span class="line">  $request_url          完整的原始请求URL（带参数）  </span><br><span class="line">  $scheme               返回用的协议，是http还是https</span><br><span class="line">  $remote_addr          客户端的地址</span><br><span class="line">  $remote_port          client port</span><br><span class="line">  $remote_user          基本认证的身份</span><br><span class="line">  $server_addr          服务端的地址</span><br><span class="line">  $server_port          server port</span><br><span class="line">  $server_protocol      使用的http的版本“HTTP&#x2F;1.0”, “HTTP&#x2F;1.1”, or “HTTP&#x2F;2.0”</span><br><span class="line">  $status               回应状态</span><br><span class="line">  $body_bytes_sent      给你主体发送的字节</span><br><span class="line">  $http_refrere         请求的上个页面来至于哪里</span><br><span class="line">  $http_x_forwarded_for 代理服务器的IP地址</span><br><span class="line">  $http_user_agent      浏览器的型号</span><br><span class="line">  $uri                  除去域名和协议的URL</span><br><span class="line"></span><br><span class="line">  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;upstream 模块所支持的变量&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">  $upstream_addr            处理请求的上游服务器的地址</span><br><span class="line">  $upstream_cache_status    表示是否命中缓存</span><br><span class="line">  $upstream_status          上游服务器的响应状态码</span><br><span class="line">  $upstream_response_time   上游服务器的响应时间，精度到毫秒</span><br><span class="line">  $upstream_http_$HEADER    HTTP的头部，如upstream_http_host</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="日志收集"><a href="#日志收集" class="headerlink" title="日志收集"></a>日志收集</h3><blockquote>
<p>Qbus 日志收集服务：本质上还是使用 Logstash 收集 Nginx 日志文件，导入到 kafka</p>
</blockquote>
<ul>
<li>指定收集路径，日志量，保留期限</li>
<li>指定生产机</li>
<li>指定消费机</li>
</ul>
<h3 id="日志同步到ES"><a href="#日志同步到ES" class="headerlink" title="日志同步到ES"></a>日志同步到ES</h3><blockquote>
<p>使用 Logstash 同步；kafka 做 Input , ES 做 Output;</p>
</blockquote>
<ul>
<li>logstash 2.4 -&gt; logstash 5.0 + ; 配置项有修改：<a href="https://www.elastic.co/guide/en/logstash/5.2/plugins-inputs-kafka.html">文档</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@p34108v baqianxin]# cat &#x2F;home&#x2F;logstash&#x2F;jiagu_nginx_log.conf </span><br><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        bootstrap_servers &#x3D;&gt; &quot;10.209.xxx.xxx:xxxxx&quot;</span><br><span class="line">        group_id &#x3D;&gt; &quot;jiagu_web_log_es&quot;</span><br><span class="line">        topics &#x3D;&gt; [&quot;jiagu-web-nginx&quot;]</span><br><span class="line">        codec &#x3D;&gt; json &#123;  charset &#x3D;&gt; &quot;GB2312&quot;&#125;</span><br><span class="line">        consumer_threads &#x3D;&gt; 6  # number (optional)， default: 1</span><br><span class="line">        decorate_events &#x3D;&gt; false # boolean (optional)， default: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">    mutate &#123;</span><br><span class="line">      convert &#x3D;&gt; [ &quot;status&quot;,&quot;integer&quot; ]</span><br><span class="line">      convert &#x3D;&gt; [ &quot;size&quot;,&quot;integer&quot; ]</span><br><span class="line">      convert &#x3D;&gt; [ &quot;rsp_time&quot;,&quot;float&quot;]</span><br><span class="line">      convert &#x3D;&gt; [ &quot;upstreatime&quot;,&quot;float&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if [client] !&#x3D; &quot;-&quot; &#123;</span><br><span class="line">        geoip &#123;</span><br><span class="line">            source &#x3D;&gt; &quot;client&quot;</span><br><span class="line">            target &#x3D;&gt; &quot;geoip&quot;</span><br><span class="line">            add_field &#x3D;&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][longitude]&#125;&quot; ]</span><br><span class="line">            add_field &#x3D;&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][latitude]&#125;&quot;  ]</span><br><span class="line">        &#125;</span><br><span class="line">        mutate &#123;</span><br><span class="line">            convert &#x3D;&gt; [ &quot;[geoip][coordinates]&quot;, &quot;float&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts &#x3D;&gt; [&quot;10.216.xxx.xxx:xxxxx&quot;]</span><br><span class="line">        index &#x3D;&gt; &quot;jiagu_nginx_log_%&#123;+YYYY.MM&#125;&quot;</span><br><span class="line">        document_type &#x3D;&gt; &quot;nginx_log&quot;</span><br><span class="line">        user &#x3D;&gt; &quot;pxxxmgdxxcxxxxx_w&quot;</span><br><span class="line">        password &#x3D;&gt; &quot;xxxxxxxxxxxx&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Kibana-筛选展示"><a href="#Kibana-筛选展示" class="headerlink" title="Kibana 筛选展示"></a>Kibana 筛选展示</h3><ul>
<li>按照来源IP 转换为坐标信息统计区域热力图</li>
<li>按照访问地址 统计访问量最大的接口或页面</li>
<li>按照每小时日志量来判断高峰期出现情况</li>
<li>…….</li>
</ul>
<blockquote>
<p>创建查询索引；具体使用查阅 (kibana 官方文档)[<a href="https://www.elastic.co/guide/en/kibana/index.html]">https://www.elastic.co/guide/en/kibana/index.html]</a></p>
</blockquote>
<h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><p>问题1：input-kafka 配置项错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[baqianxin@p34108v ~]$ &#x2F;usr&#x2F;share&#x2F;logstash&#x2F;bin&#x2F;logstash -f ~&#x2F;jiagu_nginx_log.conf </span><br><span class="line">WARNING: Could not find logstash.yml which is typically located in $LS_HOME&#x2F;config or &#x2F;etc&#x2F;logstash. You can specify the path using --path.settings. Continuing using the defaults</span><br><span class="line">Could not find log4j2 configuration at path &#x2F;usr&#x2F;share&#x2F;logstash&#x2F;config&#x2F;log4j2.properties. Using default config which logs to console</span><br><span class="line">14:46:04.961 [main] FATAL logstash.runner - An unexpected error occurred! &#123;:error&#x3D;&gt;#&lt;ArgumentError:</span><br><span class="line"> Path &quot;&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;data&quot; must be a writable directory. </span><br><span class="line"> It is not writable.&gt;,</span><br><span class="line"> ....</span><br><span class="line"></span><br><span class="line">[logstash@p34108v baqianxin]$ &#x2F;usr&#x2F;share&#x2F;logstash&#x2F;bin&#x2F;logstash -f  &#x2F;home&#x2F;baqianxin&#x2F;jiagu_nginx_log.conf </span><br><span class="line">WARNING: Could not find logstash.yml which is typically located in $LS_HOME&#x2F;config or &#x2F;etc&#x2F;logstash. You can specify the path using --path.settings. Continuing using the defaults</span><br><span class="line">Could not find log4j2 configuration at path &#x2F;usr&#x2F;share&#x2F;logstash&#x2F;config&#x2F;log4j2.properties. Using default config which logs to console</span><br><span class="line">14:53:39.151 [LogStash::Runner] INFO  logstash.agent - No persistent UUID file found. Generating new UUID &#123;:uuid&#x3D;&gt;&quot;72c79b50-3410-4474-bd70-a4a5d003d95e&quot;, :path&#x3D;&gt;&quot;&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;data&#x2F;uuid&quot;&#125;</span><br><span class="line">14:53:39.264 [LogStash::Runner] INFO  logstash.agent - No config files found in path &#123;:path&#x3D;&gt;&quot;&#x2F;home&#x2F;baqianxin&#x2F;jiagu_nginx_log.conf&quot;&#125;</span><br><span class="line">14:53:39.269 [LogStash::Runner] ERROR logstash.agent - failed to fetch pipeline configuration &#123;:message&#x3D;&gt;&quot;No config files found: &#x2F;home&#x2F;baqianxin&#x2F;jiagu_nginx_log.conf. Can you make sure this path is a logstash config file?&quot;&#125;</span><br><span class="line"></span><br><span class="line">解决：logstash5.0升级之后配置项修改了</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>问题2：logstash 常见自定义索引模板，需要根据版本修改模板内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;template&quot;</span> <span class="string">:</span> <span class="string">&quot;jiagu_nginx_log-*&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> <span class="string">:</span> <span class="number">50001</span>,</span><br><span class="line">  <span class="string">&quot;settings&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">    <span class="string">&quot;index.refresh_interval&quot;</span> <span class="string">:</span> <span class="string">&quot;5s&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">    <span class="string">&quot;_default_&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">      <span class="string">/*</span> <span class="string">***_all</span> <span class="string">再6.0被废弃***</span> <span class="string">*/</span></span><br><span class="line">      <span class="string">&quot;_all&quot;</span> <span class="string">:</span> &#123;<span class="string">&quot;enabled&quot;</span> <span class="string">:</span> <span class="literal">true</span>, <span class="string">&quot;norms&quot;</span> <span class="string">:</span> <span class="literal">false</span>&#125;,</span><br><span class="line">      <span class="string">&quot;dynamic_templates&quot;</span> <span class="string">:</span> [ &#123;</span><br><span class="line">        <span class="string">&quot;message_field&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">          <span class="string">&quot;path_match&quot;</span> <span class="string">:</span> <span class="string">&quot;message&quot;</span>,</span><br><span class="line">          <span class="string">&quot;match_mapping_type&quot;</span> <span class="string">:</span> <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="string">&quot;mapping&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span> <span class="string">:</span> <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="string">&quot;norms&quot;</span> <span class="string">:</span> <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="string">&quot;string_fields&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">          <span class="string">&quot;match&quot;</span> <span class="string">:</span> <span class="string">&quot;*&quot;</span>,</span><br><span class="line">          <span class="string">&quot;match_mapping_type&quot;</span> <span class="string">:</span> <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="string">&quot;mapping&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span> <span class="string">:</span> <span class="string">&quot;text&quot;</span>, <span class="string">&quot;norms&quot;</span> <span class="string">:</span> <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;fields&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">              <span class="string">&quot;keyword&quot;</span> <span class="string">:</span> &#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;keyword&quot;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; ],</span><br><span class="line">      <span class="string">&quot;properties&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">         <span class="string">/*</span> <span class="string">***include_in_all</span> <span class="string">再6.0被废弃***</span> <span class="string">*/</span></span><br><span class="line">        <span class="string">&quot;@timestamp&quot;</span><span class="string">:</span> &#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;date&quot;</span>, <span class="attr">&quot;include_in_all&quot;:</span> <span class="literal">false</span> &#125;,</span><br><span class="line">        <span class="string">&quot;@version&quot;</span><span class="string">:</span> &#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;keyword&quot;</span>, <span class="attr">&quot;include_in_all&quot;:</span> <span class="literal">false</span> &#125;,</span><br><span class="line">        <span class="string">&quot;geoip&quot;</span>  <span class="string">:</span> &#123;</span><br><span class="line">          <span class="attr">&quot;dynamic&quot;:</span> <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;properties&quot;</span> <span class="string">:</span> &#123;</span><br><span class="line">            <span class="attr">&quot;ip&quot;:</span> &#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;ip&quot;</span> &#125;,</span><br><span class="line">            <span class="string">&quot;location&quot;</span> <span class="string">:</span> &#123; <span class="string">&quot;type&quot;</span> <span class="string">:</span> <span class="string">&quot;geo_point&quot;</span> &#125;,</span><br><span class="line">            <span class="string">&quot;latitude&quot;</span> <span class="string">:</span> &#123; <span class="string">&quot;type&quot;</span> <span class="string">:</span> <span class="string">&quot;half_float&quot;</span> &#125;,</span><br><span class="line">            <span class="string">&quot;longitude&quot;</span> <span class="string">:</span> &#123; <span class="string">&quot;type&quot;</span> <span class="string">:</span> <span class="string">&quot;half_float&quot;</span> &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>DNS 解析keywords</title>
    <url>/2020/09/15/DNS-%E8%A7%A3%E6%9E%90keywords/</url>
    <content><![CDATA[<h1 id="DNS-解析keywords"><a href="#DNS-解析keywords" class="headerlink" title="DNS 解析keywords"></a>DNS 解析keywords</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(Client)--&gt;B(Local DNS)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Client --&gt; hosts文件 </span><br><span class="line">--&gt; DNS Service Local Cache --&gt; DNS Server (recursion递归查看本地配置的解析文件) </span><br><span class="line">--&gt; Server Cache </span><br><span class="line">--&gt; iteration(迭代) --&gt; 根 --&gt; 顶级域名DNS --&gt; 二级域名DNS…</span><br><span class="line">最终本地dns查看结果后返回给客户端</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>DNS 解析，若缓存命中就会直接返回缓存结果，不再进行递归DNS查询</li>
</ul>
</blockquote>
<p><strong>缓存</strong></p>
<ul>
<li>DNS解析缓存数据，在递归获取真实 访问IP之后更新</li>
</ul>
<p><strong>递归</strong></p>
<ul>
<li>从缓存数据中无法获取目的地IP，则开始递归查询各级域名服务器，获取最终IP<ul>
<li>根域名服务器</li>
<li>顶级域名服务器</li>
<li><strong>权威</strong> 域名服务器</li>
</ul>
</li>
</ul>
<p><strong>权威</strong></p>
<ul>
<li>域名对应的真实IP存储节点，由权威服务器选择返回域名对应的真实且最合适的IP</li>
</ul>
<p><strong>Q.域名劫持</strong></p>
<ul>
<li>并对终端用户的 Local DNS 进行篡改，指向伪造的 Local DNS ，返回错误的 IP 信息</li>
<li>监听用户的域名解析请求，伪造的 DNS 解析响应传递给用户</li>
<li><strong>DNS缓存污染</strong> ，Local DNS缓存数据被修改了</li>
</ul>
<p><strong>Q.精准调度</strong></p>
<ul>
<li>区域</li>
<li>运营商</li>
</ul>
<blockquote>
<p>除了解析转发对调度精准性带来的影响外，Local DNS的布署情况同样影响着域名智能解析的精准性。</p>
</blockquote>
<p><strong>Q.DNS解析服务耗时</strong></p>
<ul>
<li>DNS服务部署不合理导致的解析域名耗时</li>
</ul>
<p><strong>Q.权威服务数据更新滞后</strong></p>
<ul>
<li>域名IP变更，主要发生在权威服务上，同步到全网DNS缓存延迟严重</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Gitlab CI/CD 集成 SonarQube 扫描服务</title>
    <url>/2020/09/15/Gitlab-CI-CD-%E9%9B%86%E6%88%90-SonarQube-%E6%89%AB%E6%8F%8F%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Gitlab-CI-CD-集成-SonarQube-扫描服务"><a href="#Gitlab-CI-CD-集成-SonarQube-扫描服务" class="headerlink" title="Gitlab CI/CD 集成 SonarQube 扫描服务"></a>Gitlab CI/CD 集成 SonarQube 扫描服务</h1><p>[TOC]</p>
<pre><code>环境：Docker

gitlab
gitlab-runner
sonarqube
postgresql</code></pre><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sonar-scanner</span></span><br><span class="line"><span class="attr">sonar:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">sonar-scanner</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar-scanner</span> </span><br><span class="line">      <span class="string">-Dsonar.projectKey=cd_demo</span> </span><br><span class="line">      <span class="string">-Dsonar.sources=.</span> </span><br><span class="line">      <span class="string">-Dsonar.host.url=http://10.18.27.80:9823</span> </span><br><span class="line">      <span class="string">-Dsonar.login=a138bc0d36c7130bb30aebbaffbc44148b6ab8e4</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>



<h2 id="Sonar-服务"><a href="#Sonar-服务" class="headerlink" title="Sonar 服务"></a>Sonar 服务</h2><ul>
<li><a href="http://note.youdao.com/noteshare?id=61644a0153db0c34075be66430fbe3c4">SonarQube 代码检查服务部署</a></li>
</ul>
<h3 id="Sonar-集成-GitLab"><a href="#Sonar-集成-GitLab" class="headerlink" title="Sonar 集成 GitLab"></a>Sonar 集成 GitLab</h3><ul>
<li>admin 安装 git 插件 <code>Administration</code>-&gt;<code>marketpalce</code>-&gt; <code>search git</code>-&gt;<code>restart server</code></li>
<li><code>ALM Intergrations</code><br><img src="https://note.youdao.com/yws/api/personal/file/E6645A1C4C6E47B78402FED13B5F369A?method=download&shareKey=814d1fda2ad408c56016122cef5c90fa" alt="sonar-gitlab"></li>
<li><code>Gitlab Application</code> <code>Token-Secret</code><br><img src="https://note.youdao.com/yws/api/personal/file/4DE448654E9F41D7A1CC7AE6A8E375CF?method=download&shareKey=90a053673cc128ed3be7b9cf566b5bc6" alt="Gitlab Application T-S"></li>
</ul>
<h2 id="Gitlab-runner-服务"><a href="#Gitlab-runner-服务" class="headerlink" title="Gitlab-runner 服务"></a>Gitlab-runner 服务</h2><ul>
<li>构建 <code>gitlab-runner</code> 镜像，集成 <code>node</code> ,<code>sonar-scanner</code></li>
<li>注册 <code>Runner</code> ：<ul>
<li><code>gitlab-runner</code> <code>register</code></li>
<li>输入 <code>gitlab-host</code></li>
<li>输入 <code>runner-token</code></li>
<li>输入 <code>tag</code></li>
<li>选择执行方式 <code>shell</code></li>
</ul>
</li>
<li>开启 <code>Runner</code> 不匹配 <code>tag</code> 执行,在 <code>CI/CD</code> -&gt; <code>runner</code> 的设置里</li>
</ul>
<p><img src="https://note.youdao.com/yws/api/personal/file/B4C37DC2CA36420180D3CC8C00A1DC4D?method=download&shareKey=d17249b1446369fff0a6912c6f824eb7" alt="注册"></p>
<hr>
<h3 id="Gitlab-runner-容器编排"><a href="#Gitlab-runner-容器编排" class="headerlink" title="Gitlab-runner 容器编排"></a>Gitlab-runner 容器编排</h3><pre><code>docker-compose.yml</code></pre><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">runner:</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">&#x27;gitlab-runner&#x27;</span></span><br><span class="line">  <span class="attr">build:</span> <span class="string">../../server/gitlab-runner/</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;8093:8093&#x27;</span></span><br><span class="line">  <span class="comment"># volumes:</span></span><br><span class="line">  <span class="comment">#   - &#x27;$GITLAB_HOME/gitlab-runner/config:/etc/gitlab-runner&#x27;</span></span><br><span class="line">  <span class="comment">#   - &#x27;/var/run/docker.sock:/var/run/docker.sock&#x27;</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">&#x27;gitlab/gitlab-ee:latest&#x27;</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">hostname:</span> <span class="string">&#x27;gitlab.example.com&#x27;</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">external_url</span> <span class="string">&#x27;http://gitlab.example.com:8929&#x27;</span></span><br><span class="line">      <span class="string">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]</span> <span class="string">=</span> <span class="number">2224</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;8929:8929&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;2224:22&#x27;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;$GITLAB_HOME/config:/etc/gitlab&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>gitlab-runner/Dockerfile</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM gitlab&#x2F;gitlab-runner:latest</span><br><span class="line"></span><br><span class="line">LABEL MAINTAINER&#x3D;baqianxin@360.cn</span><br><span class="line"></span><br><span class="line">RUN export LANG&#x3D;en_US.UTF-8  &amp;&amp; export LANGUAGE&#x3D;en_US</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp;  apt-get  install -y  nodejs vim unzip </span><br><span class="line">RUN cd &#x2F;opt &amp;&amp; \ </span><br><span class="line">wget https:&#x2F;&#x2F;binaries.sonarsource.com&#x2F;Distribution&#x2F;sonar-scanner-cli&#x2F;sonar-scanner-cli-4.0.0.1744-linux.zip &amp;&amp; \</span><br><span class="line">unzip sonar-scanner-cli-4.0.0.1744-linux.zip &amp;&amp; \ </span><br><span class="line">mv sonar-scanner-4.0.0.1744-linux sonar-scanner</span><br><span class="line"></span><br><span class="line">RUN  ln -s &#x2F;opt&#x2F;sonar-scanner&#x2F;bin&#x2F;sonar-scanner &#x2F;usr&#x2F;bin&#x2F;sonar-scanner &amp;&amp; sonar-scanner -v</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h3><ul>
<li>系统语言需设置 LCALL LANGUAGE LANG=en_US.UTF-8</li>
</ul>
<pre><code>[submodule &quot;golang/example&quot;]
    active = true
    url = git@github.com:baqianxin/examples.git
[submodule &quot;spider/chineseocr_lite&quot;]
    url = git@github.com:baqianxin/chineseocr_lite.git
    active = true</code></pre>]]></content>
  </entry>
  <entry>
    <title>Go:Web接口实时限流</title>
    <url>/2020/09/15/Go-Web%E6%8E%A5%E5%8F%A3%E5%AE%9E%E6%97%B6%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<h1 id="Golang-接口实时限流功能"><a href="#Golang-接口实时限流功能" class="headerlink" title="Golang 接口实时限流功能"></a>Golang 接口实时限流功能</h1><h2 id="实现需求"><a href="#实现需求" class="headerlink" title="实现需求"></a>实现需求</h2><p> 对于同一IP，同一APP包名的请求，每小时只允许100次</p>
<h2 id="方案逻辑"><a href="#方案逻辑" class="headerlink" title="方案逻辑"></a>方案逻辑</h2><p> 1.自定义限流中间件，对需要限流的接口做监听 </p>
<p> 2.使用指定参数生成唯一Key,记录请求频率</p>
<p> 3.若请求时间超过key的有效时间则重新计数（！是否触发惩罚操作，更新有效时间为2小时）</p>
<p> 4.复杂逻辑-结合业务数据限流-指定设备ID|指定…</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">mux.Use(middleware.LimitRate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 限流中间件</span></span><br><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/md5&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/garyburd/redigo/redis&quot;</span></span><br><span class="line">	<span class="string">&quot;jiagu-user-service/internal/captcha/common&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RequestLimitService <span class="keyword">struct</span> &#123;</span><br><span class="line">	Interval <span class="keyword">int</span></span><br><span class="line">	MaxCount <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置过期时间 设置频率数值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRequestLimitService</span><span class="params">(interval <span class="keyword">int</span>, maxCnt <span class="keyword">int</span>)</span> *<span class="title">RequestLimitService</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> common.IsDev() &#123;</span><br><span class="line">		interval = interval / <span class="number">10</span></span><br><span class="line">		maxCnt = maxCnt / <span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">	reqLimit := &amp;RequestLimitService&#123;</span><br><span class="line">		Interval: interval,</span><br><span class="line">		MaxCount: maxCnt,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> reqLimit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(reqLimit *RequestLimitService)</span> <span class="title">IsAvailable</span><span class="params">(r *http.Request)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="comment">// 获取必要的验证参数// IP  // pn  // path /api/v1/auth</span></span><br><span class="line">	_ = r.ParseForm()</span><br><span class="line">	ip := r.RemoteAddr</span><br><span class="line">	pn := r.Form.Get(<span class="string">&quot;pn&quot;</span>)</span><br><span class="line">	path := r.RequestURI</span><br><span class="line">	<span class="keyword">if</span> path == common.API_PATH_V1_AUTH &#123;</span><br><span class="line">		limitRateKey := Md5V(ip + pn)</span><br><span class="line">		c := reqLimit.GetLimitCountCache(common.REDIS_LIMIT_RATE_PREFIX + limitRateKey)</span><br><span class="line">		<span class="keyword">return</span> c &lt; reqLimit.MaxCount</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(reqLimit *RequestLimitService)</span> <span class="title">GetLimitCountCache</span><span class="params">(limitRateKeyCount <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	redisCw := RedisW.Get()</span><br><span class="line">	redisCr := RedisW.Get()</span><br><span class="line">	<span class="keyword">defer</span> redisCr.Close()</span><br><span class="line">	<span class="keyword">defer</span> redisCw.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> c = <span class="number">1</span></span><br><span class="line">	<span class="comment">//检查Key 存在与否</span></span><br><span class="line">	isKeyEx, err := redis.Bool(redisCr.Do(<span class="string">&quot;EXISTS&quot;</span>, limitRateKeyCount))</span><br><span class="line"></span><br><span class="line">	CheckErr(err, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> isKeyEx &#123;</span><br><span class="line">		_, _ = redisCw.Do(<span class="string">&quot;INCR&quot;</span>, limitRateKeyCount)</span><br><span class="line">		c, _ = redis.Int(redisCr.Do(<span class="string">&quot;GET&quot;</span>, limitRateKeyCount))</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		_, err = redisCw.Do(<span class="string">&quot;SET&quot;</span>, limitRateKeyCount, <span class="number">1</span>, <span class="string">&quot;EX&quot;</span>, reqLimit.Interval)</span><br><span class="line">		CheckErr(err, <span class="literal">false</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RequestLimit = NewRequestLimitService(common.REDIS_LIMIT_RATE_EXPIRE, common.API_LIMIT_RATE_NUM)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Md5V</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	h := md5.New()</span><br><span class="line">	h.Write([]<span class="keyword">byte</span>(str))</span><br><span class="line">	<span class="keyword">return</span> hex.EncodeToString(h.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LimitRate</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> RequestLimit.IsAvailable(r) &#123;</span><br><span class="line">			next.ServeHTTP(w, r)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			http.Error(w, http.StatusText(http.StatusTooManyRequests), http.StatusTooManyRequests)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>Golang API LimitRate</tag>
      </tags>
  </entry>
  <entry>
    <title>Go:Web服务日志记录</title>
    <url>/2020/09/15/Go-Web%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="GoWeb-服务日志管理"><a href="#GoWeb-服务日志管理" class="headerlink" title="GoWeb 服务日志管理"></a>GoWeb 服务日志管理</h1><h2 id="前情"><a href="#前情" class="headerlink" title="前情"></a>前情</h2><p>最新使用 Go 语言开发了一个滑动验证码 SDK 的服务端，提供的接口都具备基础功能了，但是业务逻辑日志以及请求日志没有一个好的记录方式，而且使用的容器服务，每次发布都会刷新容器，文件类的日志都会丢失。因此查了一下常见的Go  Log 处理方式。发现 logrus  包使用的人不少，感觉也很好使用毕竟带 hook （带钩子的都是工具人…）</p>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul>
<li>记录所有请求日志</li>
<li>记录业务逻辑关键信息</li>
<li>方便查询检索分析</li>
</ul>
<h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><ol>
<li>自定义日志服务中间件，</li>
<li>使用 ES 存储日志数据</li>
<li>过滤接口检查的调用日志</li>
<li>ES使用时间索引</li>
<li>handler路由使用中间件拦截记录请求日志Mux.Use(m-)</li>
<li>逻辑日志纪录使用全局Loges 对象</li>
</ol>
<h3 id="Go项目-使用ES"><a href="#Go项目-使用ES" class="headerlink" title="Go项目-使用ES"></a>Go项目-使用ES</h3><h3 id="自定义日志收集中间件"><a href="#自定义日志收集中间件" class="headerlink" title="自定义日志收集中间件"></a>自定义日志收集中间件</h3><blockquote>
<p> logrus    “github.com/sirupsen/logrus”</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Loges = logrus.New()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	InitElasticForLog()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES日志中间件  用于收集请求日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AccessLogging</span><span class="params">(f http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		_ = r.ParseForm()</span><br><span class="line">		buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">		_, _ = buf.ReadFrom(r.Body)</span><br><span class="line">		logEntry := Loges.WithFields(logrus.Fields&#123;</span><br><span class="line">			<span class="string">&quot;host&quot;</span>:         r.Host,</span><br><span class="line">			<span class="string">&quot;ip&quot;</span>:           r.RemoteAddr,</span><br><span class="line">			<span class="string">&quot;method&quot;</span>:       r.Method,</span><br><span class="line">			<span class="string">&quot;path&quot;</span>:         r.RequestURI,</span><br><span class="line">			<span class="string">&quot;query&quot;</span>:        r.URL.RawQuery,</span><br><span class="line">			<span class="string">&quot;request&quot;</span>: buf.String(),</span><br><span class="line">		&#125;)</span><br><span class="line">		wc := &amp;ResponseWithRecorder&#123;</span><br><span class="line">			ResponseWriter: w,</span><br><span class="line">			statusCode:     http.StatusOK,</span><br><span class="line">			body:           bytes.Buffer&#123;&#125;,</span><br><span class="line">		&#125;</span><br><span class="line">		f.ServeHTTP(wc, r)</span><br><span class="line">		<span class="keyword">if</span> !IsUnlogHost(r.Host, r.RequestURI) &#123;</span><br><span class="line">			<span class="keyword">defer</span> logEntry.WithFields(logrus.Fields&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>:        wc.statusCode,</span><br><span class="line">				<span class="string">&quot;respone&quot;</span>: wc.body.String(),</span><br><span class="line">			&#125;).Info()</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p>第三方包 elastic    “github.com/olivere/elastic”</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">client, err := elastic.NewClient(</span><br><span class="line"></span><br><span class="line">	elastic.SetURL(<span class="string">&quot;http://xx.xx.xx.xx:9029&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	elastic.SetBasicAuth(<span class="string">&quot;writerUser&quot;</span>, <span class="string">&quot;u_pwd&quot;</span>),</span><br><span class="line">	<span class="comment">// 其他配置项</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	Loges.Panic(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="logrus-使用ES-hook"><a href="#logrus-使用ES-hook" class="headerlink" title="logrus 使用ES-hook"></a>logrus 使用ES-hook</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用时间索引</span></span><br><span class="line"><span class="comment">//&quot;2006-01-02 15:04:05&quot;</span></span><br><span class="line">t := time.Now()</span><br><span class="line">date := t.Format(<span class="string">&quot;200601&quot;</span>)</span><br><span class="line">hook, err := elogrus.NewElasticHook(client, GetHost(), logrus.DebugLevel, <span class="string">&quot;YOUR_SERVER_NAME_LOG_&quot;</span>+date)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	Loges.Panic(err)</span><br><span class="line">&#125;</span><br><span class="line">Loges.AddHook(hook)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="自定义响应数据格式"><a href="#自定义响应数据格式" class="headerlink" title="自定义响应数据格式"></a>自定义响应数据格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type ResponseWithRecorder struct &#123;</span><br><span class="line">	http.ResponseWriter</span><br><span class="line">	statusCode int</span><br><span class="line">	body       bytes.Buffer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (rec *ResponseWithRecorder) WriteHeader(statusCode int) &#123;</span><br><span class="line">	rec.ResponseWriter.WriteHeader(statusCode)</span><br><span class="line">	rec.statusCode &#x3D; statusCode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (rec *ResponseWithRecorder) Write(d []byte) (n int, err error) &#123;</span><br><span class="line">	n, err &#x3D; rec.ResponseWriter.Write(d)</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	rec.body.Write(d)</span><br><span class="line"></span><br><span class="line">	return</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="拦截服务检查的日志记录"><a href="#拦截服务检查的日志记录" class="headerlink" title="拦截服务检查的日志记录"></a>拦截服务检查的日志记录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if !IsUnlogHost(r.Host, r.RequestURI) &#123;</span><br><span class="line">	defer logEntry.WithFields(logrus.Fields&#123;</span><br><span class="line">		&quot;status&quot;:        wc.statusCode,</span><br><span class="line">		&quot;respone&quot;: wc.body.String(),</span><br><span class="line">	&#125;).Info()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func IsUnlogHost(h string, url string) bool &#123;</span><br><span class="line">	if strings.Contains(h, &#96;lvscheck.xitong.xxx&#96;) &amp;&amp; url &#x3D;&#x3D; &quot;&#x2F;status&quot; &#123;</span><br><span class="line">		return true</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		return false</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="业务逻辑使用"><a href="#业务逻辑使用" class="headerlink" title="业务逻辑使用"></a>业务逻辑使用</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http:///asdasdasda.com" alt="Kibana"></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>在日志中间件获取请求Body时 可能导致接口服务无法正常接受提交参数的问题:可以在获取请求参数时预先使用 ParseForm() <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; middleware</span><br><span class="line"></span><br><span class="line">_ &#x3D; r.ParseForm()</span><br><span class="line">buf :&#x3D; new(bytes.Buffer)</span><br><span class="line">_, _ &#x3D; buf.ReadFrom(r.Body)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; API</span><br><span class="line">req.ParseForm()</span><br><span class="line">var paramsList &#x3D; []string&#123;&quot;appId&quot;, &quot;token&quot;.....&#125;</span><br><span class="line">e, reqData :&#x3D; GetParams(req.Form, paramsList, paramsList)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux:SSH 隧道功能</title>
    <url>/2020/09/15/Linux-SSH-%E9%9A%A7%E9%81%93%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 检查代理服务器是否可以转发</span><br><span class="line">&#x2F;&#x2F; sshd 服务配置</span><br><span class="line">cat &#x2F;etc&#x2F;ssh&#x2F;sshd_config | grep AllowTcp</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 系统转发规则</span><br><span class="line">cat &#x2F;etc&#x2F;sysctl.conf | grep ip_forward</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改配置文件 修改</span><br><span class="line">sysctl -w net.ipv4.ip_forward&#x3D;1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 检查运行时配置</span><br><span class="line">cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 退出 重新连接</span><br><span class="line">ssh -L 8080:127.0.0.1:8080 root@121.xxxx.xxx.xxx</span><br><span class="line"></span><br><span class="line">本地端口：目标机器：端口</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux SSH 隧道</tag>
      </tags>
  </entry>
  <entry>
    <title>Python抓取页面数据分词统计展示</title>
    <url>/2020/06/18/Python%E6%8A%93%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE%E5%88%86%E8%AF%8D%E7%BB%9F%E8%AE%A1%E5%B1%95%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="Python抓取京东评论数据生成词云"><a href="#Python抓取京东评论数据生成词云" class="headerlink" title="Python抓取京东评论数据生成词云"></a>Python抓取京东评论数据生成词云</h1><blockquote>
<p>前提:想抓取商品评论分析关键词出现频率</p>
</blockquote>
<p><img src="https://note.youdao.com/yws/api/personal/file/94251ED148A448729CFCFE6434C6EADF?method=download&shareKey=03ff9d0b39c0895dd71e91f6ecfe6c22" alt="aaa"></p>
<h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><ul>
<li>打开京东SKU详情页面，查看评论，下一页（XHR 请求）找到评论数据接口</li>
<li>使用到的Python 组件：<ul>
<li>requests,</li>
<li>jieba,</li>
<li>numpy,</li>
<li>pandas,</li>
<li>matplotlib,</li>
<li>PIL(Pillow)</li>
</ul>
</li>
</ul>
<h2 id="细节步骤"><a href="#细节步骤" class="headerlink" title="细节步骤"></a>细节步骤</h2><ul>
<li>评论接口地址拼接</li>
<li>返回数据为JSONP，字符串截取一下（可以自定义callback参数）</li>
<li>切分词</li>
<li>停用词</li>
<li>词组统计：wordData……agg(total=’count’)</li>
<li>数据保存：可以使用其他逻辑存档入数据库</li>
<li>词云图片生成、展示</li>
</ul>
<h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><ul>
<li>请求数据接口频率额需要控制 不要急不要慌</li>
<li>文本读取的格式：GBK </li>
<li><code>wordData......agg(</code><strong>total=’count’</strong><code>)</code></li>
<li>词云图生成设置的字体：挑个系统自带的 | 或者Copy你的字体文件到系统字体目录下<ul>
<li>Win：simsun.ttc  </li>
<li>Mac:<code>[ ~ | /System]/Libray/Fonts</code></li>
</ul>
</li>
</ul>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 数据爬取模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments</span>():</span></span><br><span class="line">    all_comments = <span class="string">&quot;&quot;</span></span><br><span class="line">    fetchJSON_comment = <span class="string">&quot;fetchJSON_comment9&quot;</span></span><br><span class="line">    skuID =  <span class="string">&quot;1109759&quot;</span> <span class="comment"># &quot;4093841&quot; # &quot;100004549676&quot;  #</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        url2 = <span class="built_in">str</span>(i)</span><br><span class="line">        url1c = <span class="string">&#x27;https://club.jd.com/comment/productPageComments.action?callback=&#x27;</span> + \</span><br><span class="line">            fetchJSON_comment+url2+<span class="string">&#x27;&amp;productId=&#x27;</span>+skuID+<span class="string">&#x27;&amp;score=0&amp;sortType=5&amp;page=&#x27;</span></span><br><span class="line">        url3c = <span class="string">&#x27;&amp;pageSize=10&amp;isShadowSku=0&amp;rid=0&amp;fold=1&#x27;</span></span><br><span class="line"></span><br><span class="line">        finalurlc = url1c+url2+url3c</span><br><span class="line">        xba = requests.get(finalurlc)</span><br><span class="line">        <span class="comment"># fetchJSON_comment(</span></span><br><span class="line">        print(finalurlc, xba.text[<span class="number">0</span>:<span class="built_in">len</span>(fetchJSON_comment+url2)+<span class="number">1</span>])</span><br><span class="line">        data = json.loads(xba.text[<span class="built_in">len</span>(fetchJSON_comment+url2)+<span class="number">1</span>:-<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> data[<span class="string">&#x27;comments&#x27;</span>]:</span><br><span class="line">            content = j[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">            all_comments = all_comments+content</span><br><span class="line">        print(i, xba.text[<span class="number">0</span>:<span class="number">20</span>])</span><br><span class="line">    <span class="keyword">return</span> all_comments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据清洗处理模块</span></span><br><span class="line"></span><br><span class="line">xt=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_clear</span>(<span class="params">xt</span>):</span></span><br><span class="line">    xt = get_comments()</span><br><span class="line">    sys.exit(xt)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[\u4e00-\u9fa5]+&#x27;</span>)</span><br><span class="line">    filedata = re.findall(pattern, xt)</span><br><span class="line">    xx = <span class="string">&#x27;&#x27;</span>.join(filedata)</span><br><span class="line">    clear = jieba.lcut(xx)   <span class="comment"># 切分词</span></span><br><span class="line">    cleared = pd.DataFrame(&#123;<span class="string">&#x27;keywords&#x27;</span>: clear&#125;)</span><br><span class="line">    stopwords = pd.read_csv(<span class="string">&quot;chineseStopWords.txt&quot;</span>, index_col=<span class="literal">False</span>,</span><br><span class="line">                            quoting=<span class="number">3</span>, sep=<span class="string">&quot;\t&quot;</span>, names=[<span class="string">&#x27;stopword&#x27;</span>], encoding=<span class="string">&#x27;GBK&#x27;</span>)</span><br><span class="line">    cleared = cleared[~cleared.keywords.isin(stopwords.stopword)]</span><br><span class="line">    <span class="comment"># count_words = cleared.groupby(by=[&#x27;clear&#x27;])[&#x27;clear&#x27;].agg(&#123;&quot;num&quot;: numpy.size&#125;)</span></span><br><span class="line">    count_words = cleared.groupby(<span class="string">&#x27;keywords&#x27;</span>)[<span class="string">&#x27;keywords&#x27;</span>].agg(total=<span class="string">&#x27;count&#x27;</span>)</span><br><span class="line">    count_words = count_words.reset_index().sort_values(</span><br><span class="line">        by=[<span class="string">&quot;total&quot;</span>], ascending=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># df = pd.DataFrame(count_words)</span></span><br><span class="line">    <span class="comment"># if os.path.exists(&quot;count_words.csv&quot;):</span></span><br><span class="line">    <span class="comment">#     os.remove(&#x27;count_words.csv&#x27;)</span></span><br><span class="line">    <span class="comment"># df.to_csv(&#x27;count_words.csv&#x27;, encoding=&#x27;GBK&#x27;)</span></span><br><span class="line">    xt = count_words</span><br><span class="line">    <span class="keyword">return</span> count_words</span><br><span class="line"></span><br><span class="line"><span class="comment"># 词云展示模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_wordclound</span>():</span></span><br><span class="line">    <span class="comment"># d = path.dirname(__file__)</span></span><br><span class="line">    <span class="comment"># msk = np.array(Image.open(path.join(d, &quot;151.jpg&quot;)))</span></span><br><span class="line">    word_frequence = &#123;x[<span class="number">0</span>]: x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> data_clear(xt).head(<span class="number">200</span>).values&#125;</span><br><span class="line">    wordcloud = WordCloud(font_path=<span class="string">&quot;simsun.ttc&quot;</span>, <span class="comment"># mask=msk,</span></span><br><span class="line">                          background_color=<span class="string">&quot;#EEEEEE&quot;</span>, max_font_size=<span class="number">250</span>, width=<span class="number">2100</span>, height=<span class="number">1200</span>)</span><br><span class="line">    wordcloud = wordcloud.fit_words(word_frequence)</span><br><span class="line">    plt.imshow(wordcloud)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    make_wordclound()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Sonar代码检查服务部署</title>
    <url>/2020/09/15/Sonar%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="SonarQube代码检查服务部署"><a href="#SonarQube代码检查服务部署" class="headerlink" title="SonarQube代码检查服务部署"></a>SonarQube代码检查服务部署</h2><blockquote>
<p>前言： 小组内的代码检查服务<br><br/> 部署： Docker</p>
</blockquote>
<p>[TOC]</p>
<h2 id="服务构成"><a href="#服务构成" class="headerlink" title="服务构成"></a>服务构成</h2><ul>
<li>PostgreSQL</li>
<li>SonarQube</li>
</ul>
<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="SonarQube"><a href="#SonarQube" class="headerlink" title="SonarQube"></a>SonarQube</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> sonarqube:<span class="number">8.2</span>-community</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> run.sh /opt/sonarqube/bin/</span></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt install -y gosu</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> sonarqube</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/opt/sonarqube/bin/run.sh&quot;</span>]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># run.sh</span></span><br><span class="line">        .</span><br><span class="line">        <span class="comment"># map legacy env variables</span></span><br><span class="line">        set_prop_from_env_var <span class="string">&quot;sonar.jdbc.username&quot;</span> <span class="string">&quot;$&#123;SONARQUBE_JDBC_USERNAME:-&#125;&quot;</span></span><br><span class="line">        set_prop_from_env_var <span class="string">&quot;sonar.jdbc.password&quot;</span> <span class="string">&quot;$&#123;SONARQUBE_JDBC_PASSWORD:-&#125;&quot;</span></span><br><span class="line">        set_prop_from_env_var <span class="string">&quot;sonar.jdbc.url&quot;</span> <span class="string">&quot;$&#123;SONARQUBE_JDBC_URL:-&#125;&quot;</span></span><br><span class="line">        set_prop_from_env_var <span class="string">&quot;sonar.web.javaAdditionalOpts&quot;</span> <span class="string">&quot;$&#123;SONARQUBE_WEB_JVM_OPTS:-&#125;&quot;</span></span><br><span class="line">        </span><br><span class="line">        exec gosu sonarqube java -jar <span class="string">&quot;lib/sonar-application-$SONAR_VERSION.jar&quot;</span> \</span><br><span class="line">          -Dsonar.log.console=true \</span><br><span class="line">          <span class="string">&quot;$&#123;sq_opts[@]&#125;&quot;</span> \</span><br><span class="line">          <span class="string">&quot;$@&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> postgres:latest</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> postgres.log /opt/</span></span><br><span class="line"><span class="comment"># POSTGRESQL使用最新镜像</span></span><br></pre></td></tr></table></figure>

<h3 id="推送到私有仓库，远端部署"><a href="#推送到私有仓库，远端部署" class="headerlink" title="推送到私有仓库，远端部署"></a>推送到私有仓库，远端部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">starkctl push -u xxx -p xxx r.addops.xxx.cn/namespace/imagename:tag</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地服务Docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mydb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5433:5432&quot;</span></span><br><span class="line">  <span class="attr">sonarqube:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonarqube</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">sonar.jdbc.username:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">sonar.jdbc.password:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">sonar.jdbc.url:</span> <span class="string">jdbc:postgresql://mydb:5432/sonar</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9823:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.sonar:/home/sonarqube/.sonar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./scaner:/opt/sonarqube/scanner</span></span><br></pre></td></tr></table></figure>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote>
<p>启动容器的时候会启动内置的 ES 服务，这里要求不能使用 root 账户运行,需要用到 gosu 或 su-exec 容器内切换用户执行脚本</p>
</blockquote>
<h3 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h3><p># <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices">https://docs.docker.com/develop/develop-images/dockerfile_best-practices</a> <br/><br># <a href="https://github.com/SonarSource/docker-sonarqube">https://github.com/SonarSource/docker-sonarqube</a></p>
]]></content>
  </entry>
  <entry>
    <title>TensorFlow:鸢尾花品种分析demo</title>
    <url>/2020/09/15/TensorFlow-%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%93%81%E7%A7%8D%E5%88%86%E6%9E%90demo/</url>
    <content><![CDATA[<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="https://note.youdao.com/yws/public/resource/1f52c84118d87ca95bb96cf11951ce88/xmlnote/DEE9C090352A4BBF8281CA269958696D/8343" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@433ad0b9b2e7:&#x2F;usr&#x2F;src&#x2F;app# python train2.py </span><br><span class="line">Loss test: 1.3583741188049316</span><br><span class="line">Step: 0, Initial Loss: 1.3583741188049316</span><br><span class="line">Step: 1,         Loss: 1.2449184656143188</span><br><span class="line">Epoch 000: Loss: 1.061, Accuracy: 46.667%</span><br><span class="line">Epoch 050: Loss: 0.418, Accuracy: 82.500%</span><br><span class="line">Epoch 100: Loss: 0.307, Accuracy: 94.167%</span><br><span class="line">Epoch 150: Loss: 0.221, Accuracy: 97.500%</span><br><span class="line">Epoch 200: Loss: 0.162, Accuracy: 96.667%</span><br><span class="line">Test set accuracy: 96.667%</span><br><span class="line">root@433ad0b9b2e7:&#x2F;usr&#x2F;src&#x2F;app# </span><br><span class="line">root@433ad0b9b2e7:&#x2F;usr&#x2F;src&#x2F;app# python train2_test.py </span><br><span class="line">Example 0 prediction: Iris setosa (98.3%)</span><br><span class="line">Example 1 prediction: Iris versicolor (82.5%)</span><br><span class="line">Example 2 prediction: Iris virginica (75.2%)</span><br><span class="line">root@433ad0b9b2e7:&#x2F;usr&#x2F;src&#x2F;app# </span><br></pre></td></tr></table></figure>

<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul>
<li>Python:3.7.4</li>
<li>TensorFlow:1.14.0</li>
<li>Matplotlib</li>
<li>数据来源：<ul>
<li>训练  <a href="http://download.tensorflow.org/data/iris_training.csv">http://download.tensorflow.org/data/iris_training.csv</a></li>
<li>测试  <a href="http://download.tensorflow.org/data/iris_test.csv">http://download.tensorflow.org/data/iris_test.csv</a></li>
<li>检测  <code>自定义</code></li>
</ul>
</li>
</ul>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow.contrib.eager <span class="keyword">as</span> tfe</span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">tf.compat.v1.enable_eager_execution()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;TensorFlow version: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(tf.version.VERSION))</span><br><span class="line">print(<span class="string">&quot;Eager execution: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(tf.executing_eagerly()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">用于训练生成鸢尾花iris识别模型</span></span><br><span class="line"><span class="string">@训练图表：./data/images/iris_*.png</span></span><br><span class="line"><span class="string">@模型文件：./data/model/iris-model</span></span><br><span class="line"><span class="string">@使用环境：</span></span><br><span class="line"><span class="string">    Python: 3.7.4</span></span><br><span class="line"><span class="string">    TensorFlow version: 1.14.0</span></span><br><span class="line"><span class="string">    Eager execution: True</span></span><br><span class="line"><span class="string">@作者：baqianxin@163.com</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 创建model</span></span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=tf.nn.relu, input_shape=(<span class="number">4</span>,)), </span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=tf.nn.relu),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">3</span>)</span><br><span class="line">])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><blockquote>
<p>加载的远端CSV数据，使用tf.data.experimental.make_csv_dataset转化为Dataset</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_dataset_url = <span class="string">&quot;http://download.tensorflow.org/data/iris_training.csv&quot;</span></span><br><span class="line"></span><br><span class="line">train_dataset_fp = tf.keras.utils.get_file(fname=os.path.basename(train_dataset_url),</span><br><span class="line">                                           origin=train_dataset_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;Local copy of the dataset file: &#123;&#125;&quot;.format(train_dataset_fp))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># column order in CSV file</span></span><br><span class="line">column_names = [<span class="string">&#x27;sepal_length&#x27;</span>, <span class="string">&#x27;sepal_width&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;petal_length&#x27;</span>, <span class="string">&#x27;petal_width&#x27;</span>, <span class="string">&#x27;species&#x27;</span>]</span><br><span class="line"></span><br><span class="line">feature_names = column_names[:-<span class="number">1</span>]</span><br><span class="line">label_name = column_names[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;Features: &#123;&#125;&quot;.format(feature_names))</span></span><br><span class="line"><span class="comment"># print(&quot;Label: &#123;&#125;&quot;.format(label_name))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义标签</span></span><br><span class="line">class_names = [<span class="string">&#x27;Iris setosa&#x27;</span>, <span class="string">&#x27;Iris versicolor&#x27;</span>, <span class="string">&#x27;Iris virginica&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 tf.data.Dataset</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">train_dataset = tf.data.experimental.make_csv_dataset(</span><br><span class="line">    train_dataset_fp,</span><br><span class="line">    batch_size,</span><br><span class="line">    column_names=column_names,</span><br><span class="line">    label_name=label_name,</span><br><span class="line">    num_epochs=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="定义损失和梯度函数"><a href="#定义损失和梯度函数" class="headerlink" title="定义损失和梯度函数"></a>定义损失和梯度函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.定义损失 和梯度函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span>(<span class="params">model, x, y</span>):</span></span><br><span class="line">    y_ = model(x)</span><br><span class="line">    <span class="keyword">return</span> tf.compat.v1.losses.sparse_softmax_cross_entropy(labels=y, logits=y_)</span><br><span class="line"></span><br><span class="line">l = loss(model, features, labels)</span><br><span class="line">print(<span class="string">&quot;Loss test: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(l))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.定义用于优化模型的梯度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grad</span>(<span class="params">model, inputs, targets</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        loss_value = loss(model, inputs, targets)</span><br><span class="line">    <span class="keyword">return</span> loss_value, tape.gradient(loss_value, model.trainable_variables)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="设置优化器，计数器"><a href="#设置优化器，计数器" class="headerlink" title="设置优化器，计数器"></a>设置优化器，计数器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置优化器，计数器</span></span><br><span class="line">optimizer = tf.compat.v1.train.GradientDescentOptimizer(learning_rate=<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure>

<h3 id="自定义训练"><a href="#自定义训练" class="headerlink" title="自定义训练"></a>自定义训练</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_loss_results = []</span><br><span class="line">train_accuracy_results = []</span><br><span class="line"></span><br><span class="line">num_epochs = <span class="number">201</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    epoch_loss_avg = tfe.metrics.Mean()</span><br><span class="line">    epoch_accuracy = tfe.metrics.Accuracy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Training loop - using batches of 32</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> train_dataset:</span><br><span class="line">        <span class="comment"># Optimize the model</span></span><br><span class="line">        loss_value, grads = grad(model, x, y)</span><br><span class="line">        optimizer.apply_gradients(<span class="built_in">zip</span>(grads, model.variables),</span><br><span class="line">                                  global_step)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Track progress</span></span><br><span class="line">        epoch_loss_avg(loss_value)  <span class="comment"># add current batch loss</span></span><br><span class="line">        <span class="comment"># compare predicted label to actual label</span></span><br><span class="line">        epoch_accuracy(tf.argmax(model(x), axis=<span class="number">1</span>, output_type=tf.int32), y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># end epoch</span></span><br><span class="line">    train_loss_results.append(epoch_loss_avg.result())</span><br><span class="line">    train_accuracy_results.append(epoch_accuracy.result())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epoch % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&quot;Epoch &#123;:03d&#125;: Loss: &#123;:.3f&#125;, Accuracy: &#123;:.3%&#125;&quot;</span>.<span class="built_in">format</span>(epoch,</span><br><span class="line">                                                                    epoch_loss_avg.result(),</span><br><span class="line">                                                                    epoch_accuracy.result()))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><blockquote>
<p>把训练过程中的损失与正确率都记录到<code>train_loss_results</code>,<code>train_accuracy_results</code>数组中了，在通过pyplot输出到可视化图表文件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, sharex=<span class="literal">True</span>, figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">fig.suptitle(<span class="string">&#x27;Training Metrics&#x27;</span>)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>].set_ylabel(<span class="string">&quot;Loss&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">axes[<span class="number">0</span>].plot(train_loss_results)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">1</span>].set_ylabel(<span class="string">&quot;Accuracy&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_xlabel(<span class="string">&quot;Epoch&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">axes[<span class="number">1</span>].plot(train_accuracy_results)</span><br><span class="line">plt.savefig(<span class="string">&quot;./data/images/iris_loss.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="获取测试数据并检测"><a href="#获取测试数据并检测" class="headerlink" title="获取测试数据并检测"></a>获取测试数据并检测</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取检测数据</span></span><br><span class="line">test_url = <span class="string">&quot;http://download.tensorflow.org/data/iris_test.csv&quot;</span></span><br><span class="line"></span><br><span class="line">test_fp = tf.keras.utils.get_file(fname=os.path.basename(test_url),</span><br><span class="line">                                  origin=test_url)</span><br><span class="line"></span><br><span class="line">test_dataset = tf.data.experimental.make_csv_dataset(</span><br><span class="line">    test_fp,</span><br><span class="line">    batch_size,</span><br><span class="line">    column_names=column_names,</span><br><span class="line">    label_name=<span class="string">&#x27;species&#x27;</span>,</span><br><span class="line">    num_epochs=<span class="number">1</span>,</span><br><span class="line">    shuffle=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 其他方式格式化数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_features_vector</span>(<span class="params">features, labels</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Pack the features into a single array.&quot;&quot;&quot;</span></span><br><span class="line">    features = tf.stack(<span class="built_in">list</span>(features.values()), axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> features, labels</span><br><span class="line">    </span><br><span class="line">test_dataset = test_dataset.<span class="built_in">map</span>(pack_features_vector)</span><br><span class="line">test_accuracy = tfe.metrics.Accuracy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x, y) <span class="keyword">in</span> test_dataset:</span><br><span class="line">  logits = model(x)</span><br><span class="line">  prediction = tf.argmax(logits, axis=<span class="number">1</span>, output_type=tf.int32)</span><br><span class="line">  test_accuracy(prediction, y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Test set accuracy: &#123;:.3%&#125;&quot;</span>.<span class="built_in">format</span>(test_accuracy.result()))</span><br></pre></td></tr></table></figure>

<h3 id="compile和保存model"><a href="#compile和保存model" class="headerlink" title="compile和保存model"></a>compile和保存model</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># compile 用于设定训练过程</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.Adam(),</span><br><span class="line">                loss=tf.keras.losses.sparse_categorical_crossentropy,</span><br><span class="line">                metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"><span class="comment"># 全量保存模型</span></span><br><span class="line">model.save(<span class="string">&quot;./data/model/iris-model&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="使用模型检测未知数据train-test-py"><a href="#使用模型检测未知数据train-test-py" class="headerlink" title="使用模型检测未知数据train_test.py"></a>使用模型检测未知数据<code>train_test.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow.contrib.eager <span class="keyword">as</span> tfe</span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">tf.compat.v1.enable_eager_execution()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载训练好的模型</span></span><br><span class="line">file_path = <span class="string">&#x27;./data/model&#x27;</span></span><br><span class="line">model = tf.keras.models.load_model(file_path + <span class="string">&quot;/iris-model&quot;</span>)</span><br><span class="line"><span class="comment"># model.summary()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义标签</span></span><br><span class="line">class_names = [<span class="string">&#x27;Iris setosa&#x27;</span>, <span class="string">&#x27;Iris versicolor&#x27;</span>, <span class="string">&#x27;Iris virginica&#x27;</span>]</span><br><span class="line"></span><br><span class="line">predict_dataset = tf.convert_to_tensor([</span><br><span class="line">    [<span class="number">5.1</span>, <span class="number">3.3</span>, <span class="number">1.7</span>, <span class="number">0.5</span>, ],</span><br><span class="line">    [<span class="number">5.9</span>, <span class="number">3.0</span>, <span class="number">4.2</span>, <span class="number">1.5</span>, ],</span><br><span class="line">    [<span class="number">6.9</span>, <span class="number">3.1</span>, <span class="number">5.4</span>, <span class="number">2.1</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">predictions = model(predict_dataset)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, logits <span class="keyword">in</span> <span class="built_in">enumerate</span>(predictions):</span><br><span class="line">    class_idx = tf.argmax(logits).numpy()</span><br><span class="line">    p = tf.nn.softmax(logits)[class_idx]</span><br><span class="line">    name = class_names[class_idx]</span><br><span class="line">    print(<span class="string">&quot;Example &#123;&#125; prediction: &#123;&#125; (&#123;:4.1f&#125;%)&quot;</span>.<span class="built_in">format</span>(i, name, <span class="number">100</span>*p))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="遇到问题-amp-思路"><a href="#遇到问题-amp-思路" class="headerlink" title="遇到问题&amp;思路"></a>遇到问题&amp;思路</h2><p>不好意思没能力提出问题，很多参数都看不懂，只是模拟操作一下</p>
<ul>
<li><strong>大致就是生成数据集</strong>：可能比较复杂需要格式化</li>
<li><strong>定义标签</strong>：一个常量数组</li>
<li><strong>创建模型</strong>：配置层数及一些输入输出参数</li>
<li><strong>定义损失与梯度函数</strong>：用来检测是否训练到位了</li>
<li><strong>定义优化器</strong>，计数器：同名意</li>
<li><strong><em>可以单个数据测试下这些参数</em></strong></li>
<li><strong>自定义训练方法</strong>：记录下训练的次数，每一次训练的结果（）</li>
<li><strong>输出训练数据</strong>：可视化很直白表示模型当前数据下是否训练的合理</li>
<li><strong><em>再使用准备好的测试数据在这个训练过的模型上测试</em></strong></li>
<li><strong>然后就是保存</strong>：有几种，配置，权重，全量保存</li>
<li>++<strong>最后就是拿未知数据来检测保存的模型是否准确了y</strong>++</li>
</ul>
]]></content>
      <tags>
        <tag>TensorFlow Python</tag>
      </tags>
  </entry>
</search>
